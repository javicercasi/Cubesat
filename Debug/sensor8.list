
sensor8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a08c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800a230  0800a230  0001a230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a694  0800a694  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a694  0800a694  0001a694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a69c  0800a69c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a69c  0800a69c  0001a69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6a0  0800a6a0  0001a6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800a6a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002020c  2**0
                  CONTENTS
 10 .bss          000001a8  2000020c  2000020c  0002020c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003b4  200003b4  0002020c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f662  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002067  00000000  00000000  0002f89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  00031908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b18  00000000  00000000  000324f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d39  00000000  00000000  00033010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000111ca  00000000  00000000  00054d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc43a  00000000  00000000  00065f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013234d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004544  00000000  00000000  001323a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a214 	.word	0x0800a214

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	0800a214 	.word	0x0800a214

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9a7 	b.w	8000fc8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f835 	bl	8000cf8 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f828 	bl	8000cf8 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f817 	bl	8000cf8 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f809 	bl	8000cf8 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2319      	movs	r3, #25
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	463b      	mov	r3, r7
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2288      	movs	r2, #136	; 0x88
 8000fe4:	21ec      	movs	r1, #236	; 0xec
 8000fe6:	4850      	ldr	r0, [pc, #320]	; (8001128 <TrimRead+0x15c>)
 8000fe8:	f002 ff36 	bl	8003e58 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	//HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	783b      	ldrb	r3, [r7, #0]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	; (800112c <TrimRead+0x160>)
 8000ffe:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	78bb      	ldrb	r3, [r7, #2]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b48      	ldr	r3, [pc, #288]	; (8001130 <TrimRead+0x164>)
 8001010:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001012:	797b      	ldrb	r3, [r7, #5]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	b21a      	sxth	r2, r3
 8001018:	793b      	ldrb	r3, [r7, #4]
 800101a:	b21b      	sxth	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	b21a      	sxth	r2, r3
 8001020:	4b44      	ldr	r3, [pc, #272]	; (8001134 <TrimRead+0x168>)
 8001022:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	797b      	ldrb	r3, [r7, #5]
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b40      	ldr	r3, [pc, #256]	; (8001138 <TrimRead+0x16c>)
 8001036:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001038:	7a7b      	ldrb	r3, [r7, #9]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b3d      	ldr	r3, [pc, #244]	; (800113c <TrimRead+0x170>)
 8001048:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800104a:	7afb      	ldrb	r3, [r7, #11]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	7abb      	ldrb	r3, [r7, #10]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21a      	sxth	r2, r3
 8001058:	4b39      	ldr	r3, [pc, #228]	; (8001140 <TrimRead+0x174>)
 800105a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800105c:	7b7b      	ldrb	r3, [r7, #13]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	7b3b      	ldrb	r3, [r7, #12]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21a      	sxth	r2, r3
 800106a:	4b36      	ldr	r3, [pc, #216]	; (8001144 <TrimRead+0x178>)
 800106c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21a      	sxth	r2, r3
 800107c:	4b32      	ldr	r3, [pc, #200]	; (8001148 <TrimRead+0x17c>)
 800107e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001080:	7c7b      	ldrb	r3, [r7, #17]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	b21a      	sxth	r2, r3
 8001086:	7c3b      	ldrb	r3, [r7, #16]
 8001088:	b21b      	sxth	r3, r3
 800108a:	4313      	orrs	r3, r2
 800108c:	b21a      	sxth	r2, r3
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <TrimRead+0x180>)
 8001090:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001092:	7cfb      	ldrb	r3, [r7, #19]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	7cbb      	ldrb	r3, [r7, #18]
 800109a:	b21b      	sxth	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b21a      	sxth	r2, r3
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <TrimRead+0x184>)
 80010a2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010a4:	7d7b      	ldrb	r3, [r7, #21]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	7d3b      	ldrb	r3, [r7, #20]
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <TrimRead+0x188>)
 80010b4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	7dbb      	ldrb	r3, [r7, #22]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <TrimRead+0x18c>)
 80010c6:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80010c8:	7e3b      	ldrb	r3, [r7, #24]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <TrimRead+0x190>)
 80010ce:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80010d0:	7ebb      	ldrb	r3, [r7, #26]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	7e7b      	ldrb	r3, [r7, #25]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b21a      	sxth	r2, r3
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <TrimRead+0x194>)
 80010e0:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80010e2:	7efb      	ldrb	r3, [r7, #27]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <TrimRead+0x198>)
 80010e8:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80010ea:	7f3b      	ldrb	r3, [r7, #28]
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	7f7b      	ldrb	r3, [r7, #29]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	f003 030f 	and.w	r3, r3, #15
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <TrimRead+0x19c>)
 8001100:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8001102:	7fbb      	ldrb	r3, [r7, #30]
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	b21a      	sxth	r2, r3
 8001108:	7f7b      	ldrb	r3, [r7, #29]
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	b2db      	uxtb	r3, r3
 800110e:	b21b      	sxth	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b21a      	sxth	r2, r3
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <TrimRead+0x1a0>)
 8001116:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001118:	7ffb      	ldrb	r3, [r7, #31]
 800111a:	b21a      	sxth	r2, r3
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <TrimRead+0x1a4>)
 800111e:	801a      	strh	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200002b0 	.word	0x200002b0
 800112c:	20000238 	.word	0x20000238
 8001130:	20000240 	.word	0x20000240
 8001134:	20000242 	.word	0x20000242
 8001138:	2000023a 	.word	0x2000023a
 800113c:	20000244 	.word	0x20000244
 8001140:	20000246 	.word	0x20000246
 8001144:	20000248 	.word	0x20000248
 8001148:	2000024a 	.word	0x2000024a
 800114c:	2000024c 	.word	0x2000024c
 8001150:	2000024e 	.word	0x2000024e
 8001154:	20000250 	.word	0x20000250
 8001158:	20000252 	.word	0x20000252
 800115c:	2000023c 	.word	0x2000023c
 8001160:	20000254 	.word	0x20000254
 8001164:	2000023e 	.word	0x2000023e
 8001168:	20000256 	.word	0x20000256
 800116c:	20000258 	.word	0x20000258
 8001170:	2000025a 	.word	0x2000025a

08001174 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af04      	add	r7, sp, #16
 800117a:	4604      	mov	r4, r0
 800117c:	4608      	mov	r0, r1
 800117e:	4611      	mov	r1, r2
 8001180:	461a      	mov	r2, r3
 8001182:	4623      	mov	r3, r4
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	4603      	mov	r3, r0
 8001188:	71bb      	strb	r3, [r7, #6]
 800118a:	460b      	mov	r3, r1
 800118c:	717b      	strb	r3, [r7, #5]
 800118e:	4613      	mov	r3, r2
 8001190:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8001192:	f7ff ff1b 	bl	8000fcc <TrimRead>


	uint8_t datatowrite = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 800119e:	23b6      	movs	r3, #182	; 0xb6
 80011a0:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	2301      	movs	r3, #1
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	f107 030f 	add.w	r3, r7, #15
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	22e0      	movs	r2, #224	; 0xe0
 80011b6:	21ec      	movs	r1, #236	; 0xec
 80011b8:	4841      	ldr	r0, [pc, #260]	; (80012c0 <BME280_Config+0x14c>)
 80011ba:	f002 fd39 	bl	8003c30 <HAL_I2C_Mem_Write>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d002      	beq.n	80011ca <BME280_Config+0x56>
	{
		return -1;
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	e075      	b.n	80012b6 <BME280_Config+0x142>
	}

	HAL_Delay (100);
 80011ca:	2064      	movs	r0, #100	; 0x64
 80011cc:	f001 fa2e 	bl	800262c <HAL_Delay>
		return -1;
	}

**/
	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80011d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011d4:	015b      	lsls	r3, r3, #5
 80011d6:	b25a      	sxtb	r2, r3
 80011d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ec:	9302      	str	r3, [sp, #8]
 80011ee:	2301      	movs	r3, #1
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	f107 030f 	add.w	r3, r7, #15
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	22f5      	movs	r2, #245	; 0xf5
 80011fc:	21ec      	movs	r1, #236	; 0xec
 80011fe:	4830      	ldr	r0, [pc, #192]	; (80012c0 <BME280_Config+0x14c>)
 8001200:	f002 fd16 	bl	8003c30 <HAL_I2C_Mem_Write>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <BME280_Config+0x9c>
	{
		return -1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	e052      	b.n	80012b6 <BME280_Config+0x142>
	}
	HAL_Delay (100);
 8001210:	2064      	movs	r0, #100	; 0x64
 8001212:	f001 fa0b 	bl	800262c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	2301      	movs	r3, #1
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	f107 030e 	add.w	r3, r7, #14
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	22f5      	movs	r2, #245	; 0xf5
 800122a:	21ec      	movs	r1, #236	; 0xec
 800122c:	4824      	ldr	r0, [pc, #144]	; (80012c0 <BME280_Config+0x14c>)
 800122e:	f002 fe13 	bl	8003e58 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001232:	7bba      	ldrb	r2, [r7, #14]
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	429a      	cmp	r2, r3
 8001238:	d002      	beq.n	8001240 <BME280_Config+0xcc>
	{
		return -1;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	e03a      	b.n	80012b6 <BME280_Config+0x142>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	015b      	lsls	r3, r3, #5
 8001244:	b25a      	sxtb	r2, r3
 8001246:	79bb      	ldrb	r3, [r7, #6]
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	b25b      	sxtb	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b25a      	sxtb	r2, r3
 8001250:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001254:	4313      	orrs	r3, r2
 8001256:	b25b      	sxtb	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800125c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	2301      	movs	r3, #1
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	f107 030f 	add.w	r3, r7, #15
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	22f4      	movs	r2, #244	; 0xf4
 8001270:	21ec      	movs	r1, #236	; 0xec
 8001272:	4813      	ldr	r0, [pc, #76]	; (80012c0 <BME280_Config+0x14c>)
 8001274:	f002 fcdc 	bl	8003c30 <HAL_I2C_Mem_Write>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <BME280_Config+0x110>
	{
		return -1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	e018      	b.n	80012b6 <BME280_Config+0x142>
	}
	HAL_Delay (100);
 8001284:	2064      	movs	r0, #100	; 0x64
 8001286:	f001 f9d1 	bl	800262c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	2301      	movs	r3, #1
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	f107 030e 	add.w	r3, r7, #14
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	22f4      	movs	r2, #244	; 0xf4
 800129e:	21ec      	movs	r1, #236	; 0xec
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <BME280_Config+0x14c>)
 80012a2:	f002 fdd9 	bl	8003e58 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012a6:	7bba      	ldrb	r2, [r7, #14]
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d002      	beq.n	80012b4 <BME280_Config+0x140>
	{
		return -1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	e000      	b.n	80012b6 <BME280_Config+0x142>
	}

	return 0;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	bf00      	nop
 80012c0:	200002b0 	.word	0x200002b0

080012c4 <BMEReadRaw>:


int BMEReadRaw(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af04      	add	r7, sp, #16
	uint8_t RawData[6];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	2301      	movs	r3, #1
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <BMEReadRaw+0x80>)
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	22d0      	movs	r2, #208	; 0xd0
 80012dc:	21ec      	movs	r1, #236	; 0xec
 80012de:	481a      	ldr	r0, [pc, #104]	; (8001348 <BMEReadRaw+0x84>)
 80012e0:	f002 fdba 	bl	8003e58 <HAL_I2C_Mem_Read>

	if (chipID == 0x58)
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <BMEReadRaw+0x80>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b58      	cmp	r3, #88	; 0x58
 80012ea:	d124      	bne.n	8001336 <BMEReadRaw+0x72>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 6, HAL_MAX_DELAY);
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
 80012f0:	9302      	str	r3, [sp, #8]
 80012f2:	2306      	movs	r3, #6
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	463b      	mov	r3, r7
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	22f7      	movs	r2, #247	; 0xf7
 80012fe:	21ec      	movs	r1, #236	; 0xec
 8001300:	4811      	ldr	r0, [pc, #68]	; (8001348 <BMEReadRaw+0x84>)
 8001302:	f002 fda9 	bl	8003e58 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001306:	783b      	ldrb	r3, [r7, #0]
 8001308:	031a      	lsls	r2, r3, #12
 800130a:	787b      	ldrb	r3, [r7, #1]
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4313      	orrs	r3, r2
 8001310:	78ba      	ldrb	r2, [r7, #2]
 8001312:	0912      	lsrs	r2, r2, #4
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	4313      	orrs	r3, r2
 8001318:	4a0c      	ldr	r2, [pc, #48]	; (800134c <BMEReadRaw+0x88>)
 800131a:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 800131c:	78fb      	ldrb	r3, [r7, #3]
 800131e:	031a      	lsls	r2, r3, #12
 8001320:	793b      	ldrb	r3, [r7, #4]
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	4313      	orrs	r3, r2
 8001326:	797a      	ldrb	r2, [r7, #5]
 8001328:	0912      	lsrs	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	4313      	orrs	r3, r2
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <BMEReadRaw+0x8c>)
 8001330:	6013      	str	r3, [r2, #0]
		//hRaw = (RawData[6]<<8)|(RawData[7]);

		return 0;
 8001332:	2300      	movs	r3, #0
 8001334:	e001      	b.n	800133a <BMEReadRaw+0x76>
	}

	else return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000228 	.word	0x20000228
 8001348:	200002b0 	.word	0x200002b0
 800134c:	20000230 	.word	0x20000230
 8001350:	2000022c 	.word	0x2000022c

08001354 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	10da      	asrs	r2, r3, #3
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <BME280_compensate_T_int32+0x74>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	4a18      	ldr	r2, [pc, #96]	; (80013cc <BME280_compensate_T_int32+0x78>)
 800136a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	12db      	asrs	r3, r3, #11
 8001374:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	111b      	asrs	r3, r3, #4
 800137a:	4a13      	ldr	r2, [pc, #76]	; (80013c8 <BME280_compensate_T_int32+0x74>)
 800137c:	8812      	ldrh	r2, [r2, #0]
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	1112      	asrs	r2, r2, #4
 8001384:	4910      	ldr	r1, [pc, #64]	; (80013c8 <BME280_compensate_T_int32+0x74>)
 8001386:	8809      	ldrh	r1, [r1, #0]
 8001388:	1a52      	subs	r2, r2, r1
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	131b      	asrs	r3, r3, #12
 8001390:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <BME280_compensate_T_int32+0x7c>)
 8001392:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	139b      	asrs	r3, r3, #14
 800139c:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <BME280_compensate_T_int32+0x80>)
 80013a6:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <BME280_compensate_T_int32+0x80>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	3380      	adds	r3, #128	; 0x80
 80013b4:	121b      	asrs	r3, r3, #8
 80013b6:	60fb      	str	r3, [r7, #12]
	return T;
 80013b8:	68fb      	ldr	r3, [r7, #12]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000238 	.word	0x20000238
 80013cc:	20000240 	.word	0x20000240
 80013d0:	20000242 	.word	0x20000242
 80013d4:	2000025c 	.word	0x2000025c

080013d8 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 80013d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013dc:	b0ca      	sub	sp, #296	; 0x128
 80013de:	af00      	add	r7, sp, #0
 80013e0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80013e4:	4baf      	ldr	r3, [pc, #700]	; (80016a4 <BME280_compensate_P_int64+0x2cc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	17da      	asrs	r2, r3, #31
 80013ea:	461c      	mov	r4, r3
 80013ec:	4615      	mov	r5, r2
 80013ee:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80013f2:	f145 3bff 	adc.w	fp, r5, #4294967295
 80013f6:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80013fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001402:	fb03 f102 	mul.w	r1, r3, r2
 8001406:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800140a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	18ca      	adds	r2, r1, r3
 8001414:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001418:	fba3 8903 	umull	r8, r9, r3, r3
 800141c:	eb02 0309 	add.w	r3, r2, r9
 8001420:	4699      	mov	r9, r3
 8001422:	4ba1      	ldr	r3, [pc, #644]	; (80016a8 <BME280_compensate_P_int64+0x2d0>)
 8001424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001428:	b21b      	sxth	r3, r3
 800142a:	17da      	asrs	r2, r3, #31
 800142c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001430:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001434:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001438:	4603      	mov	r3, r0
 800143a:	fb03 f209 	mul.w	r2, r3, r9
 800143e:	460b      	mov	r3, r1
 8001440:	fb08 f303 	mul.w	r3, r8, r3
 8001444:	4413      	add	r3, r2
 8001446:	4602      	mov	r2, r0
 8001448:	fba8 1202 	umull	r1, r2, r8, r2
 800144c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001450:	460a      	mov	r2, r1
 8001452:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001456:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800145a:	4413      	add	r3, r2
 800145c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001460:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001464:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001468:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 800146c:	4b8f      	ldr	r3, [pc, #572]	; (80016ac <BME280_compensate_P_int64+0x2d4>)
 800146e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001472:	b21b      	sxth	r3, r3
 8001474:	17da      	asrs	r2, r3, #31
 8001476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800147a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800147e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001482:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001486:	462a      	mov	r2, r5
 8001488:	fb02 f203 	mul.w	r2, r2, r3
 800148c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001490:	4621      	mov	r1, r4
 8001492:	fb01 f303 	mul.w	r3, r1, r3
 8001496:	441a      	add	r2, r3
 8001498:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800149c:	4621      	mov	r1, r4
 800149e:	fba3 1301 	umull	r1, r3, r3, r1
 80014a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014a6:	460b      	mov	r3, r1
 80014a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80014ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014b0:	18d3      	adds	r3, r2, r3
 80014b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014b6:	f04f 0000 	mov.w	r0, #0
 80014ba:	f04f 0100 	mov.w	r1, #0
 80014be:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80014c2:	462b      	mov	r3, r5
 80014c4:	0459      	lsls	r1, r3, #17
 80014c6:	4623      	mov	r3, r4
 80014c8:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80014cc:	4623      	mov	r3, r4
 80014ce:	0458      	lsls	r0, r3, #17
 80014d0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80014d4:	1814      	adds	r4, r2, r0
 80014d6:	643c      	str	r4, [r7, #64]	; 0x40
 80014d8:	414b      	adcs	r3, r1
 80014da:	647b      	str	r3, [r7, #68]	; 0x44
 80014dc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80014e0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80014e4:	4b72      	ldr	r3, [pc, #456]	; (80016b0 <BME280_compensate_P_int64+0x2d8>)
 80014e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	17da      	asrs	r2, r3, #31
 80014ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80014f2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80014f6:	f04f 0000 	mov.w	r0, #0
 80014fa:	f04f 0100 	mov.w	r1, #0
 80014fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001502:	00d9      	lsls	r1, r3, #3
 8001504:	2000      	movs	r0, #0
 8001506:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800150a:	1814      	adds	r4, r2, r0
 800150c:	63bc      	str	r4, [r7, #56]	; 0x38
 800150e:	414b      	adcs	r3, r1
 8001510:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001512:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001516:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800151a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800151e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001522:	fb03 f102 	mul.w	r1, r3, r2
 8001526:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800152a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	18ca      	adds	r2, r1, r3
 8001534:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001538:	fba3 1303 	umull	r1, r3, r3, r3
 800153c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001540:	460b      	mov	r3, r1
 8001542:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800154a:	18d3      	adds	r3, r2, r3
 800154c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001550:	4b58      	ldr	r3, [pc, #352]	; (80016b4 <BME280_compensate_P_int64+0x2dc>)
 8001552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001556:	b21b      	sxth	r3, r3
 8001558:	17da      	asrs	r2, r3, #31
 800155a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800155e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001562:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001566:	462b      	mov	r3, r5
 8001568:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800156c:	4642      	mov	r2, r8
 800156e:	fb02 f203 	mul.w	r2, r2, r3
 8001572:	464b      	mov	r3, r9
 8001574:	4621      	mov	r1, r4
 8001576:	fb01 f303 	mul.w	r3, r1, r3
 800157a:	4413      	add	r3, r2
 800157c:	4622      	mov	r2, r4
 800157e:	4641      	mov	r1, r8
 8001580:	fba2 1201 	umull	r1, r2, r2, r1
 8001584:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001588:	460a      	mov	r2, r1
 800158a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800158e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001592:	4413      	add	r3, r2
 8001594:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001598:	f04f 0000 	mov.w	r0, #0
 800159c:	f04f 0100 	mov.w	r1, #0
 80015a0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80015a4:	4623      	mov	r3, r4
 80015a6:	0a18      	lsrs	r0, r3, #8
 80015a8:	462b      	mov	r3, r5
 80015aa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015ae:	462b      	mov	r3, r5
 80015b0:	1219      	asrs	r1, r3, #8
 80015b2:	4b41      	ldr	r3, [pc, #260]	; (80016b8 <BME280_compensate_P_int64+0x2e0>)
 80015b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	17da      	asrs	r2, r3, #31
 80015bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80015c0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80015c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015c8:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80015cc:	464a      	mov	r2, r9
 80015ce:	fb02 f203 	mul.w	r2, r2, r3
 80015d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015d6:	4644      	mov	r4, r8
 80015d8:	fb04 f303 	mul.w	r3, r4, r3
 80015dc:	441a      	add	r2, r3
 80015de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015e2:	4644      	mov	r4, r8
 80015e4:	fba3 4304 	umull	r4, r3, r3, r4
 80015e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80015ec:	4623      	mov	r3, r4
 80015ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80015f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80015f6:	18d3      	adds	r3, r2, r3
 80015f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001608:	464c      	mov	r4, r9
 800160a:	0323      	lsls	r3, r4, #12
 800160c:	4644      	mov	r4, r8
 800160e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001612:	4644      	mov	r4, r8
 8001614:	0322      	lsls	r2, r4, #12
 8001616:	1884      	adds	r4, r0, r2
 8001618:	633c      	str	r4, [r7, #48]	; 0x30
 800161a:	eb41 0303 	adc.w	r3, r1, r3
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
 8001620:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001624:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001628:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800162c:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001630:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001634:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001638:	4b20      	ldr	r3, [pc, #128]	; (80016bc <BME280_compensate_P_int64+0x2e4>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	b29b      	uxth	r3, r3
 800163e:	2200      	movs	r2, #0
 8001640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001644:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001648:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800164c:	462b      	mov	r3, r5
 800164e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001652:	4642      	mov	r2, r8
 8001654:	fb02 f203 	mul.w	r2, r2, r3
 8001658:	464b      	mov	r3, r9
 800165a:	4621      	mov	r1, r4
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	4413      	add	r3, r2
 8001662:	4622      	mov	r2, r4
 8001664:	4641      	mov	r1, r8
 8001666:	fba2 1201 	umull	r1, r2, r2, r1
 800166a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800166e:	460a      	mov	r2, r1
 8001670:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001674:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001678:	4413      	add	r3, r2
 800167a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800168a:	4629      	mov	r1, r5
 800168c:	104a      	asrs	r2, r1, #1
 800168e:	4629      	mov	r1, r5
 8001690:	17cb      	asrs	r3, r1, #31
 8001692:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 8001696:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800169a:	4313      	orrs	r3, r2
 800169c:	d110      	bne.n	80016c0 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 800169e:	2300      	movs	r3, #0
 80016a0:	e154      	b.n	800194c <BME280_compensate_P_int64+0x574>
 80016a2:	bf00      	nop
 80016a4:	2000025c 	.word	0x2000025c
 80016a8:	2000024c 	.word	0x2000024c
 80016ac:	2000024a 	.word	0x2000024a
 80016b0:	20000248 	.word	0x20000248
 80016b4:	20000246 	.word	0x20000246
 80016b8:	20000244 	.word	0x20000244
 80016bc:	2000023a 	.word	0x2000023a
	}
	p = 1048576-adc_P;
 80016c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016c4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80016c8:	17da      	asrs	r2, r3, #31
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80016cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016ce:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80016d2:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80016d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016da:	105b      	asrs	r3, r3, #1
 80016dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016e4:	07db      	lsls	r3, r3, #31
 80016e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016ea:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80016ee:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80016f2:	4621      	mov	r1, r4
 80016f4:	1a89      	subs	r1, r1, r2
 80016f6:	67b9      	str	r1, [r7, #120]	; 0x78
 80016f8:	4629      	mov	r1, r5
 80016fa:	eb61 0303 	sbc.w	r3, r1, r3
 80016fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001700:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001704:	4622      	mov	r2, r4
 8001706:	462b      	mov	r3, r5
 8001708:	1891      	adds	r1, r2, r2
 800170a:	6239      	str	r1, [r7, #32]
 800170c:	415b      	adcs	r3, r3
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
 8001710:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001714:	4621      	mov	r1, r4
 8001716:	1851      	adds	r1, r2, r1
 8001718:	61b9      	str	r1, [r7, #24]
 800171a:	4629      	mov	r1, r5
 800171c:	414b      	adcs	r3, r1
 800171e:	61fb      	str	r3, [r7, #28]
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800172c:	4649      	mov	r1, r9
 800172e:	018b      	lsls	r3, r1, #6
 8001730:	4641      	mov	r1, r8
 8001732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001736:	4641      	mov	r1, r8
 8001738:	018a      	lsls	r2, r1, #6
 800173a:	4641      	mov	r1, r8
 800173c:	1889      	adds	r1, r1, r2
 800173e:	6139      	str	r1, [r7, #16]
 8001740:	4649      	mov	r1, r9
 8001742:	eb43 0101 	adc.w	r1, r3, r1
 8001746:	6179      	str	r1, [r7, #20]
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001754:	4649      	mov	r1, r9
 8001756:	008b      	lsls	r3, r1, #2
 8001758:	4641      	mov	r1, r8
 800175a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800175e:	4641      	mov	r1, r8
 8001760:	008a      	lsls	r2, r1, #2
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	4603      	mov	r3, r0
 8001768:	4622      	mov	r2, r4
 800176a:	189b      	adds	r3, r3, r2
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	460b      	mov	r3, r1
 8001770:	462a      	mov	r2, r5
 8001772:	eb42 0303 	adc.w	r3, r2, r3
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001784:	4649      	mov	r1, r9
 8001786:	008b      	lsls	r3, r1, #2
 8001788:	4641      	mov	r1, r8
 800178a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800178e:	4641      	mov	r1, r8
 8001790:	008a      	lsls	r2, r1, #2
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	4603      	mov	r3, r0
 8001798:	4622      	mov	r2, r4
 800179a:	189b      	adds	r3, r3, r2
 800179c:	673b      	str	r3, [r7, #112]	; 0x70
 800179e:	462b      	mov	r3, r5
 80017a0:	460a      	mov	r2, r1
 80017a2:	eb42 0303 	adc.w	r3, r2, r3
 80017a6:	677b      	str	r3, [r7, #116]	; 0x74
 80017a8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017ac:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017b0:	f7ff fa52 	bl	8000c58 <__aeabi_ldivmod>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80017bc:	4b66      	ldr	r3, [pc, #408]	; (8001958 <BME280_compensate_P_int64+0x580>)
 80017be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	17da      	asrs	r2, r3, #31
 80017c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80017c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80017ca:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80017ce:	f04f 0000 	mov.w	r0, #0
 80017d2:	f04f 0100 	mov.w	r1, #0
 80017d6:	0b50      	lsrs	r0, r2, #13
 80017d8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80017dc:	1359      	asrs	r1, r3, #13
 80017de:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80017e2:	462b      	mov	r3, r5
 80017e4:	fb00 f203 	mul.w	r2, r0, r3
 80017e8:	4623      	mov	r3, r4
 80017ea:	fb03 f301 	mul.w	r3, r3, r1
 80017ee:	4413      	add	r3, r2
 80017f0:	4622      	mov	r2, r4
 80017f2:	fba2 1200 	umull	r1, r2, r2, r0
 80017f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80017fa:	460a      	mov	r2, r1
 80017fc:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001800:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001804:	4413      	add	r3, r2
 8001806:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800180a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800180e:	f04f 0000 	mov.w	r0, #0
 8001812:	f04f 0100 	mov.w	r1, #0
 8001816:	0b50      	lsrs	r0, r2, #13
 8001818:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800181c:	1359      	asrs	r1, r3, #13
 800181e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001822:	462b      	mov	r3, r5
 8001824:	fb00 f203 	mul.w	r2, r0, r3
 8001828:	4623      	mov	r3, r4
 800182a:	fb03 f301 	mul.w	r3, r3, r1
 800182e:	4413      	add	r3, r2
 8001830:	4622      	mov	r2, r4
 8001832:	fba2 1200 	umull	r1, r2, r2, r0
 8001836:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800183a:	460a      	mov	r2, r1
 800183c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001840:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001844:	4413      	add	r3, r2
 8001846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001856:	4621      	mov	r1, r4
 8001858:	0e4a      	lsrs	r2, r1, #25
 800185a:	4629      	mov	r1, r5
 800185c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001860:	4629      	mov	r1, r5
 8001862:	164b      	asrs	r3, r1, #25
 8001864:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001868:	4b3c      	ldr	r3, [pc, #240]	; (800195c <BME280_compensate_P_int64+0x584>)
 800186a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186e:	b21b      	sxth	r3, r3
 8001870:	17da      	asrs	r2, r3, #31
 8001872:	663b      	str	r3, [r7, #96]	; 0x60
 8001874:	667a      	str	r2, [r7, #100]	; 0x64
 8001876:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800187a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800187e:	462a      	mov	r2, r5
 8001880:	fb02 f203 	mul.w	r2, r2, r3
 8001884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001888:	4621      	mov	r1, r4
 800188a:	fb01 f303 	mul.w	r3, r1, r3
 800188e:	4413      	add	r3, r2
 8001890:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001894:	4621      	mov	r1, r4
 8001896:	fba2 1201 	umull	r1, r2, r2, r1
 800189a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800189e:	460a      	mov	r2, r1
 80018a0:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80018a4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80018a8:	4413      	add	r3, r2
 80018aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80018ba:	4621      	mov	r1, r4
 80018bc:	0cca      	lsrs	r2, r1, #19
 80018be:	4629      	mov	r1, r5
 80018c0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018c4:	4629      	mov	r1, r5
 80018c6:	14cb      	asrs	r3, r1, #19
 80018c8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 80018cc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80018d0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018d4:	1884      	adds	r4, r0, r2
 80018d6:	65bc      	str	r4, [r7, #88]	; 0x58
 80018d8:	eb41 0303 	adc.w	r3, r1, r3
 80018dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018de:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018e2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80018e6:	4621      	mov	r1, r4
 80018e8:	1889      	adds	r1, r1, r2
 80018ea:	6539      	str	r1, [r7, #80]	; 0x50
 80018ec:	4629      	mov	r1, r5
 80018ee:	eb43 0101 	adc.w	r1, r3, r1
 80018f2:	6579      	str	r1, [r7, #84]	; 0x54
 80018f4:	f04f 0000 	mov.w	r0, #0
 80018f8:	f04f 0100 	mov.w	r1, #0
 80018fc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001900:	4623      	mov	r3, r4
 8001902:	0a18      	lsrs	r0, r3, #8
 8001904:	462b      	mov	r3, r5
 8001906:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800190a:	462b      	mov	r3, r5
 800190c:	1219      	asrs	r1, r3, #8
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <BME280_compensate_P_int64+0x588>)
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	b21b      	sxth	r3, r3
 8001916:	17da      	asrs	r2, r3, #31
 8001918:	64bb      	str	r3, [r7, #72]	; 0x48
 800191a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001928:	464c      	mov	r4, r9
 800192a:	0123      	lsls	r3, r4, #4
 800192c:	4644      	mov	r4, r8
 800192e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001932:	4644      	mov	r4, r8
 8001934:	0122      	lsls	r2, r4, #4
 8001936:	1884      	adds	r4, r0, r2
 8001938:	603c      	str	r4, [r7, #0]
 800193a:	eb41 0303 	adc.w	r3, r1, r3
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001944:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001948:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800194c:	4618      	mov	r0, r3
 800194e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001952:	46bd      	mov	sp, r7
 8001954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001958:	20000252 	.word	0x20000252
 800195c:	20000250 	.word	0x20000250
 8001960:	2000024e 	.word	0x2000024e

08001964 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 800196c:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <bme280_compensate_H_int32+0xbc>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001974:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	039a      	lsls	r2, r3, #14
 800197a:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <bme280_compensate_H_int32+0xc0>)
 800197c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001980:	051b      	lsls	r3, r3, #20
 8001982:	1ad2      	subs	r2, r2, r3
 8001984:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <bme280_compensate_H_int32+0xc4>)
 8001986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198a:	4619      	mov	r1, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	fb01 f303 	mul.w	r3, r1, r3
 8001992:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001994:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001998:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800199a:	4a24      	ldr	r2, [pc, #144]	; (8001a2c <bme280_compensate_H_int32+0xc8>)
 800199c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019a0:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80019a8:	1292      	asrs	r2, r2, #10
 80019aa:	4921      	ldr	r1, [pc, #132]	; (8001a30 <bme280_compensate_H_int32+0xcc>)
 80019ac:	8809      	ldrh	r1, [r1, #0]
 80019ae:	4608      	mov	r0, r1
 80019b0:	68f9      	ldr	r1, [r7, #12]
 80019b2:	fb00 f101 	mul.w	r1, r0, r1
 80019b6:	12c9      	asrs	r1, r1, #11
 80019b8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80019bc:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 80019c0:	1292      	asrs	r2, r2, #10
 80019c2:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80019c6:	491b      	ldr	r1, [pc, #108]	; (8001a34 <bme280_compensate_H_int32+0xd0>)
 80019c8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80019cc:	fb01 f202 	mul.w	r2, r1, r2
 80019d0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 80019d4:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	13db      	asrs	r3, r3, #15
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	13d2      	asrs	r2, r2, #15
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 80019ea:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <bme280_compensate_H_int32+0xd4>)
 80019ec:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 80019f2:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a00:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a08:	bfa8      	it	ge
 8001a0a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a0e:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	131b      	asrs	r3, r3, #12
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	2000025c 	.word	0x2000025c
 8001a24:	20000256 	.word	0x20000256
 8001a28:	20000258 	.word	0x20000258
 8001a2c:	2000025a 	.word	0x2000025a
 8001a30:	2000023e 	.word	0x2000023e
 8001a34:	20000254 	.word	0x20000254
 8001a38:	2000023c 	.word	0x2000023c

08001a3c <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001a40:	f7ff fc40 	bl	80012c4 <BMEReadRaw>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d163      	bne.n	8001b12 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001a4a:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <BME280_Measure+0xf4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a52:	d104      	bne.n	8001a5e <BME280_Measure+0x22>
 8001a54:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <BME280_Measure+0xf8>)
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e016      	b.n	8001a8c <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001a5e:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <BME280_Measure+0xf4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fc76 	bl	8001354 <BME280_compensate_T_int32>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fd62 	bl	8000534 <__aeabi_i2d>
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <BME280_Measure+0xfc>)
 8001a76:	f7fe fef1 	bl	800085c <__aeabi_ddiv>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f899 	bl	8000bb8 <__aeabi_d2f>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a2a      	ldr	r2, [pc, #168]	; (8001b34 <BME280_Measure+0xf8>)
 8001a8a:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <BME280_Measure+0x100>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a94:	d104      	bne.n	8001aa0 <BME280_Measure+0x64>
 8001a96:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <BME280_Measure+0x104>)
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e016      	b.n	8001ace <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001aa0:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <BME280_Measure+0x100>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fc97 	bl	80013d8 <BME280_compensate_P_int64>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd31 	bl	8000514 <__aeabi_ui2d>
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <BME280_Measure+0x108>)
 8001ab8:	f7fe fed0 	bl	800085c <__aeabi_ddiv>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f7ff f878 	bl	8000bb8 <__aeabi_d2f>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4a1d      	ldr	r2, [pc, #116]	; (8001b40 <BME280_Measure+0x104>)
 8001acc:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001ace:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <BME280_Measure+0x10c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ad6:	d104      	bne.n	8001ae2 <BME280_Measure+0xa6>
 8001ad8:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <BME280_Measure+0x110>)
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001ae0:	e023      	b.n	8001b2a <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <BME280_Measure+0x10c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff3c 	bl	8001964 <bme280_compensate_H_int32>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fd10 	bl	8000514 <__aeabi_ui2d>
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <BME280_Measure+0x114>)
 8001afa:	f7fe feaf 	bl	800085c <__aeabi_ddiv>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7ff f857 	bl	8000bb8 <__aeabi_d2f>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <BME280_Measure+0x110>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	e00b      	b.n	8001b2a <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <BME280_Measure+0x110>)
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <BME280_Measure+0x110>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <BME280_Measure+0x104>)
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <BME280_Measure+0x104>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a03      	ldr	r2, [pc, #12]	; (8001b34 <BME280_Measure+0xf8>)
 8001b28:	6013      	str	r3, [r2, #0]
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000022c 	.word	0x2000022c
 8001b34:	20000384 	.word	0x20000384
 8001b38:	40590000 	.word	0x40590000
 8001b3c:	20000230 	.word	0x20000230
 8001b40:	20000388 	.word	0x20000388
 8001b44:	40700000 	.word	0x40700000
 8001b48:	20000234 	.word	0x20000234
 8001b4c:	2000038c 	.word	0x2000038c
 8001b50:	40900000 	.word	0x40900000

08001b54 <__io_putchar>:
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1000);
 8001b5c:	1d39      	adds	r1, r7, #4
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	2201      	movs	r2, #1
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <__io_putchar+0x20>)
 8001b66:	f004 fa4b 	bl	8006000 <HAL_UART_Transmit>
	return ch;
 8001b6a:	687b      	ldr	r3, [r7, #4]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	200002fc 	.word	0x200002fc

08001b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b7e:	f000 fcef 	bl	8002560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b82:	f000 f90d 	bl	8001da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b86:	f000 fa4f 	bl	8002028 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b8a:	f000 fa1d 	bl	8001fc8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001b8e:	f000 f96b 	bl	8001e68 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001b92:	f000 f9d9 	bl	8001f48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001b96:	2304      	movs	r3, #4
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	2105      	movs	r1, #5
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	f7ff fae5 	bl	8001174 <BME280_Config>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  cont++;
 8001baa:	4b6d      	ldr	r3, [pc, #436]	; (8001d60 <main+0x1e8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	4a6b      	ldr	r2, [pc, #428]	; (8001d60 <main+0x1e8>)
 8001bb2:	6013      	str	r3, [r2, #0]

	  HAL_ADC_Start(&hadc1);
 8001bb4:	486b      	ldr	r0, [pc, #428]	; (8001d64 <main+0x1ec>)
 8001bb6:	f000 ff57 	bl	8002a68 <HAL_ADC_Start>

	  lectura_sensorUV=HAL_ADC_GetValue(&hadc1);
 8001bba:	486a      	ldr	r0, [pc, #424]	; (8001d64 <main+0x1ec>)
 8001bbc:	f001 f86a 	bl	8002c94 <HAL_ADC_GetValue>
 8001bc0:	ee07 0a90 	vmov	s15, r0
 8001bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc8:	4b67      	ldr	r3, [pc, #412]	; (8001d68 <main+0x1f0>)
 8001bca:	edc3 7a00 	vstr	s15, [r3]
	  lectura_sensorUV=lectura_sensorUV*0.000625;
 8001bce:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <main+0x1f0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fcc0 	bl	8000558 <__aeabi_f2d>
 8001bd8:	a359      	add	r3, pc, #356	; (adr r3, 8001d40 <main+0x1c8>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7fe fd13 	bl	8000608 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f7fe ffe5 	bl	8000bb8 <__aeabi_d2f>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4a5d      	ldr	r2, [pc, #372]	; (8001d68 <main+0x1f0>)
 8001bf2:	6013      	str	r3, [r2, #0]
	  if (lectura_sensorUV <= 1)lectura_sensorUV=1;
 8001bf4:	4b5c      	ldr	r3, [pc, #368]	; (8001d68 <main+0x1f0>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c06:	d803      	bhi.n	8001c10 <main+0x98>
 8001c08:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <main+0x1f0>)
 8001c0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c0e:	601a      	str	r2, [r3, #0]

	  UV=((lectura_sensorUV -1)/0.1133);
 8001c10:	4b55      	ldr	r3, [pc, #340]	; (8001d68 <main+0x1f0>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c1e:	ee17 0a90 	vmov	r0, s15
 8001c22:	f7fe fc99 	bl	8000558 <__aeabi_f2d>
 8001c26:	a348      	add	r3, pc, #288	; (adr r3, 8001d48 <main+0x1d0>)
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	f7fe fe16 	bl	800085c <__aeabi_ddiv>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7fe ffbe 	bl	8000bb8 <__aeabi_d2f>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4a4b      	ldr	r2, [pc, #300]	; (8001d6c <main+0x1f4>)
 8001c40:	6013      	str	r3, [r2, #0]

	  BME280_Measure();
 8001c42:	f7ff fefb 	bl	8001a3c <BME280_Measure>

	  // Calcular Altitud:
	  altitud = 44330 *(1.0 - pow(Pressure / 101200, 0.1903));
 8001c46:	4b4a      	ldr	r3, [pc, #296]	; (8001d70 <main+0x1f8>)
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001d74 <main+0x1fc>
 8001c50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c54:	ee16 0a90 	vmov	r0, s13
 8001c58:	f7fe fc7e 	bl	8000558 <__aeabi_f2d>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8001d50 <main+0x1d8>
 8001c64:	ec43 2b10 	vmov	d0, r2, r3
 8001c68:	f004 fde4 	bl	8006834 <pow>
 8001c6c:	ec53 2b10 	vmov	r2, r3, d0
 8001c70:	f04f 0000 	mov.w	r0, #0
 8001c74:	4940      	ldr	r1, [pc, #256]	; (8001d78 <main+0x200>)
 8001c76:	f7fe fb0f 	bl	8000298 <__aeabi_dsub>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	a335      	add	r3, pc, #212	; (adr r3, 8001d58 <main+0x1e0>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe fcbe 	bl	8000608 <__aeabi_dmul>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f7fe ff90 	bl	8000bb8 <__aeabi_d2f>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4a38      	ldr	r2, [pc, #224]	; (8001d7c <main+0x204>)
 8001c9c:	6013      	str	r3, [r2, #0]

	  // Visualizacion de Variables:

	  printf("\n\nNueva Lectura\n");
 8001c9e:	4838      	ldr	r0, [pc, #224]	; (8001d80 <main+0x208>)
 8001ca0:	f006 fa06 	bl	80080b0 <puts>

	  printf("i=%d %s %.2f\n",cont,cadena_temp,Temperature);
 8001ca4:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <main+0x1e8>)
 8001ca6:	681c      	ldr	r4, [r3, #0]
 8001ca8:	4b36      	ldr	r3, [pc, #216]	; (8001d84 <main+0x20c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc53 	bl	8000558 <__aeabi_f2d>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	e9cd 2300 	strd	r2, r3, [sp]
 8001cba:	4a33      	ldr	r2, [pc, #204]	; (8001d88 <main+0x210>)
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	4833      	ldr	r0, [pc, #204]	; (8001d8c <main+0x214>)
 8001cc0:	f006 f970 	bl	8007fa4 <iprintf>
	  printf("i=%d %s %.2f\n",cont,cadena_presion,Pressure/100);
 8001cc4:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <main+0x1e8>)
 8001cc6:	681c      	ldr	r4, [r3, #0]
 8001cc8:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <main+0x1f8>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001d90 <main+0x218>
 8001cd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001cd6:	ee16 0a90 	vmov	r0, s13
 8001cda:	f7fe fc3d 	bl	8000558 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	e9cd 2300 	strd	r2, r3, [sp]
 8001ce6:	4a2b      	ldr	r2, [pc, #172]	; (8001d94 <main+0x21c>)
 8001ce8:	4621      	mov	r1, r4
 8001cea:	4828      	ldr	r0, [pc, #160]	; (8001d8c <main+0x214>)
 8001cec:	f006 f95a 	bl	8007fa4 <iprintf>
	  printf("i=%d %s %.2f\n",cont,cadena_UV,UV);
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <main+0x1e8>)
 8001cf2:	681c      	ldr	r4, [r3, #0]
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <main+0x1f4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc2d 	bl	8000558 <__aeabi_f2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	e9cd 2300 	strd	r2, r3, [sp]
 8001d06:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <main+0x220>)
 8001d08:	4621      	mov	r1, r4
 8001d0a:	4820      	ldr	r0, [pc, #128]	; (8001d8c <main+0x214>)
 8001d0c:	f006 f94a 	bl	8007fa4 <iprintf>
	  printf("i=%d %s %.2f\n",cont,cadena_altitud,altitud);
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <main+0x1e8>)
 8001d12:	681c      	ldr	r4, [r3, #0]
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <main+0x204>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fc1d 	bl	8000558 <__aeabi_f2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	e9cd 2300 	strd	r2, r3, [sp]
 8001d26:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <main+0x224>)
 8001d28:	4621      	mov	r1, r4
 8001d2a:	4818      	ldr	r0, [pc, #96]	; (8001d8c <main+0x214>)
 8001d2c:	f006 f93a 	bl	8007fa4 <iprintf>


	  HAL_Delay(700);
 8001d30:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001d34:	f000 fc7a 	bl	800262c <HAL_Delay>
	  cont++;
 8001d38:	e737      	b.n	8001baa <main+0x32>
 8001d3a:	bf00      	nop
 8001d3c:	f3af 8000 	nop.w
 8001d40:	47ae147b 	.word	0x47ae147b
 8001d44:	3f447ae1 	.word	0x3f447ae1
 8001d48:	92a30553 	.word	0x92a30553
 8001d4c:	3fbd013a 	.word	0x3fbd013a
 8001d50:	1a36e2eb 	.word	0x1a36e2eb
 8001d54:	3fc85bc0 	.word	0x3fc85bc0
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	40e5a540 	.word	0x40e5a540
 8001d60:	20000380 	.word	0x20000380
 8001d64:	20000260 	.word	0x20000260
 8001d68:	20000390 	.word	0x20000390
 8001d6c:	20000394 	.word	0x20000394
 8001d70:	20000388 	.word	0x20000388
 8001d74:	47c5a800 	.word	0x47c5a800
 8001d78:	3ff00000 	.word	0x3ff00000
 8001d7c:	20000398 	.word	0x20000398
 8001d80:	0800a230 	.word	0x0800a230
 8001d84:	20000384 	.word	0x20000384
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	0800a240 	.word	0x0800a240
 8001d90:	42c80000 	.word	0x42c80000
 8001d94:	2000000c 	.word	0x2000000c
 8001d98:	20000018 	.word	0x20000018
 8001d9c:	20000024 	.word	0x20000024

08001da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b0a6      	sub	sp, #152	; 0x98
 8001da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001daa:	2228      	movs	r2, #40	; 0x28
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f005 fc86 	bl	80076c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	2258      	movs	r2, #88	; 0x58
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f005 fc78 	bl	80076c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dd8:	2310      	movs	r3, #16
 8001dda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dde:	2302      	movs	r3, #2
 8001de0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001de8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001dec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001df0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dfa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 fc08 	bl	8004614 <HAL_RCC_OscConfig>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001e0a:	f000 f973 	bl	80020f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e0e:	230f      	movs	r3, #15
 8001e10:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e12:	2302      	movs	r3, #2
 8001e14:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e1e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e28:	2102      	movs	r1, #2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 fc46 	bl	80056bc <HAL_RCC_ClockConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001e36:	f000 f95d 	bl	80020f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001e3a:	23a2      	movs	r3, #162	; 0xa2
 8001e3c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 fe6a 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001e5a:	f000 f94b 	bl	80020f4 <Error_Handler>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	3798      	adds	r7, #152	; 0x98
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
 8001e88:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e8a:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001e8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e92:	4b2c      	ldr	r3, [pc, #176]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e98:	4b2a      	ldr	r3, [pc, #168]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e9e:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eb8:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ec4:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ee4:	4817      	ldr	r0, [pc, #92]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001ee6:	f000 fbc5 	bl	8002674 <HAL_ADC_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001ef0:	f000 f900 	bl	80020f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4619      	mov	r1, r3
 8001efe:	4811      	ldr	r0, [pc, #68]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001f00:	f001 f9c2 	bl	8003288 <HAL_ADCEx_MultiModeConfigChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001f0a:	f000 f8f3 	bl	80020f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4806      	ldr	r0, [pc, #24]	; (8001f44 <MX_ADC1_Init+0xdc>)
 8001f2c:	f000 fec0 	bl	8002cb0 <HAL_ADC_ConfigChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001f36:	f000 f8dd 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	3728      	adds	r7, #40	; 0x28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000260 	.word	0x20000260

08001f48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f4e:	4a1c      	ldr	r2, [pc, #112]	; (8001fc0 <MX_I2C1_Init+0x78>)
 8001f50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f54:	4a1b      	ldr	r2, [pc, #108]	; (8001fc4 <MX_I2C1_Init+0x7c>)
 8001f56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f82:	480e      	ldr	r0, [pc, #56]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f84:	f001 fdc4 	bl	8003b10 <HAL_I2C_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f8e:	f000 f8b1 	bl	80020f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f92:	2100      	movs	r1, #0
 8001f94:	4809      	ldr	r0, [pc, #36]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f96:	f002 faa5 	bl	80044e4 <HAL_I2CEx_ConfigAnalogFilter>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fa0:	f000 f8a8 	bl	80020f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001fa8:	f002 fae7 	bl	800457a <HAL_I2CEx_ConfigDigitalFilter>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fb2:	f000 f89f 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200002b0 	.word	0x200002b0
 8001fc0:	40005400 	.word	0x40005400
 8001fc4:	2000090e 	.word	0x2000090e

08001fc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <MX_USART2_UART_Init+0x58>)
 8001fce:	4a15      	ldr	r2, [pc, #84]	; (8002024 <MX_USART2_UART_Init+0x5c>)
 8001fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <MX_USART2_UART_Init+0x58>)
 8001fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <MX_USART2_UART_Init+0x58>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <MX_USART2_UART_Init+0x58>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <MX_USART2_UART_Init+0x58>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <MX_USART2_UART_Init+0x58>)
 8001fee:	220c      	movs	r2, #12
 8001ff0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <MX_USART2_UART_Init+0x58>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <MX_USART2_UART_Init+0x58>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <MX_USART2_UART_Init+0x58>)
 8002000:	2200      	movs	r2, #0
 8002002:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <MX_USART2_UART_Init+0x58>)
 8002006:	2200      	movs	r2, #0
 8002008:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800200a:	4805      	ldr	r0, [pc, #20]	; (8002020 <MX_USART2_UART_Init+0x58>)
 800200c:	f003 ffaa 	bl	8005f64 <HAL_UART_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002016:	f000 f86d 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200002fc 	.word	0x200002fc
 8002024:	40004400 	.word	0x40004400

08002028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800203e:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <MX_GPIO_Init+0xc4>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	4a2a      	ldr	r2, [pc, #168]	; (80020ec <MX_GPIO_Init+0xc4>)
 8002044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002048:	6153      	str	r3, [r2, #20]
 800204a:	4b28      	ldr	r3, [pc, #160]	; (80020ec <MX_GPIO_Init+0xc4>)
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002056:	4b25      	ldr	r3, [pc, #148]	; (80020ec <MX_GPIO_Init+0xc4>)
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	4a24      	ldr	r2, [pc, #144]	; (80020ec <MX_GPIO_Init+0xc4>)
 800205c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002060:	6153      	str	r3, [r2, #20]
 8002062:	4b22      	ldr	r3, [pc, #136]	; (80020ec <MX_GPIO_Init+0xc4>)
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <MX_GPIO_Init+0xc4>)
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	4a1e      	ldr	r2, [pc, #120]	; (80020ec <MX_GPIO_Init+0xc4>)
 8002074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002078:	6153      	str	r3, [r2, #20]
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <MX_GPIO_Init+0xc4>)
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <MX_GPIO_Init+0xc4>)
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	4a18      	ldr	r2, [pc, #96]	; (80020ec <MX_GPIO_Init+0xc4>)
 800208c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002090:	6153      	str	r3, [r2, #20]
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <MX_GPIO_Init+0xc4>)
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800209e:	2200      	movs	r2, #0
 80020a0:	2120      	movs	r1, #32
 80020a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a6:	f001 fd1b 	bl	8003ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	480b      	ldr	r0, [pc, #44]	; (80020f0 <MX_GPIO_Init+0xc8>)
 80020c2:	f001 fb83 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80020c6:	2320      	movs	r3, #32
 80020c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ca:	2301      	movs	r3, #1
 80020cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4619      	mov	r1, r3
 80020dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e0:	f001 fb74 	bl	80037cc <HAL_GPIO_Init>

}
 80020e4:	bf00      	nop
 80020e6:	3728      	adds	r7, #40	; 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000
 80020f0:	48000800 	.word	0x48000800

080020f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f8:	b672      	cpsid	i
}
 80020fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020fc:	e7fe      	b.n	80020fc <Error_Handler+0x8>
	...

08002100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_MspInit+0x44>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <HAL_MspInit+0x44>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6193      	str	r3, [r2, #24]
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_MspInit+0x44>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_MspInit+0x44>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	4a08      	ldr	r2, [pc, #32]	; (8002144 <HAL_MspInit+0x44>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002128:	61d3      	str	r3, [r2, #28]
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_MspInit+0x44>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002136:	2007      	movs	r0, #7
 8002138:	f001 fb14 	bl	8003764 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000

08002148 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002168:	d124      	bne.n	80021b4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_ADC_MspInit+0x74>)
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	4a13      	ldr	r2, [pc, #76]	; (80021bc <HAL_ADC_MspInit+0x74>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002174:	6153      	str	r3, [r2, #20]
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_ADC_MspInit+0x74>)
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_ADC_MspInit+0x74>)
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <HAL_ADC_MspInit+0x74>)
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	6153      	str	r3, [r2, #20]
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_ADC_MspInit+0x74>)
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800219a:	2301      	movs	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800219e:	2303      	movs	r3, #3
 80021a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b0:	f001 fb0c 	bl	80037cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021b4:	bf00      	nop
 80021b6:	3728      	adds	r7, #40	; 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000

080021c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a26      	ldr	r2, [pc, #152]	; (8002278 <HAL_I2C_MspInit+0xb8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d145      	bne.n	800226e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <HAL_I2C_MspInit+0xbc>)
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	4a25      	ldr	r2, [pc, #148]	; (800227c <HAL_I2C_MspInit+0xbc>)
 80021e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ec:	6153      	str	r3, [r2, #20]
 80021ee:	4b23      	ldr	r3, [pc, #140]	; (800227c <HAL_I2C_MspInit+0xbc>)
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_I2C_MspInit+0xbc>)
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	4a1f      	ldr	r2, [pc, #124]	; (800227c <HAL_I2C_MspInit+0xbc>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	6153      	str	r3, [r2, #20]
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_I2C_MspInit+0xbc>)
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002218:	2312      	movs	r3, #18
 800221a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002220:	2303      	movs	r3, #3
 8002222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002224:	2304      	movs	r3, #4
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4619      	mov	r1, r3
 800222e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002232:	f001 facb 	bl	80037cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800223a:	2312      	movs	r3, #18
 800223c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002246:	2304      	movs	r3, #4
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	480b      	ldr	r0, [pc, #44]	; (8002280 <HAL_I2C_MspInit+0xc0>)
 8002252:	f001 fabb 	bl	80037cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_I2C_MspInit+0xbc>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4a08      	ldr	r2, [pc, #32]	; (800227c <HAL_I2C_MspInit+0xbc>)
 800225c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002260:	61d3      	str	r3, [r2, #28]
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_I2C_MspInit+0xbc>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800226e:	bf00      	nop
 8002270:	3728      	adds	r7, #40	; 0x28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40005400 	.word	0x40005400
 800227c:	40021000 	.word	0x40021000
 8002280:	48000400 	.word	0x48000400

08002284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a17      	ldr	r2, [pc, #92]	; (8002300 <HAL_UART_MspInit+0x7c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d128      	bne.n	80022f8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a6:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_UART_MspInit+0x80>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	4a16      	ldr	r2, [pc, #88]	; (8002304 <HAL_UART_MspInit+0x80>)
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b0:	61d3      	str	r3, [r2, #28]
 80022b2:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_UART_MspInit+0x80>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_UART_MspInit+0x80>)
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	4a10      	ldr	r2, [pc, #64]	; (8002304 <HAL_UART_MspInit+0x80>)
 80022c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c8:	6153      	str	r3, [r2, #20]
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_UART_MspInit+0x80>)
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022d6:	230c      	movs	r3, #12
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022e6:	2307      	movs	r3, #7
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f4:	f001 fa6a 	bl	80037cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022f8:	bf00      	nop
 80022fa:	3728      	adds	r7, #40	; 0x28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40004400 	.word	0x40004400
 8002304:	40021000 	.word	0x40021000

08002308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800230c:	e7fe      	b.n	800230c <NMI_Handler+0x4>

0800230e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002312:	e7fe      	b.n	8002312 <HardFault_Handler+0x4>

08002314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <MemManage_Handler+0x4>

0800231a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <BusFault_Handler+0x4>

08002320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <UsageFault_Handler+0x4>

08002326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002354:	f000 f94a 	bl	80025ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}

0800235c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
	return 1;
 8002360:	2301      	movs	r3, #1
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <_kill>:

int _kill(int pid, int sig)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002376:	f005 f979 	bl	800766c <__errno>
 800237a:	4603      	mov	r3, r0
 800237c:	2216      	movs	r2, #22
 800237e:	601a      	str	r2, [r3, #0]
	return -1;
 8002380:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <_exit>:

void _exit (int status)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002394:	f04f 31ff 	mov.w	r1, #4294967295
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ffe7 	bl	800236c <_kill>
	while (1) {}		/* Make sure we hang here */
 800239e:	e7fe      	b.n	800239e <_exit+0x12>

080023a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	e00a      	b.n	80023c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023b2:	f3af 8000 	nop.w
 80023b6:	4601      	mov	r1, r0
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	60ba      	str	r2, [r7, #8]
 80023be:	b2ca      	uxtb	r2, r1
 80023c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	3301      	adds	r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	dbf0      	blt.n	80023b2 <_read+0x12>
	}

return len;
 80023d0:	687b      	ldr	r3, [r7, #4]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	e009      	b.n	8002400 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	60ba      	str	r2, [r7, #8]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fbad 	bl	8001b54 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	3301      	adds	r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	429a      	cmp	r2, r3
 8002406:	dbf1      	blt.n	80023ec <_write+0x12>
	}
	return len;
 8002408:	687b      	ldr	r3, [r7, #4]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <_close>:

int _close(int file)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
	return -1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800243a:	605a      	str	r2, [r3, #4]
	return 0;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <_isatty>:

int _isatty(int file)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
	return 1;
 8002452:	2301      	movs	r3, #1
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
	return 0;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002484:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <_sbrk+0x5c>)
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <_sbrk+0x60>)
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002490:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <_sbrk+0x64>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <_sbrk+0x64>)
 800249a:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <_sbrk+0x68>)
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d207      	bcs.n	80024bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024ac:	f005 f8de 	bl	800766c <__errno>
 80024b0:	4603      	mov	r3, r0
 80024b2:	220c      	movs	r2, #12
 80024b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	e009      	b.n	80024d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024c2:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <_sbrk+0x64>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <_sbrk+0x64>)
 80024cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20010000 	.word	0x20010000
 80024dc:	00000400 	.word	0x00000400
 80024e0:	2000039c 	.word	0x2000039c
 80024e4:	200003b8 	.word	0x200003b8

080024e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <SystemInit+0x20>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	4a05      	ldr	r2, [pc, #20]	; (8002508 <SystemInit+0x20>)
 80024f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800250c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002544 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002510:	480d      	ldr	r0, [pc, #52]	; (8002548 <LoopForever+0x6>)
  ldr r1, =_edata
 8002512:	490e      	ldr	r1, [pc, #56]	; (800254c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002514:	4a0e      	ldr	r2, [pc, #56]	; (8002550 <LoopForever+0xe>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002518:	e002      	b.n	8002520 <LoopCopyDataInit>

0800251a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800251a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800251c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251e:	3304      	adds	r3, #4

08002520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002524:	d3f9      	bcc.n	800251a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002526:	4a0b      	ldr	r2, [pc, #44]	; (8002554 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002528:	4c0b      	ldr	r4, [pc, #44]	; (8002558 <LoopForever+0x16>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800252c:	e001      	b.n	8002532 <LoopFillZerobss>

0800252e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002530:	3204      	adds	r2, #4

08002532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002534:	d3fb      	bcc.n	800252e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002536:	f7ff ffd7 	bl	80024e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800253a:	f005 f89d 	bl	8007678 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800253e:	f7ff fb1b 	bl	8001b78 <main>

08002542 <LoopForever>:

LoopForever:
    b LoopForever
 8002542:	e7fe      	b.n	8002542 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002544:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800254c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002550:	0800a6a4 	.word	0x0800a6a4
  ldr r2, =_sbss
 8002554:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002558:	200003b4 	.word	0x200003b4

0800255c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800255c:	e7fe      	b.n	800255c <ADC1_2_IRQHandler>
	...

08002560 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_Init+0x28>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a07      	ldr	r2, [pc, #28]	; (8002588 <HAL_Init+0x28>)
 800256a:	f043 0310 	orr.w	r3, r3, #16
 800256e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002570:	2003      	movs	r0, #3
 8002572:	f001 f8f7 	bl	8003764 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002576:	2000      	movs	r0, #0
 8002578:	f000 f808 	bl	800258c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800257c:	f7ff fdc0 	bl	8002100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40022000 	.word	0x40022000

0800258c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_InitTick+0x54>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_InitTick+0x58>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 f901 	bl	80037b2 <HAL_SYSTICK_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00e      	b.n	80025d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b0f      	cmp	r3, #15
 80025be:	d80a      	bhi.n	80025d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c0:	2200      	movs	r2, #0
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	f04f 30ff 	mov.w	r0, #4294967295
 80025c8:	f001 f8d7 	bl	800377a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <HAL_InitTick+0x5c>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000030 	.word	0x20000030
 80025e4:	20000038 	.word	0x20000038
 80025e8:	20000034 	.word	0x20000034

080025ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_IncTick+0x20>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_IncTick+0x24>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <HAL_IncTick+0x24>)
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000038 	.word	0x20000038
 8002610:	200003a0 	.word	0x200003a0

08002614 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return uwTick;  
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_GetTick+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	200003a0 	.word	0x200003a0

0800262c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7ff ffee 	bl	8002614 <HAL_GetTick>
 8002638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d005      	beq.n	8002652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_Delay+0x44>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002652:	bf00      	nop
 8002654:	f7ff ffde 	bl	8002614 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	429a      	cmp	r2, r3
 8002662:	d8f7      	bhi.n	8002654 <HAL_Delay+0x28>
  {
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000038 	.word	0x20000038

08002674 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b09a      	sub	sp, #104	; 0x68
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e1e3      	b.n	8002a5c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d176      	bne.n	8002794 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d152      	bne.n	8002754 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff fd3d 	bl	8002148 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d13b      	bne.n	8002754 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 ff29 	bl	8003534 <ADC_Disable>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d12f      	bne.n	8002754 <HAL_ADC_Init+0xe0>
 80026f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d12b      	bne.n	8002754 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002704:	f023 0302 	bic.w	r3, r3, #2
 8002708:	f043 0202 	orr.w	r2, r3, #2
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800271e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800272e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002730:	4b92      	ldr	r3, [pc, #584]	; (800297c <HAL_ADC_Init+0x308>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a92      	ldr	r2, [pc, #584]	; (8002980 <HAL_ADC_Init+0x30c>)
 8002736:	fba2 2303 	umull	r2, r3, r2, r3
 800273a:	0c9a      	lsrs	r2, r3, #18
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002746:	e002      	b.n	800274e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	3b01      	subs	r3, #1
 800274c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f9      	bne.n	8002748 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800276c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002770:	d110      	bne.n	8002794 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f023 0312 	bic.w	r3, r3, #18
 800277a:	f043 0210 	orr.w	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	f040 8150 	bne.w	8002a42 <HAL_ADC_Init+0x3ce>
 80027a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 814b 	bne.w	8002a42 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 8143 	bne.w	8002a42 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027c4:	f043 0202 	orr.w	r2, r3, #2
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027d4:	d004      	beq.n	80027e0 <HAL_ADC_Init+0x16c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a6a      	ldr	r2, [pc, #424]	; (8002984 <HAL_ADC_Init+0x310>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_Init+0x170>
 80027e0:	4b69      	ldr	r3, [pc, #420]	; (8002988 <HAL_ADC_Init+0x314>)
 80027e2:	e000      	b.n	80027e6 <HAL_ADC_Init+0x172>
 80027e4:	4b69      	ldr	r3, [pc, #420]	; (800298c <HAL_ADC_Init+0x318>)
 80027e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027f0:	d102      	bne.n	80027f8 <HAL_ADC_Init+0x184>
 80027f2:	4b64      	ldr	r3, [pc, #400]	; (8002984 <HAL_ADC_Init+0x310>)
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	e01a      	b.n	800282e <HAL_ADC_Init+0x1ba>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a61      	ldr	r2, [pc, #388]	; (8002984 <HAL_ADC_Init+0x310>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d103      	bne.n	800280a <HAL_ADC_Init+0x196>
 8002802:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	e011      	b.n	800282e <HAL_ADC_Init+0x1ba>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a60      	ldr	r2, [pc, #384]	; (8002990 <HAL_ADC_Init+0x31c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d102      	bne.n	800281a <HAL_ADC_Init+0x1a6>
 8002814:	4b5f      	ldr	r3, [pc, #380]	; (8002994 <HAL_ADC_Init+0x320>)
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	e009      	b.n	800282e <HAL_ADC_Init+0x1ba>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a5d      	ldr	r2, [pc, #372]	; (8002994 <HAL_ADC_Init+0x320>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d102      	bne.n	800282a <HAL_ADC_Init+0x1b6>
 8002824:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <HAL_ADC_Init+0x31c>)
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	e001      	b.n	800282e <HAL_ADC_Init+0x1ba>
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b01      	cmp	r3, #1
 800283a:	d108      	bne.n	800284e <HAL_ADC_Init+0x1da>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_ADC_Init+0x1da>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_ADC_Init+0x1dc>
 800284e:	2300      	movs	r3, #0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d11c      	bne.n	800288e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002854:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002856:	2b00      	cmp	r3, #0
 8002858:	d010      	beq.n	800287c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_ADC_Init+0x202>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_ADC_Init+0x202>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_ADC_Init+0x204>
 8002876:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002878:	2b00      	cmp	r3, #0
 800287a:	d108      	bne.n	800288e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800287c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	431a      	orrs	r2, r3
 800288a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7e5b      	ldrb	r3, [r3, #25]
 8002892:	035b      	lsls	r3, r3, #13
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002898:	2a01      	cmp	r2, #1
 800289a:	d002      	beq.n	80028a2 <HAL_ADC_Init+0x22e>
 800289c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028a0:	e000      	b.n	80028a4 <HAL_ADC_Init+0x230>
 80028a2:	2200      	movs	r2, #0
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028b4:	4313      	orrs	r3, r2
 80028b6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d11b      	bne.n	80028fa <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7e5b      	ldrb	r3, [r3, #25]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	3b01      	subs	r3, #1
 80028d0:	045a      	lsls	r2, r3, #17
 80028d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028da:	663b      	str	r3, [r7, #96]	; 0x60
 80028dc:	e00d      	b.n	80028fa <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d054      	beq.n	80029ac <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a22      	ldr	r2, [pc, #136]	; (8002990 <HAL_ADC_Init+0x31c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d004      	beq.n	8002916 <HAL_ADC_Init+0x2a2>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a20      	ldr	r2, [pc, #128]	; (8002994 <HAL_ADC_Init+0x320>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d140      	bne.n	8002998 <HAL_ADC_Init+0x324>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800291e:	d02a      	beq.n	8002976 <HAL_ADC_Init+0x302>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002928:	d022      	beq.n	8002970 <HAL_ADC_Init+0x2fc>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002932:	d01a      	beq.n	800296a <HAL_ADC_Init+0x2f6>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800293c:	d012      	beq.n	8002964 <HAL_ADC_Init+0x2f0>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002946:	d00a      	beq.n	800295e <HAL_ADC_Init+0x2ea>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002950:	d002      	beq.n	8002958 <HAL_ADC_Init+0x2e4>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	e023      	b.n	80029a0 <HAL_ADC_Init+0x32c>
 8002958:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800295c:	e020      	b.n	80029a0 <HAL_ADC_Init+0x32c>
 800295e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002962:	e01d      	b.n	80029a0 <HAL_ADC_Init+0x32c>
 8002964:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002968:	e01a      	b.n	80029a0 <HAL_ADC_Init+0x32c>
 800296a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800296e:	e017      	b.n	80029a0 <HAL_ADC_Init+0x32c>
 8002970:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002974:	e014      	b.n	80029a0 <HAL_ADC_Init+0x32c>
 8002976:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800297a:	e011      	b.n	80029a0 <HAL_ADC_Init+0x32c>
 800297c:	20000030 	.word	0x20000030
 8002980:	431bde83 	.word	0x431bde83
 8002984:	50000100 	.word	0x50000100
 8002988:	50000300 	.word	0x50000300
 800298c:	50000700 	.word	0x50000700
 8002990:	50000400 	.word	0x50000400
 8002994:	50000500 	.word	0x50000500
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029a4:	4313      	orrs	r3, r2
 80029a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029a8:	4313      	orrs	r3, r2
 80029aa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d114      	bne.n	80029e4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029c8:	f023 0302 	bic.w	r3, r3, #2
 80029cc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	7e1b      	ldrb	r3, [r3, #24]
 80029d2:	039a      	lsls	r2, r3, #14
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4313      	orrs	r3, r2
 80029de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029e0:	4313      	orrs	r3, r2
 80029e2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <HAL_ADC_Init+0x3f0>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80029f4:	430b      	orrs	r3, r1
 80029f6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d10c      	bne.n	8002a1a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f023 010f 	bic.w	r1, r3, #15
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	1e5a      	subs	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
 8002a18:	e007      	b.n	8002a2a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 020f 	bic.w	r2, r2, #15
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f023 0303 	bic.w	r3, r3, #3
 8002a38:	f043 0201 	orr.w	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a40:	e00a      	b.n	8002a58 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f023 0312 	bic.w	r3, r3, #18
 8002a4a:	f043 0210 	orr.w	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002a52:	2301      	movs	r3, #1
 8002a54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002a58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3768      	adds	r7, #104	; 0x68
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	fff0c007 	.word	0xfff0c007

08002a68 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 80f9 	bne.w	8002c76 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_Start+0x2a>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e0f4      	b.n	8002c7c <HAL_ADC_Start+0x214>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fce6 	bl	800346c <ADC_Enable>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 80e0 	bne.w	8002c6c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac8:	d004      	beq.n	8002ad4 <HAL_ADC_Start+0x6c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a6d      	ldr	r2, [pc, #436]	; (8002c84 <HAL_ADC_Start+0x21c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d106      	bne.n	8002ae2 <HAL_ADC_Start+0x7a>
 8002ad4:	4b6c      	ldr	r3, [pc, #432]	; (8002c88 <HAL_ADC_Start+0x220>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d010      	beq.n	8002b02 <HAL_ADC_Start+0x9a>
 8002ae0:	e005      	b.n	8002aee <HAL_ADC_Start+0x86>
 8002ae2:	4b6a      	ldr	r3, [pc, #424]	; (8002c8c <HAL_ADC_Start+0x224>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <HAL_ADC_Start+0x9a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002af6:	d004      	beq.n	8002b02 <HAL_ADC_Start+0x9a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a64      	ldr	r2, [pc, #400]	; (8002c90 <HAL_ADC_Start+0x228>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d115      	bne.n	8002b2e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d036      	beq.n	8002b8a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b2c:	e02d      	b.n	8002b8a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b42:	d004      	beq.n	8002b4e <HAL_ADC_Start+0xe6>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a4e      	ldr	r2, [pc, #312]	; (8002c84 <HAL_ADC_Start+0x21c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d10a      	bne.n	8002b64 <HAL_ADC_Start+0xfc>
 8002b4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e008      	b.n	8002b76 <HAL_ADC_Start+0x10e>
 8002b64:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_ADC_Start+0x228>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf14      	ite	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	2300      	moveq	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b96:	d106      	bne.n	8002ba6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	f023 0206 	bic.w	r2, r3, #6
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	645a      	str	r2, [r3, #68]	; 0x44
 8002ba4:	e002      	b.n	8002bac <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	221c      	movs	r2, #28
 8002bba:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc4:	d004      	beq.n	8002bd0 <HAL_ADC_Start+0x168>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a2e      	ldr	r2, [pc, #184]	; (8002c84 <HAL_ADC_Start+0x21c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d106      	bne.n	8002bde <HAL_ADC_Start+0x176>
 8002bd0:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <HAL_ADC_Start+0x220>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d03e      	beq.n	8002c5a <HAL_ADC_Start+0x1f2>
 8002bdc:	e005      	b.n	8002bea <HAL_ADC_Start+0x182>
 8002bde:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_ADC_Start+0x224>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d037      	beq.n	8002c5a <HAL_ADC_Start+0x1f2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf2:	d004      	beq.n	8002bfe <HAL_ADC_Start+0x196>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <HAL_ADC_Start+0x21c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d106      	bne.n	8002c0c <HAL_ADC_Start+0x1a4>
 8002bfe:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_ADC_Start+0x220>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	2b05      	cmp	r3, #5
 8002c08:	d027      	beq.n	8002c5a <HAL_ADC_Start+0x1f2>
 8002c0a:	e005      	b.n	8002c18 <HAL_ADC_Start+0x1b0>
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <HAL_ADC_Start+0x224>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d020      	beq.n	8002c5a <HAL_ADC_Start+0x1f2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c20:	d004      	beq.n	8002c2c <HAL_ADC_Start+0x1c4>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <HAL_ADC_Start+0x21c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d106      	bne.n	8002c3a <HAL_ADC_Start+0x1d2>
 8002c2c:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <HAL_ADC_Start+0x220>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2b09      	cmp	r3, #9
 8002c36:	d010      	beq.n	8002c5a <HAL_ADC_Start+0x1f2>
 8002c38:	e005      	b.n	8002c46 <HAL_ADC_Start+0x1de>
 8002c3a:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <HAL_ADC_Start+0x224>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	2b09      	cmp	r3, #9
 8002c44:	d009      	beq.n	8002c5a <HAL_ADC_Start+0x1f2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c4e:	d004      	beq.n	8002c5a <HAL_ADC_Start+0x1f2>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0e      	ldr	r2, [pc, #56]	; (8002c90 <HAL_ADC_Start+0x228>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d10f      	bne.n	8002c7a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0204 	orr.w	r2, r2, #4
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	e006      	b.n	8002c7a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c74:	e001      	b.n	8002c7a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c76:	2302      	movs	r3, #2
 8002c78:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	50000100 	.word	0x50000100
 8002c88:	50000300 	.word	0x50000300
 8002c8c:	50000700 	.word	0x50000700
 8002c90:	50000400 	.word	0x50000400

08002c94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b09b      	sub	sp, #108	; 0x6c
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x22>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e2ca      	b.n	8003268 <HAL_ADC_ConfigChannel+0x5b8>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f040 82ae 	bne.w	8003246 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d81c      	bhi.n	8002d2c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	461a      	mov	r2, r3
 8002d06:	231f      	movs	r3, #31
 8002d08:	4093      	lsls	r3, r2
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	4019      	ands	r1, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4413      	add	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
 8002d2a:	e063      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b09      	cmp	r3, #9
 8002d32:	d81e      	bhi.n	8002d72 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	3b1e      	subs	r3, #30
 8002d48:	221f      	movs	r2, #31
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	4019      	ands	r1, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	3b1e      	subs	r3, #30
 8002d64:	fa00 f203 	lsl.w	r2, r0, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	635a      	str	r2, [r3, #52]	; 0x34
 8002d70:	e040      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b0e      	cmp	r3, #14
 8002d78:	d81e      	bhi.n	8002db8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	3b3c      	subs	r3, #60	; 0x3c
 8002d8e:	221f      	movs	r2, #31
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	4019      	ands	r1, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	3b3c      	subs	r3, #60	; 0x3c
 8002daa:	fa00 f203 	lsl.w	r2, r0, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	639a      	str	r2, [r3, #56]	; 0x38
 8002db6:	e01d      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	3b5a      	subs	r3, #90	; 0x5a
 8002dcc:	221f      	movs	r2, #31
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	4019      	ands	r1, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4413      	add	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	3b5a      	subs	r3, #90	; 0x5a
 8002de8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 80e5 	bne.w	8002fce <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b09      	cmp	r3, #9
 8002e0a:	d91c      	bls.n	8002e46 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6999      	ldr	r1, [r3, #24]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4613      	mov	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3b1e      	subs	r3, #30
 8002e1e:	2207      	movs	r2, #7
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	4019      	ands	r1, r3
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6898      	ldr	r0, [r3, #8]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4613      	mov	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	3b1e      	subs	r3, #30
 8002e38:	fa00 f203 	lsl.w	r2, r0, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	619a      	str	r2, [r3, #24]
 8002e44:	e019      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6959      	ldr	r1, [r3, #20]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4413      	add	r3, r2
 8002e56:	2207      	movs	r2, #7
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	4019      	ands	r1, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6898      	ldr	r0, [r3, #8]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	08db      	lsrs	r3, r3, #3
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d84f      	bhi.n	8002f3c <HAL_ADC_ConfigChannel+0x28c>
 8002e9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <HAL_ADC_ConfigChannel+0x1f4>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002eb5 	.word	0x08002eb5
 8002ea8:	08002ed7 	.word	0x08002ed7
 8002eac:	08002ef9 	.word	0x08002ef9
 8002eb0:	08002f1b 	.word	0x08002f1b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eba:	4b9a      	ldr	r3, [pc, #616]	; (8003124 <HAL_ADC_ConfigChannel+0x474>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	0691      	lsls	r1, r2, #26
 8002ec4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ed2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ed4:	e07e      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002edc:	4b91      	ldr	r3, [pc, #580]	; (8003124 <HAL_ADC_ConfigChannel+0x474>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	0691      	lsls	r1, r2, #26
 8002ee6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ef4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ef6:	e06d      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002efe:	4b89      	ldr	r3, [pc, #548]	; (8003124 <HAL_ADC_ConfigChannel+0x474>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	0691      	lsls	r1, r2, #26
 8002f08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f16:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f18:	e05c      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f20:	4b80      	ldr	r3, [pc, #512]	; (8003124 <HAL_ADC_ConfigChannel+0x474>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	0691      	lsls	r1, r2, #26
 8002f2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f38:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f3a:	e04b      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	069b      	lsls	r3, r3, #26
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d107      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f5e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	069b      	lsls	r3, r3, #26
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d107      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f82:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	069b      	lsls	r3, r3, #26
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d107      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fa6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	069b      	lsls	r3, r3, #26
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d10a      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fca:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002fcc:	e001      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002fce:	bf00      	nop
 8002fd0:	e000      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002fd2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x344>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x344>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x346>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 8130 	bne.w	800325c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d00f      	beq.n	8003024 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2201      	movs	r2, #1
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	400a      	ands	r2, r1
 800301e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003022:	e049      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2201      	movs	r2, #1
 8003032:	409a      	lsls	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b09      	cmp	r3, #9
 8003044:	d91c      	bls.n	8003080 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6999      	ldr	r1, [r3, #24]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	3b1b      	subs	r3, #27
 8003058:	2207      	movs	r2, #7
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	4019      	ands	r1, r3
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6898      	ldr	r0, [r3, #8]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	3b1b      	subs	r3, #27
 8003072:	fa00 f203 	lsl.w	r2, r0, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	619a      	str	r2, [r3, #24]
 800307e:	e01b      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6959      	ldr	r1, [r3, #20]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	4613      	mov	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	2207      	movs	r2, #7
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	4019      	ands	r1, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6898      	ldr	r0, [r3, #8]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	fa00 f203 	lsl.w	r2, r0, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c0:	d004      	beq.n	80030cc <HAL_ADC_ConfigChannel+0x41c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a18      	ldr	r2, [pc, #96]	; (8003128 <HAL_ADC_ConfigChannel+0x478>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x420>
 80030cc:	4b17      	ldr	r3, [pc, #92]	; (800312c <HAL_ADC_ConfigChannel+0x47c>)
 80030ce:	e000      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x422>
 80030d0:	4b17      	ldr	r3, [pc, #92]	; (8003130 <HAL_ADC_ConfigChannel+0x480>)
 80030d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b10      	cmp	r3, #16
 80030da:	d105      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d015      	beq.n	8003114 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030ec:	2b11      	cmp	r3, #17
 80030ee:	d105      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80030f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003100:	2b12      	cmp	r3, #18
 8003102:	f040 80ab 	bne.w	800325c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 80a4 	bne.w	800325c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800311c:	d10a      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x484>
 800311e:	4b02      	ldr	r3, [pc, #8]	; (8003128 <HAL_ADC_ConfigChannel+0x478>)
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	e022      	b.n	800316a <HAL_ADC_ConfigChannel+0x4ba>
 8003124:	83fff000 	.word	0x83fff000
 8003128:	50000100 	.word	0x50000100
 800312c:	50000300 	.word	0x50000300
 8003130:	50000700 	.word	0x50000700
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a4e      	ldr	r2, [pc, #312]	; (8003274 <HAL_ADC_ConfigChannel+0x5c4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d103      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x496>
 800313e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	e011      	b.n	800316a <HAL_ADC_ConfigChannel+0x4ba>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a4b      	ldr	r2, [pc, #300]	; (8003278 <HAL_ADC_ConfigChannel+0x5c8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d102      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x4a6>
 8003150:	4b4a      	ldr	r3, [pc, #296]	; (800327c <HAL_ADC_ConfigChannel+0x5cc>)
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	e009      	b.n	800316a <HAL_ADC_ConfigChannel+0x4ba>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a48      	ldr	r2, [pc, #288]	; (800327c <HAL_ADC_ConfigChannel+0x5cc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d102      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x4b6>
 8003160:	4b45      	ldr	r3, [pc, #276]	; (8003278 <HAL_ADC_ConfigChannel+0x5c8>)
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	e001      	b.n	800316a <HAL_ADC_ConfigChannel+0x4ba>
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d108      	bne.n	800318a <HAL_ADC_ConfigChannel+0x4da>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_ADC_ConfigChannel+0x4da>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_ADC_ConfigChannel+0x4dc>
 800318a:	2300      	movs	r3, #0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d150      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003190:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003192:	2b00      	cmp	r3, #0
 8003194:	d010      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x502>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x502>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x504>
 80031b2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d13c      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d11d      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x54c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031c8:	d118      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80031ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031d6:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <HAL_ADC_ConfigChannel+0x5d0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a2a      	ldr	r2, [pc, #168]	; (8003284 <HAL_ADC_ConfigChannel+0x5d4>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	0c9a      	lsrs	r2, r3, #18
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031ec:	e002      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f9      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031fa:	e02e      	b.n	800325a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b11      	cmp	r3, #17
 8003202:	d10b      	bne.n	800321c <HAL_ADC_ConfigChannel+0x56c>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800320c:	d106      	bne.n	800321c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800320e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003218:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800321a:	e01e      	b.n	800325a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b12      	cmp	r3, #18
 8003222:	d11a      	bne.n	800325a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800322c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800322e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003230:	e013      	b.n	800325a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f043 0220 	orr.w	r2, r3, #32
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003244:	e00a      	b.n	800325c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f043 0220 	orr.w	r2, r3, #32
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003258:	e000      	b.n	800325c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800325a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003264:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003268:	4618      	mov	r0, r3
 800326a:	376c      	adds	r7, #108	; 0x6c
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	50000100 	.word	0x50000100
 8003278:	50000400 	.word	0x50000400
 800327c:	50000500 	.word	0x50000500
 8003280:	20000030 	.word	0x20000030
 8003284:	431bde83 	.word	0x431bde83

08003288 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003288:	b480      	push	{r7}
 800328a:	b099      	sub	sp, #100	; 0x64
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a0:	d102      	bne.n	80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80032a2:	4b6d      	ldr	r3, [pc, #436]	; (8003458 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	e01a      	b.n	80032de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a6a      	ldr	r2, [pc, #424]	; (8003458 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d103      	bne.n	80032ba <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80032b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	e011      	b.n	80032de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a67      	ldr	r2, [pc, #412]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d102      	bne.n	80032ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80032c4:	4b66      	ldr	r3, [pc, #408]	; (8003460 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	e009      	b.n	80032de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a64      	ldr	r2, [pc, #400]	; (8003460 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d102      	bne.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032d4:	4b61      	ldr	r3, [pc, #388]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	e001      	b.n	80032de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0b0      	b.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e0a9      	b.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	f040 808d 	bne.w	8003428 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	f040 8086 	bne.w	8003428 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003324:	d004      	beq.n	8003330 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a4b      	ldr	r2, [pc, #300]	; (8003458 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003330:	4b4c      	ldr	r3, [pc, #304]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003332:	e000      	b.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003334:	4b4c      	ldr	r3, [pc, #304]	; (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003336:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d040      	beq.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003352:	035b      	lsls	r3, r3, #13
 8003354:	430b      	orrs	r3, r1
 8003356:	431a      	orrs	r2, r3
 8003358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800335a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d108      	bne.n	800337c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800337c:	2300      	movs	r3, #0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d15c      	bne.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d107      	bne.n	800339e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800339e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d14b      	bne.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80033a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033ac:	f023 030f 	bic.w	r3, r3, #15
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	6811      	ldr	r1, [r2, #0]
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	6892      	ldr	r2, [r2, #8]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	431a      	orrs	r2, r3
 80033bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033be:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80033c0:	e03c      	b.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033cc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d108      	bne.n	80033ee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80033ee:	2300      	movs	r3, #0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d123      	bne.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d107      	bne.n	8003410 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003410:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003412:	2b00      	cmp	r3, #0
 8003414:	d112      	bne.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800341e:	f023 030f 	bic.w	r3, r3, #15
 8003422:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003424:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003426:	e009      	b.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f043 0220 	orr.w	r2, r3, #32
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800343a:	e000      	b.n	800343e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800343c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003446:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800344a:	4618      	mov	r0, r3
 800344c:	3764      	adds	r7, #100	; 0x64
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	50000100 	.word	0x50000100
 800345c:	50000400 	.word	0x50000400
 8003460:	50000500 	.word	0x50000500
 8003464:	50000300 	.word	0x50000300
 8003468:	50000700 	.word	0x50000700

0800346c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d108      	bne.n	8003498 <ADC_Enable+0x2c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <ADC_Enable+0x2c>
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <ADC_Enable+0x2e>
 8003498:	2300      	movs	r3, #0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d143      	bne.n	8003526 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	4b22      	ldr	r3, [pc, #136]	; (8003530 <ADC_Enable+0xc4>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00d      	beq.n	80034c8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f043 0210 	orr.w	r2, r3, #16
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	f043 0201 	orr.w	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e02f      	b.n	8003528 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80034d8:	f7ff f89c 	bl	8002614 <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034de:	e01b      	b.n	8003518 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034e0:	f7ff f898 	bl	8002614 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d914      	bls.n	8003518 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d00d      	beq.n	8003518 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f043 0210 	orr.w	r2, r3, #16
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	f043 0201 	orr.w	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e007      	b.n	8003528 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	d1dc      	bne.n	80034e0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	8000003f 	.word	0x8000003f

08003534 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d108      	bne.n	8003560 <ADC_Disable+0x2c>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <ADC_Disable+0x2c>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <ADC_Disable+0x2e>
 8003560:	2300      	movs	r3, #0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d047      	beq.n	80035f6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 030d 	and.w	r3, r3, #13
 8003570:	2b01      	cmp	r3, #1
 8003572:	d10f      	bne.n	8003594 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0202 	orr.w	r2, r2, #2
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2203      	movs	r2, #3
 800358a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800358c:	f7ff f842 	bl	8002614 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003592:	e029      	b.n	80035e8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f043 0210 	orr.w	r2, r3, #16
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a4:	f043 0201 	orr.w	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e023      	b.n	80035f8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035b0:	f7ff f830 	bl	8002614 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d914      	bls.n	80035e8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d10d      	bne.n	80035e8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f043 0210 	orr.w	r2, r3, #16
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e007      	b.n	80035f8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d0dc      	beq.n	80035b0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800361c:	4013      	ands	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003632:	4a04      	ldr	r2, [pc, #16]	; (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	60d3      	str	r3, [r2, #12]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <__NVIC_GetPriorityGrouping+0x18>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	f003 0307 	and.w	r3, r3, #7
}
 8003656:	4618      	mov	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	6039      	str	r1, [r7, #0]
 800366e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003674:	2b00      	cmp	r3, #0
 8003676:	db0a      	blt.n	800368e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	490c      	ldr	r1, [pc, #48]	; (80036b0 <__NVIC_SetPriority+0x4c>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	440b      	add	r3, r1
 8003688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800368c:	e00a      	b.n	80036a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4908      	ldr	r1, [pc, #32]	; (80036b4 <__NVIC_SetPriority+0x50>)
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	3b04      	subs	r3, #4
 800369c:	0112      	lsls	r2, r2, #4
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	440b      	add	r3, r1
 80036a2:	761a      	strb	r2, [r3, #24]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000e100 	.word	0xe000e100
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	; 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f1c3 0307 	rsb	r3, r3, #7
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	bf28      	it	cs
 80036d6:	2304      	movcs	r3, #4
 80036d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3304      	adds	r3, #4
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d902      	bls.n	80036e8 <NVIC_EncodePriority+0x30>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3b03      	subs	r3, #3
 80036e6:	e000      	b.n	80036ea <NVIC_EncodePriority+0x32>
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	401a      	ands	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003700:	f04f 31ff 	mov.w	r1, #4294967295
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	43d9      	mvns	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	4313      	orrs	r3, r2
         );
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003730:	d301      	bcc.n	8003736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003732:	2301      	movs	r3, #1
 8003734:	e00f      	b.n	8003756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <SysTick_Config+0x40>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800373e:	210f      	movs	r1, #15
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	f7ff ff8e 	bl	8003664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <SysTick_Config+0x40>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374e:	4b04      	ldr	r3, [pc, #16]	; (8003760 <SysTick_Config+0x40>)
 8003750:	2207      	movs	r2, #7
 8003752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	e000e010 	.word	0xe000e010

08003764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ff47 	bl	8003600 <__NVIC_SetPriorityGrouping>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b086      	sub	sp, #24
 800377e:	af00      	add	r7, sp, #0
 8003780:	4603      	mov	r3, r0
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800378c:	f7ff ff5c 	bl	8003648 <__NVIC_GetPriorityGrouping>
 8003790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f7ff ff8e 	bl	80036b8 <NVIC_EncodePriority>
 800379c:	4602      	mov	r2, r0
 800379e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ff5d 	bl	8003664 <__NVIC_SetPriority>
}
 80037aa:	bf00      	nop
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff ffb0 	bl	8003720 <SysTick_Config>
 80037c0:	4603      	mov	r3, r0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037da:	e160      	b.n	8003a9e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	2101      	movs	r1, #1
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	fa01 f303 	lsl.w	r3, r1, r3
 80037e8:	4013      	ands	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8152 	beq.w	8003a98 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d005      	beq.n	800380c <HAL_GPIO_Init+0x40>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d130      	bne.n	800386e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	2203      	movs	r2, #3
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003842:	2201      	movs	r2, #1
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4013      	ands	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	f003 0201 	and.w	r2, r3, #1
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b03      	cmp	r3, #3
 8003878:	d017      	beq.n	80038aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	2203      	movs	r2, #3
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d123      	bne.n	80038fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	08da      	lsrs	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3208      	adds	r2, #8
 80038be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	220f      	movs	r2, #15
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	08da      	lsrs	r2, r3, #3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3208      	adds	r2, #8
 80038f8:	6939      	ldr	r1, [r7, #16]
 80038fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	2203      	movs	r2, #3
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4013      	ands	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 0203 	and.w	r2, r3, #3
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80ac 	beq.w	8003a98 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003940:	4b5e      	ldr	r3, [pc, #376]	; (8003abc <HAL_GPIO_Init+0x2f0>)
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	4a5d      	ldr	r2, [pc, #372]	; (8003abc <HAL_GPIO_Init+0x2f0>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6193      	str	r3, [r2, #24]
 800394c:	4b5b      	ldr	r3, [pc, #364]	; (8003abc <HAL_GPIO_Init+0x2f0>)
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003958:	4a59      	ldr	r2, [pc, #356]	; (8003ac0 <HAL_GPIO_Init+0x2f4>)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	089b      	lsrs	r3, r3, #2
 800395e:	3302      	adds	r3, #2
 8003960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003964:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	220f      	movs	r2, #15
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4013      	ands	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003982:	d025      	beq.n	80039d0 <HAL_GPIO_Init+0x204>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a4f      	ldr	r2, [pc, #316]	; (8003ac4 <HAL_GPIO_Init+0x2f8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d01f      	beq.n	80039cc <HAL_GPIO_Init+0x200>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a4e      	ldr	r2, [pc, #312]	; (8003ac8 <HAL_GPIO_Init+0x2fc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d019      	beq.n	80039c8 <HAL_GPIO_Init+0x1fc>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a4d      	ldr	r2, [pc, #308]	; (8003acc <HAL_GPIO_Init+0x300>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d013      	beq.n	80039c4 <HAL_GPIO_Init+0x1f8>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a4c      	ldr	r2, [pc, #304]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00d      	beq.n	80039c0 <HAL_GPIO_Init+0x1f4>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a4b      	ldr	r2, [pc, #300]	; (8003ad4 <HAL_GPIO_Init+0x308>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d007      	beq.n	80039bc <HAL_GPIO_Init+0x1f0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a4a      	ldr	r2, [pc, #296]	; (8003ad8 <HAL_GPIO_Init+0x30c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d101      	bne.n	80039b8 <HAL_GPIO_Init+0x1ec>
 80039b4:	2306      	movs	r3, #6
 80039b6:	e00c      	b.n	80039d2 <HAL_GPIO_Init+0x206>
 80039b8:	2307      	movs	r3, #7
 80039ba:	e00a      	b.n	80039d2 <HAL_GPIO_Init+0x206>
 80039bc:	2305      	movs	r3, #5
 80039be:	e008      	b.n	80039d2 <HAL_GPIO_Init+0x206>
 80039c0:	2304      	movs	r3, #4
 80039c2:	e006      	b.n	80039d2 <HAL_GPIO_Init+0x206>
 80039c4:	2303      	movs	r3, #3
 80039c6:	e004      	b.n	80039d2 <HAL_GPIO_Init+0x206>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e002      	b.n	80039d2 <HAL_GPIO_Init+0x206>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <HAL_GPIO_Init+0x206>
 80039d0:	2300      	movs	r3, #0
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	f002 0203 	and.w	r2, r2, #3
 80039d8:	0092      	lsls	r2, r2, #2
 80039da:	4093      	lsls	r3, r2
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039e2:	4937      	ldr	r1, [pc, #220]	; (8003ac0 <HAL_GPIO_Init+0x2f4>)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	3302      	adds	r3, #2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039f0:	4b3a      	ldr	r3, [pc, #232]	; (8003adc <HAL_GPIO_Init+0x310>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a14:	4a31      	ldr	r2, [pc, #196]	; (8003adc <HAL_GPIO_Init+0x310>)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a1a:	4b30      	ldr	r3, [pc, #192]	; (8003adc <HAL_GPIO_Init+0x310>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a3e:	4a27      	ldr	r2, [pc, #156]	; (8003adc <HAL_GPIO_Init+0x310>)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a44:	4b25      	ldr	r3, [pc, #148]	; (8003adc <HAL_GPIO_Init+0x310>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4013      	ands	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a68:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <HAL_GPIO_Init+0x310>)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a6e:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <HAL_GPIO_Init+0x310>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a92:	4a12      	ldr	r2, [pc, #72]	; (8003adc <HAL_GPIO_Init+0x310>)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f47f ae97 	bne.w	80037dc <HAL_GPIO_Init+0x10>
  }
}
 8003aae:	bf00      	nop
 8003ab0:	bf00      	nop
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	48000400 	.word	0x48000400
 8003ac8:	48000800 	.word	0x48000800
 8003acc:	48000c00 	.word	0x48000c00
 8003ad0:	48001000 	.word	0x48001000
 8003ad4:	48001400 	.word	0x48001400
 8003ad8:	48001800 	.word	0x48001800
 8003adc:	40010400 	.word	0x40010400

08003ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	807b      	strh	r3, [r7, #2]
 8003aec:	4613      	mov	r3, r2
 8003aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003af0:	787b      	ldrb	r3, [r7, #1]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003af6:	887a      	ldrh	r2, [r7, #2]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003afc:	e002      	b.n	8003b04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003afe:	887a      	ldrh	r2, [r7, #2]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e081      	b.n	8003c26 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fe fb42 	bl	80021c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2224      	movs	r2, #36	; 0x24
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d107      	bne.n	8003b8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	e006      	b.n	8003b98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d104      	bne.n	8003baa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ba8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691a      	ldr	r2, [r3, #16]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69d9      	ldr	r1, [r3, #28]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	4608      	mov	r0, r1
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4603      	mov	r3, r0
 8003c40:	817b      	strh	r3, [r7, #10]
 8003c42:	460b      	mov	r3, r1
 8003c44:	813b      	strh	r3, [r7, #8]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	f040 80f9 	bne.w	8003e4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <HAL_I2C_Mem_Write+0x34>
 8003c5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e0ed      	b.n	8003e4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_I2C_Mem_Write+0x4e>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e0e6      	b.n	8003e4c <HAL_I2C_Mem_Write+0x21c>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c86:	f7fe fcc5 	bl	8002614 <HAL_GetTick>
 8003c8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	2319      	movs	r3, #25
 8003c92:	2201      	movs	r2, #1
 8003c94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fac3 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0d1      	b.n	8003e4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2221      	movs	r2, #33	; 0x21
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2240      	movs	r2, #64	; 0x40
 8003cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a3a      	ldr	r2, [r7, #32]
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cd0:	88f8      	ldrh	r0, [r7, #6]
 8003cd2:	893a      	ldrh	r2, [r7, #8]
 8003cd4:	8979      	ldrh	r1, [r7, #10]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	4603      	mov	r3, r0
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f9d3 	bl	800408c <I2C_RequestMemoryWrite>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0a9      	b.n	8003e4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2bff      	cmp	r3, #255	; 0xff
 8003d00:	d90e      	bls.n	8003d20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	22ff      	movs	r2, #255	; 0xff
 8003d06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	8979      	ldrh	r1, [r7, #10]
 8003d10:	2300      	movs	r3, #0
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 fbb5 	bl	8004488 <I2C_TransferConfig>
 8003d1e:	e00f      	b.n	8003d40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	8979      	ldrh	r1, [r7, #10]
 8003d32:	2300      	movs	r3, #0
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 fba4 	bl	8004488 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 faad 	bl	80042a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e07b      	b.n	8003e4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d034      	beq.n	8003df8 <HAL_I2C_Mem_Write+0x1c8>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d130      	bne.n	8003df8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2180      	movs	r1, #128	; 0x80
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fa3f 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e04d      	b.n	8003e4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2bff      	cmp	r3, #255	; 0xff
 8003db8:	d90e      	bls.n	8003dd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	22ff      	movs	r2, #255	; 0xff
 8003dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	8979      	ldrh	r1, [r7, #10]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 fb59 	bl	8004488 <I2C_TransferConfig>
 8003dd6:	e00f      	b.n	8003df8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	8979      	ldrh	r1, [r7, #10]
 8003dea:	2300      	movs	r3, #0
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 fb48 	bl	8004488 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d19e      	bne.n	8003d40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fa8c 	bl	8004324 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e01a      	b.n	8003e4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6859      	ldr	r1, [r3, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <HAL_I2C_Mem_Write+0x224>)
 8003e2a:	400b      	ands	r3, r1
 8003e2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e000      	b.n	8003e4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e4a:	2302      	movs	r3, #2
  }
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	fe00e800 	.word	0xfe00e800

08003e58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	4608      	mov	r0, r1
 8003e62:	4611      	mov	r1, r2
 8003e64:	461a      	mov	r2, r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	817b      	strh	r3, [r7, #10]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	813b      	strh	r3, [r7, #8]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b20      	cmp	r3, #32
 8003e7c:	f040 80fd 	bne.w	800407a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_I2C_Mem_Read+0x34>
 8003e86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0f1      	b.n	800407c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_I2C_Mem_Read+0x4e>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e0ea      	b.n	800407c <HAL_I2C_Mem_Read+0x224>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003eae:	f7fe fbb1 	bl	8002614 <HAL_GetTick>
 8003eb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	2319      	movs	r3, #25
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f9af 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0d5      	b.n	800407c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2222      	movs	r2, #34	; 0x22
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2240      	movs	r2, #64	; 0x40
 8003edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a3a      	ldr	r2, [r7, #32]
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ef8:	88f8      	ldrh	r0, [r7, #6]
 8003efa:	893a      	ldrh	r2, [r7, #8]
 8003efc:	8979      	ldrh	r1, [r7, #10]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	4603      	mov	r3, r0
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f913 	bl	8004134 <I2C_RequestMemoryRead>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0ad      	b.n	800407c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2bff      	cmp	r3, #255	; 0xff
 8003f28:	d90e      	bls.n	8003f48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	22ff      	movs	r2, #255	; 0xff
 8003f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	8979      	ldrh	r1, [r7, #10]
 8003f38:	4b52      	ldr	r3, [pc, #328]	; (8004084 <HAL_I2C_Mem_Read+0x22c>)
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 faa1 	bl	8004488 <I2C_TransferConfig>
 8003f46:	e00f      	b.n	8003f68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	8979      	ldrh	r1, [r7, #10]
 8003f5a:	4b4a      	ldr	r3, [pc, #296]	; (8004084 <HAL_I2C_Mem_Read+0x22c>)
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fa90 	bl	8004488 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2104      	movs	r1, #4
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f956 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e07c      	b.n	800407c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d034      	beq.n	8004028 <HAL_I2C_Mem_Read+0x1d0>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d130      	bne.n	8004028 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2180      	movs	r1, #128	; 0x80
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f927 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e04d      	b.n	800407c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2bff      	cmp	r3, #255	; 0xff
 8003fe8:	d90e      	bls.n	8004008 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	22ff      	movs	r2, #255	; 0xff
 8003fee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	8979      	ldrh	r1, [r7, #10]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 fa41 	bl	8004488 <I2C_TransferConfig>
 8004006:	e00f      	b.n	8004028 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004016:	b2da      	uxtb	r2, r3
 8004018:	8979      	ldrh	r1, [r7, #10]
 800401a:	2300      	movs	r3, #0
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 fa30 	bl	8004488 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d19a      	bne.n	8003f68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f974 	bl	8004324 <I2C_WaitOnSTOPFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e01a      	b.n	800407c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2220      	movs	r2, #32
 800404c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6859      	ldr	r1, [r3, #4]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <HAL_I2C_Mem_Read+0x230>)
 800405a:	400b      	ands	r3, r1
 800405c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	e000      	b.n	800407c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800407a:	2302      	movs	r3, #2
  }
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	80002400 	.word	0x80002400
 8004088:	fe00e800 	.word	0xfe00e800

0800408c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af02      	add	r7, sp, #8
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	4608      	mov	r0, r1
 8004096:	4611      	mov	r1, r2
 8004098:	461a      	mov	r2, r3
 800409a:	4603      	mov	r3, r0
 800409c:	817b      	strh	r3, [r7, #10]
 800409e:	460b      	mov	r3, r1
 80040a0:	813b      	strh	r3, [r7, #8]
 80040a2:	4613      	mov	r3, r2
 80040a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	8979      	ldrh	r1, [r7, #10]
 80040ac:	4b20      	ldr	r3, [pc, #128]	; (8004130 <I2C_RequestMemoryWrite+0xa4>)
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f9e7 	bl	8004488 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	69b9      	ldr	r1, [r7, #24]
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f8f0 	bl	80042a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e02c      	b.n	8004128 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040ce:	88fb      	ldrh	r3, [r7, #6]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d105      	bne.n	80040e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040d4:	893b      	ldrh	r3, [r7, #8]
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	629a      	str	r2, [r3, #40]	; 0x28
 80040de:	e015      	b.n	800410c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040e0:	893b      	ldrh	r3, [r7, #8]
 80040e2:	0a1b      	lsrs	r3, r3, #8
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	69b9      	ldr	r1, [r7, #24]
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f8d6 	bl	80042a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e012      	b.n	8004128 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004102:	893b      	ldrh	r3, [r7, #8]
 8004104:	b2da      	uxtb	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	2200      	movs	r2, #0
 8004114:	2180      	movs	r1, #128	; 0x80
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f884 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	80002000 	.word	0x80002000

08004134 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	4608      	mov	r0, r1
 800413e:	4611      	mov	r1, r2
 8004140:	461a      	mov	r2, r3
 8004142:	4603      	mov	r3, r0
 8004144:	817b      	strh	r3, [r7, #10]
 8004146:	460b      	mov	r3, r1
 8004148:	813b      	strh	r3, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	b2da      	uxtb	r2, r3
 8004152:	8979      	ldrh	r1, [r7, #10]
 8004154:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <I2C_RequestMemoryRead+0xa4>)
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	2300      	movs	r3, #0
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 f994 	bl	8004488 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	69b9      	ldr	r1, [r7, #24]
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f89d 	bl	80042a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e02c      	b.n	80041ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d105      	bne.n	8004186 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800417a:	893b      	ldrh	r3, [r7, #8]
 800417c:	b2da      	uxtb	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	629a      	str	r2, [r3, #40]	; 0x28
 8004184:	e015      	b.n	80041b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004186:	893b      	ldrh	r3, [r7, #8]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	b29b      	uxth	r3, r3
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	69b9      	ldr	r1, [r7, #24]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f883 	bl	80042a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e012      	b.n	80041ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041a8:	893b      	ldrh	r3, [r7, #8]
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2200      	movs	r2, #0
 80041ba:	2140      	movs	r1, #64	; 0x40
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f831 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	80002000 	.word	0x80002000

080041dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d103      	bne.n	80041fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2200      	movs	r2, #0
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d007      	beq.n	8004218 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	619a      	str	r2, [r3, #24]
  }
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004234:	e022      	b.n	800427c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d01e      	beq.n	800427c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423e:	f7fe f9e9 	bl	8002614 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d302      	bcc.n	8004254 <I2C_WaitOnFlagUntilTimeout+0x30>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d113      	bne.n	800427c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004258:	f043 0220 	orr.w	r2, r3, #32
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e00f      	b.n	800429c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4013      	ands	r3, r2
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	429a      	cmp	r2, r3
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	461a      	mov	r2, r3
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	429a      	cmp	r2, r3
 8004298:	d0cd      	beq.n	8004236 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042b0:	e02c      	b.n	800430c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68b9      	ldr	r1, [r7, #8]
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f870 	bl	800439c <I2C_IsAcknowledgeFailed>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e02a      	b.n	800431c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042cc:	d01e      	beq.n	800430c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ce:	f7fe f9a1 	bl	8002614 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d302      	bcc.n	80042e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d113      	bne.n	800430c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e8:	f043 0220 	orr.w	r2, r3, #32
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e007      	b.n	800431c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b02      	cmp	r3, #2
 8004318:	d1cb      	bne.n	80042b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004330:	e028      	b.n	8004384 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f830 	bl	800439c <I2C_IsAcknowledgeFailed>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e026      	b.n	8004394 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004346:	f7fe f965 	bl	8002614 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	429a      	cmp	r2, r3
 8004354:	d302      	bcc.n	800435c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d113      	bne.n	8004384 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e007      	b.n	8004394 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b20      	cmp	r3, #32
 8004390:	d1cf      	bne.n	8004332 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b10      	cmp	r3, #16
 80043b4:	d161      	bne.n	800447a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043c4:	d02b      	beq.n	800441e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043d4:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043d6:	e022      	b.n	800441e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d01e      	beq.n	800441e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e0:	f7fe f918 	bl	8002614 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <I2C_IsAcknowledgeFailed+0x5a>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d113      	bne.n	800441e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	f043 0220 	orr.w	r2, r3, #32
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e02e      	b.n	800447c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b20      	cmp	r3, #32
 800442a:	d1d5      	bne.n	80043d8 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2210      	movs	r2, #16
 8004432:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2220      	movs	r2, #32
 800443a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7ff fecd 	bl	80041dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6859      	ldr	r1, [r3, #4]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <I2C_IsAcknowledgeFailed+0xe8>)
 800444e:	400b      	ands	r3, r1
 8004450:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	f043 0204 	orr.w	r2, r3, #4
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	fe00e800 	.word	0xfe00e800

08004488 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	817b      	strh	r3, [r7, #10]
 8004496:	4613      	mov	r3, r2
 8004498:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	0d5b      	lsrs	r3, r3, #21
 80044a4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80044a8:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <I2C_TransferConfig+0x58>)
 80044aa:	430b      	orrs	r3, r1
 80044ac:	43db      	mvns	r3, r3
 80044ae:	ea02 0103 	and.w	r1, r2, r3
 80044b2:	897b      	ldrh	r3, [r7, #10]
 80044b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044b8:	7a7b      	ldrb	r3, [r7, #9]
 80044ba:	041b      	lsls	r3, r3, #16
 80044bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	03ff63ff 	.word	0x03ff63ff

080044e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d138      	bne.n	800456c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004504:	2302      	movs	r3, #2
 8004506:	e032      	b.n	800456e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2224      	movs	r2, #36	; 0x24
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004536:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6819      	ldr	r1, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	e000      	b.n	800456e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800456c:	2302      	movs	r3, #2
  }
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b20      	cmp	r3, #32
 800458e:	d139      	bne.n	8004604 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800459a:	2302      	movs	r3, #2
 800459c:	e033      	b.n	8004606 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2224      	movs	r2, #36	; 0x24
 80045aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e000      	b.n	8004606 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
  }
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800461a:	af00      	add	r7, sp, #0
 800461c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004620:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004624:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800462a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d102      	bne.n	800463a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	f001 b83a 	b.w	80056ae <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800463a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800463e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 816f 	beq.w	800492e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004650:	4bb5      	ldr	r3, [pc, #724]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 030c 	and.w	r3, r3, #12
 8004658:	2b04      	cmp	r3, #4
 800465a:	d00c      	beq.n	8004676 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800465c:	4bb2      	ldr	r3, [pc, #712]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 030c 	and.w	r3, r3, #12
 8004664:	2b08      	cmp	r3, #8
 8004666:	d15c      	bne.n	8004722 <HAL_RCC_OscConfig+0x10e>
 8004668:	4baf      	ldr	r3, [pc, #700]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004674:	d155      	bne.n	8004722 <HAL_RCC_OscConfig+0x10e>
 8004676:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800467a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004682:	fa93 f3a3 	rbit	r3, r3
 8004686:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800468a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468e:	fab3 f383 	clz	r3, r3
 8004692:	b2db      	uxtb	r3, r3
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d102      	bne.n	80046a8 <HAL_RCC_OscConfig+0x94>
 80046a2:	4ba1      	ldr	r3, [pc, #644]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	e015      	b.n	80046d4 <HAL_RCC_OscConfig+0xc0>
 80046a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80046b4:	fa93 f3a3 	rbit	r3, r3
 80046b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80046bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80046c4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80046c8:	fa93 f3a3 	rbit	r3, r3
 80046cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80046d0:	4b95      	ldr	r3, [pc, #596]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046d8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80046dc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80046e0:	fa92 f2a2 	rbit	r2, r2
 80046e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80046e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80046ec:	fab2 f282 	clz	r2, r2
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	f042 0220 	orr.w	r2, r2, #32
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	f002 021f 	and.w	r2, r2, #31
 80046fc:	2101      	movs	r1, #1
 80046fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 8111 	beq.w	800492c <HAL_RCC_OscConfig+0x318>
 800470a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800470e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	f040 8108 	bne.w	800492c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	f000 bfc6 	b.w	80056ae <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004726:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004732:	d106      	bne.n	8004742 <HAL_RCC_OscConfig+0x12e>
 8004734:	4b7c      	ldr	r3, [pc, #496]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a7b      	ldr	r2, [pc, #492]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 800473a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	e036      	b.n	80047b0 <HAL_RCC_OscConfig+0x19c>
 8004742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004746:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0x158>
 8004752:	4b75      	ldr	r3, [pc, #468]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a74      	ldr	r2, [pc, #464]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 8004758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b72      	ldr	r3, [pc, #456]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a71      	ldr	r2, [pc, #452]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 8004764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e021      	b.n	80047b0 <HAL_RCC_OscConfig+0x19c>
 800476c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004770:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800477c:	d10c      	bne.n	8004798 <HAL_RCC_OscConfig+0x184>
 800477e:	4b6a      	ldr	r3, [pc, #424]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a69      	ldr	r2, [pc, #420]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 8004784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	4b67      	ldr	r3, [pc, #412]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a66      	ldr	r2, [pc, #408]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 8004790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	e00b      	b.n	80047b0 <HAL_RCC_OscConfig+0x19c>
 8004798:	4b63      	ldr	r3, [pc, #396]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a62      	ldr	r2, [pc, #392]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 800479e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	4b60      	ldr	r3, [pc, #384]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a5f      	ldr	r2, [pc, #380]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 80047aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ae:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d059      	beq.n	8004874 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c0:	f7fd ff28 	bl	8002614 <HAL_GetTick>
 80047c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c8:	e00a      	b.n	80047e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ca:	f7fd ff23 	bl	8002614 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b64      	cmp	r3, #100	; 0x64
 80047d8:	d902      	bls.n	80047e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	f000 bf67 	b.w	80056ae <HAL_RCC_OscConfig+0x109a>
 80047e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047e4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80047ec:	fa93 f3a3 	rbit	r3, r3
 80047f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80047f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f043 0301 	orr.w	r3, r3, #1
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	d102      	bne.n	8004812 <HAL_RCC_OscConfig+0x1fe>
 800480c:	4b46      	ldr	r3, [pc, #280]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	e015      	b.n	800483e <HAL_RCC_OscConfig+0x22a>
 8004812:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004816:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800481e:	fa93 f3a3 	rbit	r3, r3
 8004822:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004826:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800482a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800482e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004832:	fa93 f3a3 	rbit	r3, r3
 8004836:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800483a:	4b3b      	ldr	r3, [pc, #236]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004842:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004846:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800484a:	fa92 f2a2 	rbit	r2, r2
 800484e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004852:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004856:	fab2 f282 	clz	r2, r2
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	f042 0220 	orr.w	r2, r2, #32
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	f002 021f 	and.w	r2, r2, #31
 8004866:	2101      	movs	r1, #1
 8004868:	fa01 f202 	lsl.w	r2, r1, r2
 800486c:	4013      	ands	r3, r2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0ab      	beq.n	80047ca <HAL_RCC_OscConfig+0x1b6>
 8004872:	e05c      	b.n	800492e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004874:	f7fd fece 	bl	8002614 <HAL_GetTick>
 8004878:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487c:	e00a      	b.n	8004894 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800487e:	f7fd fec9 	bl	8002614 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b64      	cmp	r3, #100	; 0x64
 800488c:	d902      	bls.n	8004894 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	f000 bf0d 	b.w	80056ae <HAL_RCC_OscConfig+0x109a>
 8004894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004898:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80048a0:	fa93 f3a3 	rbit	r3, r3
 80048a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80048a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ac:	fab3 f383 	clz	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d102      	bne.n	80048c6 <HAL_RCC_OscConfig+0x2b2>
 80048c0:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	e015      	b.n	80048f2 <HAL_RCC_OscConfig+0x2de>
 80048c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80048d2:	fa93 f3a3 	rbit	r3, r3
 80048d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80048da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80048e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80048e6:	fa93 f3a3 	rbit	r3, r3
 80048ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80048ee:	4b0e      	ldr	r3, [pc, #56]	; (8004928 <HAL_RCC_OscConfig+0x314>)
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048f6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80048fa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80048fe:	fa92 f2a2 	rbit	r2, r2
 8004902:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004906:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800490a:	fab2 f282 	clz	r2, r2
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	f042 0220 	orr.w	r2, r2, #32
 8004914:	b2d2      	uxtb	r2, r2
 8004916:	f002 021f 	and.w	r2, r2, #31
 800491a:	2101      	movs	r1, #1
 800491c:	fa01 f202 	lsl.w	r2, r1, r2
 8004920:	4013      	ands	r3, r2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1ab      	bne.n	800487e <HAL_RCC_OscConfig+0x26a>
 8004926:	e002      	b.n	800492e <HAL_RCC_OscConfig+0x31a>
 8004928:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800492e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004932:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 817f 	beq.w	8004c42 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004944:	4ba7      	ldr	r3, [pc, #668]	; (8004be4 <HAL_RCC_OscConfig+0x5d0>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f003 030c 	and.w	r3, r3, #12
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00c      	beq.n	800496a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004950:	4ba4      	ldr	r3, [pc, #656]	; (8004be4 <HAL_RCC_OscConfig+0x5d0>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 030c 	and.w	r3, r3, #12
 8004958:	2b08      	cmp	r3, #8
 800495a:	d173      	bne.n	8004a44 <HAL_RCC_OscConfig+0x430>
 800495c:	4ba1      	ldr	r3, [pc, #644]	; (8004be4 <HAL_RCC_OscConfig+0x5d0>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004968:	d16c      	bne.n	8004a44 <HAL_RCC_OscConfig+0x430>
 800496a:	2302      	movs	r3, #2
 800496c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004974:	fa93 f3a3 	rbit	r3, r3
 8004978:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800497c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004980:	fab3 f383 	clz	r3, r3
 8004984:	b2db      	uxtb	r3, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	b2db      	uxtb	r3, r3
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	d102      	bne.n	800499a <HAL_RCC_OscConfig+0x386>
 8004994:	4b93      	ldr	r3, [pc, #588]	; (8004be4 <HAL_RCC_OscConfig+0x5d0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	e013      	b.n	80049c2 <HAL_RCC_OscConfig+0x3ae>
 800499a:	2302      	movs	r3, #2
 800499c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80049a4:	fa93 f3a3 	rbit	r3, r3
 80049a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80049ac:	2302      	movs	r3, #2
 80049ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80049b2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80049b6:	fa93 f3a3 	rbit	r3, r3
 80049ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80049be:	4b89      	ldr	r3, [pc, #548]	; (8004be4 <HAL_RCC_OscConfig+0x5d0>)
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	2202      	movs	r2, #2
 80049c4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80049c8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80049cc:	fa92 f2a2 	rbit	r2, r2
 80049d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80049d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80049d8:	fab2 f282 	clz	r2, r2
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	f042 0220 	orr.w	r2, r2, #32
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	f002 021f 	and.w	r2, r2, #31
 80049e8:	2101      	movs	r1, #1
 80049ea:	fa01 f202 	lsl.w	r2, r1, r2
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <HAL_RCC_OscConfig+0x3f6>
 80049f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d002      	beq.n	8004a0a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	f000 be52 	b.w	80056ae <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0a:	4b76      	ldr	r3, [pc, #472]	; (8004be4 <HAL_RCC_OscConfig+0x5d0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	21f8      	movs	r1, #248	; 0xf8
 8004a20:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a24:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004a28:	fa91 f1a1 	rbit	r1, r1
 8004a2c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004a30:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004a34:	fab1 f181 	clz	r1, r1
 8004a38:	b2c9      	uxtb	r1, r1
 8004a3a:	408b      	lsls	r3, r1
 8004a3c:	4969      	ldr	r1, [pc, #420]	; (8004be4 <HAL_RCC_OscConfig+0x5d0>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a42:	e0fe      	b.n	8004c42 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8088 	beq.w	8004b66 <HAL_RCC_OscConfig+0x552>
 8004a56:	2301      	movs	r3, #1
 8004a58:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004a68:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a6c:	fab3 f383 	clz	r3, r3
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	2301      	movs	r3, #1
 8004a80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a82:	f7fd fdc7 	bl	8002614 <HAL_GetTick>
 8004a86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a8c:	f7fd fdc2 	bl	8002614 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d902      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	f000 be06 	b.w	80056ae <HAL_RCC_OscConfig+0x109a>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004aac:	fa93 f3a3 	rbit	r3, r3
 8004ab0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004ab4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab8:	fab3 f383 	clz	r3, r3
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d102      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x4be>
 8004acc:	4b45      	ldr	r3, [pc, #276]	; (8004be4 <HAL_RCC_OscConfig+0x5d0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	e013      	b.n	8004afa <HAL_RCC_OscConfig+0x4e6>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004adc:	fa93 f3a3 	rbit	r3, r3
 8004ae0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004aea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004aee:	fa93 f3a3 	rbit	r3, r3
 8004af2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004af6:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <HAL_RCC_OscConfig+0x5d0>)
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	2202      	movs	r2, #2
 8004afc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004b00:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004b04:	fa92 f2a2 	rbit	r2, r2
 8004b08:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004b0c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004b10:	fab2 f282 	clz	r2, r2
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	f042 0220 	orr.w	r2, r2, #32
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	f002 021f 	and.w	r2, r2, #31
 8004b20:	2101      	movs	r1, #1
 8004b22:	fa01 f202 	lsl.w	r2, r1, r2
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0af      	beq.n	8004a8c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2c:	4b2d      	ldr	r3, [pc, #180]	; (8004be4 <HAL_RCC_OscConfig+0x5d0>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	21f8      	movs	r1, #248	; 0xf8
 8004b42:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b46:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004b4a:	fa91 f1a1 	rbit	r1, r1
 8004b4e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004b52:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004b56:	fab1 f181 	clz	r1, r1
 8004b5a:	b2c9      	uxtb	r1, r1
 8004b5c:	408b      	lsls	r3, r1
 8004b5e:	4921      	ldr	r1, [pc, #132]	; (8004be4 <HAL_RCC_OscConfig+0x5d0>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	600b      	str	r3, [r1, #0]
 8004b64:	e06d      	b.n	8004c42 <HAL_RCC_OscConfig+0x62e>
 8004b66:	2301      	movs	r3, #1
 8004b68:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004b70:	fa93 f3a3 	rbit	r3, r3
 8004b74:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004b78:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b7c:	fab3 f383 	clz	r3, r3
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2300      	movs	r3, #0
 8004b90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b92:	f7fd fd3f 	bl	8002614 <HAL_GetTick>
 8004b96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b9c:	f7fd fd3a 	bl	8002614 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d902      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	f000 bd7e 	b.w	80056ae <HAL_RCC_OscConfig+0x109a>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bbc:	fa93 f3a3 	rbit	r3, r3
 8004bc0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004bc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bc8:	fab3 f383 	clz	r3, r3
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d105      	bne.n	8004be8 <HAL_RCC_OscConfig+0x5d4>
 8004bdc:	4b01      	ldr	r3, [pc, #4]	; (8004be4 <HAL_RCC_OscConfig+0x5d0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	e016      	b.n	8004c10 <HAL_RCC_OscConfig+0x5fc>
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000
 8004be8:	2302      	movs	r3, #2
 8004bea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bf2:	fa93 f3a3 	rbit	r3, r3
 8004bf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c00:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004c04:	fa93 f3a3 	rbit	r3, r3
 8004c08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c0c:	4bbf      	ldr	r3, [pc, #764]	; (8004f0c <HAL_RCC_OscConfig+0x8f8>)
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	2202      	movs	r2, #2
 8004c12:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004c16:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004c1a:	fa92 f2a2 	rbit	r2, r2
 8004c1e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004c22:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004c26:	fab2 f282 	clz	r2, r2
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	f042 0220 	orr.w	r2, r2, #32
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	f002 021f 	and.w	r2, r2, #31
 8004c36:	2101      	movs	r1, #1
 8004c38:	fa01 f202 	lsl.w	r2, r1, r2
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1ac      	bne.n	8004b9c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 8113 	beq.w	8004e7e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d07c      	beq.n	8004d62 <HAL_RCC_OscConfig+0x74e>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c72:	fa93 f3a3 	rbit	r3, r3
 8004c76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004c7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c7e:	fab3 f383 	clz	r3, r3
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	4ba2      	ldr	r3, [pc, #648]	; (8004f10 <HAL_RCC_OscConfig+0x8fc>)
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	2301      	movs	r3, #1
 8004c90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c92:	f7fd fcbf 	bl	8002614 <HAL_GetTick>
 8004c96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9a:	e00a      	b.n	8004cb2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c9c:	f7fd fcba 	bl	8002614 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d902      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	f000 bcfe 	b.w	80056ae <HAL_RCC_OscConfig+0x109a>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cbc:	fa93 f2a3 	rbit	r2, r3
 8004cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cc4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	fa93 f2a3 	rbit	r2, r3
 8004ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cf2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	fa93 f2a3 	rbit	r2, r3
 8004d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d12:	4b7e      	ldr	r3, [pc, #504]	; (8004f0c <HAL_RCC_OscConfig+0x8f8>)
 8004d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d1e:	2102      	movs	r1, #2
 8004d20:	6019      	str	r1, [r3, #0]
 8004d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	fa93 f1a3 	rbit	r1, r3
 8004d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d38:	6019      	str	r1, [r3, #0]
  return result;
 8004d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d3e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	fab3 f383 	clz	r3, r3
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	2101      	movs	r1, #1
 8004d56:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d09d      	beq.n	8004c9c <HAL_RCC_OscConfig+0x688>
 8004d60:	e08d      	b.n	8004e7e <HAL_RCC_OscConfig+0x86a>
 8004d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	fa93 f2a3 	rbit	r2, r3
 8004d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004d84:	601a      	str	r2, [r3, #0]
  return result;
 8004d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004d8e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d90:	fab3 f383 	clz	r3, r3
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	4b5d      	ldr	r3, [pc, #372]	; (8004f10 <HAL_RCC_OscConfig+0x8fc>)
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	461a      	mov	r2, r3
 8004da0:	2300      	movs	r3, #0
 8004da2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da4:	f7fd fc36 	bl	8002614 <HAL_GetTick>
 8004da8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dac:	e00a      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dae:	f7fd fc31 	bl	8002614 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d902      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	f000 bc75 	b.w	80056ae <HAL_RCC_OscConfig+0x109a>
 8004dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dc8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004dcc:	2202      	movs	r2, #2
 8004dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dd4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	fa93 f2a3 	rbit	r2, r3
 8004dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004de2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004df0:	2202      	movs	r2, #2
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004df8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	fa93 f2a3 	rbit	r2, r3
 8004e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004e14:	2202      	movs	r2, #2
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e1c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	fa93 f2a3 	rbit	r2, r3
 8004e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004e2e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e30:	4b36      	ldr	r3, [pc, #216]	; (8004f0c <HAL_RCC_OscConfig+0x8f8>)
 8004e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e38:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	6019      	str	r1, [r3, #0]
 8004e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e44:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	fa93 f1a3 	rbit	r1, r3
 8004e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e52:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004e56:	6019      	str	r1, [r3, #0]
  return result;
 8004e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e5c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	fab3 f383 	clz	r3, r3
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	2101      	movs	r1, #1
 8004e74:	fa01 f303 	lsl.w	r3, r1, r3
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d197      	bne.n	8004dae <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 81a5 	beq.w	80051de <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e9a:	4b1c      	ldr	r3, [pc, #112]	; (8004f0c <HAL_RCC_OscConfig+0x8f8>)
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d116      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea6:	4b19      	ldr	r3, [pc, #100]	; (8004f0c <HAL_RCC_OscConfig+0x8f8>)
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	4a18      	ldr	r2, [pc, #96]	; (8004f0c <HAL_RCC_OscConfig+0x8f8>)
 8004eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	61d3      	str	r3, [r2, #28]
 8004eb2:	4b16      	ldr	r3, [pc, #88]	; (8004f0c <HAL_RCC_OscConfig+0x8f8>)
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ec8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ecc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <HAL_RCC_OscConfig+0x900>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d121      	bne.n	8004f24 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <HAL_RCC_OscConfig+0x900>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a0b      	ldr	r2, [pc, #44]	; (8004f14 <HAL_RCC_OscConfig+0x900>)
 8004ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eec:	f7fd fb92 	bl	8002614 <HAL_GetTick>
 8004ef0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef4:	e010      	b.n	8004f18 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef6:	f7fd fb8d 	bl	8002614 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b64      	cmp	r3, #100	; 0x64
 8004f04:	d908      	bls.n	8004f18 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e3d1      	b.n	80056ae <HAL_RCC_OscConfig+0x109a>
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	10908120 	.word	0x10908120
 8004f14:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f18:	4b8d      	ldr	r3, [pc, #564]	; (8005150 <HAL_RCC_OscConfig+0xb3c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0e8      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d106      	bne.n	8004f42 <HAL_RCC_OscConfig+0x92e>
 8004f34:	4b87      	ldr	r3, [pc, #540]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	4a86      	ldr	r2, [pc, #536]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	6213      	str	r3, [r2, #32]
 8004f40:	e035      	b.n	8004fae <HAL_RCC_OscConfig+0x99a>
 8004f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10c      	bne.n	8004f6c <HAL_RCC_OscConfig+0x958>
 8004f52:	4b80      	ldr	r3, [pc, #512]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	4a7f      	ldr	r2, [pc, #508]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 8004f58:	f023 0301 	bic.w	r3, r3, #1
 8004f5c:	6213      	str	r3, [r2, #32]
 8004f5e:	4b7d      	ldr	r3, [pc, #500]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	4a7c      	ldr	r2, [pc, #496]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 8004f64:	f023 0304 	bic.w	r3, r3, #4
 8004f68:	6213      	str	r3, [r2, #32]
 8004f6a:	e020      	b.n	8004fae <HAL_RCC_OscConfig+0x99a>
 8004f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b05      	cmp	r3, #5
 8004f7a:	d10c      	bne.n	8004f96 <HAL_RCC_OscConfig+0x982>
 8004f7c:	4b75      	ldr	r3, [pc, #468]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	4a74      	ldr	r2, [pc, #464]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 8004f82:	f043 0304 	orr.w	r3, r3, #4
 8004f86:	6213      	str	r3, [r2, #32]
 8004f88:	4b72      	ldr	r3, [pc, #456]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	4a71      	ldr	r2, [pc, #452]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	6213      	str	r3, [r2, #32]
 8004f94:	e00b      	b.n	8004fae <HAL_RCC_OscConfig+0x99a>
 8004f96:	4b6f      	ldr	r3, [pc, #444]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	4a6e      	ldr	r2, [pc, #440]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	6213      	str	r3, [r2, #32]
 8004fa2:	4b6c      	ldr	r3, [pc, #432]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	4a6b      	ldr	r2, [pc, #428]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 8004fa8:	f023 0304 	bic.w	r3, r3, #4
 8004fac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8081 	beq.w	80050c2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fc0:	f7fd fb28 	bl	8002614 <HAL_GetTick>
 8004fc4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc8:	e00b      	b.n	8004fe2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fca:	f7fd fb23 	bl	8002614 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e365      	b.n	80056ae <HAL_RCC_OscConfig+0x109a>
 8004fe2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fe6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004fea:	2202      	movs	r2, #2
 8004fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ff2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	fa93 f2a3 	rbit	r2, r3
 8004ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005000:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800500a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800500e:	2202      	movs	r2, #2
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005016:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	fa93 f2a3 	rbit	r2, r3
 8005020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005024:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005028:	601a      	str	r2, [r3, #0]
  return result;
 800502a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800502e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005032:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005034:	fab3 f383 	clz	r3, r3
 8005038:	b2db      	uxtb	r3, r3
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	b2db      	uxtb	r3, r3
 800503e:	f043 0302 	orr.w	r3, r3, #2
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d102      	bne.n	800504e <HAL_RCC_OscConfig+0xa3a>
 8005048:	4b42      	ldr	r3, [pc, #264]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	e013      	b.n	8005076 <HAL_RCC_OscConfig+0xa62>
 800504e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005052:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005056:	2202      	movs	r2, #2
 8005058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800505e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	fa93 f2a3 	rbit	r2, r3
 8005068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800506c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	4b38      	ldr	r3, [pc, #224]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800507a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800507e:	2102      	movs	r1, #2
 8005080:	6011      	str	r1, [r2, #0]
 8005082:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005086:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800508a:	6812      	ldr	r2, [r2, #0]
 800508c:	fa92 f1a2 	rbit	r1, r2
 8005090:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005094:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005098:	6011      	str	r1, [r2, #0]
  return result;
 800509a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800509e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	fab2 f282 	clz	r2, r2
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	f002 021f 	and.w	r2, r2, #31
 80050b4:	2101      	movs	r1, #1
 80050b6:	fa01 f202 	lsl.w	r2, r1, r2
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d084      	beq.n	8004fca <HAL_RCC_OscConfig+0x9b6>
 80050c0:	e083      	b.n	80051ca <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c2:	f7fd faa7 	bl	8002614 <HAL_GetTick>
 80050c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ca:	e00b      	b.n	80050e4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050cc:	f7fd faa2 	bl	8002614 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050dc:	4293      	cmp	r3, r2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e2e4      	b.n	80056ae <HAL_RCC_OscConfig+0x109a>
 80050e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050e8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80050ec:	2202      	movs	r2, #2
 80050ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	fa93 f2a3 	rbit	r2, r3
 80050fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005102:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800510c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005110:	2202      	movs	r2, #2
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005118:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	fa93 f2a3 	rbit	r2, r3
 8005122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005126:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800512a:	601a      	str	r2, [r3, #0]
  return result;
 800512c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005130:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005134:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005136:	fab3 f383 	clz	r3, r3
 800513a:	b2db      	uxtb	r3, r3
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f043 0302 	orr.w	r3, r3, #2
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d106      	bne.n	8005158 <HAL_RCC_OscConfig+0xb44>
 800514a:	4b02      	ldr	r3, [pc, #8]	; (8005154 <HAL_RCC_OscConfig+0xb40>)
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	e017      	b.n	8005180 <HAL_RCC_OscConfig+0xb6c>
 8005150:	40007000 	.word	0x40007000
 8005154:	40021000 	.word	0x40021000
 8005158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800515c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005160:	2202      	movs	r2, #2
 8005162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005168:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	fa93 f2a3 	rbit	r2, r3
 8005172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005176:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	4bb3      	ldr	r3, [pc, #716]	; (800544c <HAL_RCC_OscConfig+0xe38>)
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005184:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005188:	2102      	movs	r1, #2
 800518a:	6011      	str	r1, [r2, #0]
 800518c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005190:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	fa92 f1a2 	rbit	r1, r2
 800519a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800519e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80051a2:	6011      	str	r1, [r2, #0]
  return result;
 80051a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051a8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	fab2 f282 	clz	r2, r2
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	f002 021f 	and.w	r2, r2, #31
 80051be:	2101      	movs	r1, #1
 80051c0:	fa01 f202 	lsl.w	r2, r1, r2
 80051c4:	4013      	ands	r3, r2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d180      	bne.n	80050cc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051ca:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d105      	bne.n	80051de <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d2:	4b9e      	ldr	r3, [pc, #632]	; (800544c <HAL_RCC_OscConfig+0xe38>)
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	4a9d      	ldr	r2, [pc, #628]	; (800544c <HAL_RCC_OscConfig+0xe38>)
 80051d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051dc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 825e 	beq.w	80056ac <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051f0:	4b96      	ldr	r3, [pc, #600]	; (800544c <HAL_RCC_OscConfig+0xe38>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 030c 	and.w	r3, r3, #12
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	f000 821f 	beq.w	800563c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005202:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	2b02      	cmp	r3, #2
 800520c:	f040 8170 	bne.w	80054f0 <HAL_RCC_OscConfig+0xedc>
 8005210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005214:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005218:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800521c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005222:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	fa93 f2a3 	rbit	r2, r3
 800522c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005230:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005234:	601a      	str	r2, [r3, #0]
  return result;
 8005236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800523a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800523e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005240:	fab3 f383 	clz	r3, r3
 8005244:	b2db      	uxtb	r3, r3
 8005246:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800524a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	461a      	mov	r2, r3
 8005252:	2300      	movs	r3, #0
 8005254:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005256:	f7fd f9dd 	bl	8002614 <HAL_GetTick>
 800525a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800525e:	e009      	b.n	8005274 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005260:	f7fd f9d8 	bl	8002614 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e21c      	b.n	80056ae <HAL_RCC_OscConfig+0x109a>
 8005274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005278:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800527c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005280:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005286:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	fa93 f2a3 	rbit	r2, r3
 8005290:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005294:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005298:	601a      	str	r2, [r3, #0]
  return result;
 800529a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800529e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80052a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052a4:	fab3 f383 	clz	r3, r3
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d102      	bne.n	80052be <HAL_RCC_OscConfig+0xcaa>
 80052b8:	4b64      	ldr	r3, [pc, #400]	; (800544c <HAL_RCC_OscConfig+0xe38>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	e027      	b.n	800530e <HAL_RCC_OscConfig+0xcfa>
 80052be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052c2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80052c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052d0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	fa93 f2a3 	rbit	r2, r3
 80052da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052de:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052e8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80052ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052f6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	fa93 f2a3 	rbit	r2, r3
 8005300:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005304:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	4b50      	ldr	r3, [pc, #320]	; (800544c <HAL_RCC_OscConfig+0xe38>)
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005312:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005316:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800531a:	6011      	str	r1, [r2, #0]
 800531c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005320:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	fa92 f1a2 	rbit	r1, r2
 800532a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800532e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005332:	6011      	str	r1, [r2, #0]
  return result;
 8005334:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005338:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	fab2 f282 	clz	r2, r2
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	f042 0220 	orr.w	r2, r2, #32
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	f002 021f 	and.w	r2, r2, #31
 800534e:	2101      	movs	r1, #1
 8005350:	fa01 f202 	lsl.w	r2, r1, r2
 8005354:	4013      	ands	r3, r2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d182      	bne.n	8005260 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800535a:	4b3c      	ldr	r3, [pc, #240]	; (800544c <HAL_RCC_OscConfig+0xe38>)
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	f023 020f 	bic.w	r2, r3, #15
 8005362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005366:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	4937      	ldr	r1, [pc, #220]	; (800544c <HAL_RCC_OscConfig+0xe38>)
 8005370:	4313      	orrs	r3, r2
 8005372:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005374:	4b35      	ldr	r3, [pc, #212]	; (800544c <HAL_RCC_OscConfig+0xe38>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800537c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005380:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6a19      	ldr	r1, [r3, #32]
 8005388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800538c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	430b      	orrs	r3, r1
 8005396:	492d      	ldr	r1, [pc, #180]	; (800544c <HAL_RCC_OscConfig+0xe38>)
 8005398:	4313      	orrs	r3, r2
 800539a:	604b      	str	r3, [r1, #4]
 800539c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053a0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80053a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	fa93 f2a3 	rbit	r2, r3
 80053b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053bc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80053c0:	601a      	str	r2, [r3, #0]
  return result;
 80053c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80053ca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053cc:	fab3 f383 	clz	r3, r3
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	461a      	mov	r2, r3
 80053de:	2301      	movs	r3, #1
 80053e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e2:	f7fd f917 	bl	8002614 <HAL_GetTick>
 80053e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053ea:	e009      	b.n	8005400 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ec:	f7fd f912 	bl	8002614 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e156      	b.n	80056ae <HAL_RCC_OscConfig+0x109a>
 8005400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005404:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005408:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800540c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005412:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	fa93 f2a3 	rbit	r2, r3
 800541c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005420:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005424:	601a      	str	r2, [r3, #0]
  return result;
 8005426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800542a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800542e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005430:	fab3 f383 	clz	r3, r3
 8005434:	b2db      	uxtb	r3, r3
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	b2db      	uxtb	r3, r3
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d105      	bne.n	8005450 <HAL_RCC_OscConfig+0xe3c>
 8005444:	4b01      	ldr	r3, [pc, #4]	; (800544c <HAL_RCC_OscConfig+0xe38>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	e02a      	b.n	80054a0 <HAL_RCC_OscConfig+0xe8c>
 800544a:	bf00      	nop
 800544c:	40021000 	.word	0x40021000
 8005450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005454:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005458:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800545c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005462:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	fa93 f2a3 	rbit	r2, r3
 800546c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005470:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800547a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800547e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005488:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	fa93 f2a3 	rbit	r2, r3
 8005492:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005496:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	4b86      	ldr	r3, [pc, #536]	; (80056b8 <HAL_RCC_OscConfig+0x10a4>)
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80054a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80054a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80054ac:	6011      	str	r1, [r2, #0]
 80054ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80054b2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	fa92 f1a2 	rbit	r1, r2
 80054bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80054c0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80054c4:	6011      	str	r1, [r2, #0]
  return result;
 80054c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80054ca:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	fab2 f282 	clz	r2, r2
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	f042 0220 	orr.w	r2, r2, #32
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	f002 021f 	and.w	r2, r2, #31
 80054e0:	2101      	movs	r1, #1
 80054e2:	fa01 f202 	lsl.w	r2, r1, r2
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f43f af7f 	beq.w	80053ec <HAL_RCC_OscConfig+0xdd8>
 80054ee:	e0dd      	b.n	80056ac <HAL_RCC_OscConfig+0x1098>
 80054f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054f4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80054f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005502:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	fa93 f2a3 	rbit	r2, r3
 800550c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005510:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005514:	601a      	str	r2, [r3, #0]
  return result;
 8005516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800551a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800551e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005520:	fab3 f383 	clz	r3, r3
 8005524:	b2db      	uxtb	r3, r3
 8005526:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800552a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	461a      	mov	r2, r3
 8005532:	2300      	movs	r3, #0
 8005534:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005536:	f7fd f86d 	bl	8002614 <HAL_GetTick>
 800553a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800553e:	e009      	b.n	8005554 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005540:	f7fd f868 	bl	8002614 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e0ac      	b.n	80056ae <HAL_RCC_OscConfig+0x109a>
 8005554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005558:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800555c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005566:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	fa93 f2a3 	rbit	r2, r3
 8005570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005574:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005578:	601a      	str	r2, [r3, #0]
  return result;
 800557a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800557e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005582:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005584:	fab3 f383 	clz	r3, r3
 8005588:	b2db      	uxtb	r3, r3
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	d102      	bne.n	800559e <HAL_RCC_OscConfig+0xf8a>
 8005598:	4b47      	ldr	r3, [pc, #284]	; (80056b8 <HAL_RCC_OscConfig+0x10a4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	e027      	b.n	80055ee <HAL_RCC_OscConfig+0xfda>
 800559e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055a2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80055a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055b0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	fa93 f2a3 	rbit	r2, r3
 80055ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055be:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055c8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80055cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	fa93 f2a3 	rbit	r2, r3
 80055e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055e4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	4b33      	ldr	r3, [pc, #204]	; (80056b8 <HAL_RCC_OscConfig+0x10a4>)
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80055f2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80055f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055fa:	6011      	str	r1, [r2, #0]
 80055fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005600:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	fa92 f1a2 	rbit	r1, r2
 800560a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800560e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005612:	6011      	str	r1, [r2, #0]
  return result;
 8005614:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005618:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	fab2 f282 	clz	r2, r2
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	f042 0220 	orr.w	r2, r2, #32
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	f002 021f 	and.w	r2, r2, #31
 800562e:	2101      	movs	r1, #1
 8005630:	fa01 f202 	lsl.w	r2, r1, r2
 8005634:	4013      	ands	r3, r2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d182      	bne.n	8005540 <HAL_RCC_OscConfig+0xf2c>
 800563a:	e037      	b.n	80056ac <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800563c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005640:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e02e      	b.n	80056ae <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005650:	4b19      	ldr	r3, [pc, #100]	; (80056b8 <HAL_RCC_OscConfig+0x10a4>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005658:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <HAL_RCC_OscConfig+0x10a4>)
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005660:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005664:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800566c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	429a      	cmp	r2, r3
 8005676:	d117      	bne.n	80056a8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005678:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800567c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005684:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800568c:	429a      	cmp	r2, r3
 800568e:	d10b      	bne.n	80056a8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005690:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005694:	f003 020f 	and.w	r2, r3, #15
 8005698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800569c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d001      	beq.n	80056ac <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e000      	b.n	80056ae <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40021000 	.word	0x40021000

080056bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b09e      	sub	sp, #120	; 0x78
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e162      	b.n	800599a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056d4:	4b90      	ldr	r3, [pc, #576]	; (8005918 <HAL_RCC_ClockConfig+0x25c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d910      	bls.n	8005704 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e2:	4b8d      	ldr	r3, [pc, #564]	; (8005918 <HAL_RCC_ClockConfig+0x25c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f023 0207 	bic.w	r2, r3, #7
 80056ea:	498b      	ldr	r1, [pc, #556]	; (8005918 <HAL_RCC_ClockConfig+0x25c>)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f2:	4b89      	ldr	r3, [pc, #548]	; (8005918 <HAL_RCC_ClockConfig+0x25c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d001      	beq.n	8005704 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e14a      	b.n	800599a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005710:	4b82      	ldr	r3, [pc, #520]	; (800591c <HAL_RCC_ClockConfig+0x260>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	497f      	ldr	r1, [pc, #508]	; (800591c <HAL_RCC_ClockConfig+0x260>)
 800571e:	4313      	orrs	r3, r2
 8005720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 80dc 	beq.w	80058e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d13c      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xf6>
 8005738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800573c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005740:	fa93 f3a3 	rbit	r3, r3
 8005744:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005748:	fab3 f383 	clz	r3, r3
 800574c:	b2db      	uxtb	r3, r3
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d102      	bne.n	8005762 <HAL_RCC_ClockConfig+0xa6>
 800575c:	4b6f      	ldr	r3, [pc, #444]	; (800591c <HAL_RCC_ClockConfig+0x260>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	e00f      	b.n	8005782 <HAL_RCC_ClockConfig+0xc6>
 8005762:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005766:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005768:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800576a:	fa93 f3a3 	rbit	r3, r3
 800576e:	667b      	str	r3, [r7, #100]	; 0x64
 8005770:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005774:	663b      	str	r3, [r7, #96]	; 0x60
 8005776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005778:	fa93 f3a3 	rbit	r3, r3
 800577c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800577e:	4b67      	ldr	r3, [pc, #412]	; (800591c <HAL_RCC_ClockConfig+0x260>)
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005786:	65ba      	str	r2, [r7, #88]	; 0x58
 8005788:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800578a:	fa92 f2a2 	rbit	r2, r2
 800578e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005790:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005792:	fab2 f282 	clz	r2, r2
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	f042 0220 	orr.w	r2, r2, #32
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	f002 021f 	and.w	r2, r2, #31
 80057a2:	2101      	movs	r1, #1
 80057a4:	fa01 f202 	lsl.w	r2, r1, r2
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d17b      	bne.n	80058a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e0f3      	b.n	800599a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d13c      	bne.n	8005834 <HAL_RCC_ClockConfig+0x178>
 80057ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c2:	fa93 f3a3 	rbit	r3, r3
 80057c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80057c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ca:	fab3 f383 	clz	r3, r3
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d102      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x128>
 80057de:	4b4f      	ldr	r3, [pc, #316]	; (800591c <HAL_RCC_ClockConfig+0x260>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	e00f      	b.n	8005804 <HAL_RCC_ClockConfig+0x148>
 80057e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ec:	fa93 f3a3 	rbit	r3, r3
 80057f0:	647b      	str	r3, [r7, #68]	; 0x44
 80057f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057f6:	643b      	str	r3, [r7, #64]	; 0x40
 80057f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057fa:	fa93 f3a3 	rbit	r3, r3
 80057fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005800:	4b46      	ldr	r3, [pc, #280]	; (800591c <HAL_RCC_ClockConfig+0x260>)
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005808:	63ba      	str	r2, [r7, #56]	; 0x38
 800580a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800580c:	fa92 f2a2 	rbit	r2, r2
 8005810:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005814:	fab2 f282 	clz	r2, r2
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	f042 0220 	orr.w	r2, r2, #32
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	f002 021f 	and.w	r2, r2, #31
 8005824:	2101      	movs	r1, #1
 8005826:	fa01 f202 	lsl.w	r2, r1, r2
 800582a:	4013      	ands	r3, r2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d13a      	bne.n	80058a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0b2      	b.n	800599a <HAL_RCC_ClockConfig+0x2de>
 8005834:	2302      	movs	r3, #2
 8005836:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	fa93 f3a3 	rbit	r3, r3
 800583e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005842:	fab3 f383 	clz	r3, r3
 8005846:	b2db      	uxtb	r3, r3
 8005848:	095b      	lsrs	r3, r3, #5
 800584a:	b2db      	uxtb	r3, r3
 800584c:	f043 0301 	orr.w	r3, r3, #1
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b01      	cmp	r3, #1
 8005854:	d102      	bne.n	800585c <HAL_RCC_ClockConfig+0x1a0>
 8005856:	4b31      	ldr	r3, [pc, #196]	; (800591c <HAL_RCC_ClockConfig+0x260>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	e00d      	b.n	8005878 <HAL_RCC_ClockConfig+0x1bc>
 800585c:	2302      	movs	r3, #2
 800585e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	fa93 f3a3 	rbit	r3, r3
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
 8005868:	2302      	movs	r3, #2
 800586a:	623b      	str	r3, [r7, #32]
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	fa93 f3a3 	rbit	r3, r3
 8005872:	61fb      	str	r3, [r7, #28]
 8005874:	4b29      	ldr	r3, [pc, #164]	; (800591c <HAL_RCC_ClockConfig+0x260>)
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	2202      	movs	r2, #2
 800587a:	61ba      	str	r2, [r7, #24]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	fa92 f2a2 	rbit	r2, r2
 8005882:	617a      	str	r2, [r7, #20]
  return result;
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	fab2 f282 	clz	r2, r2
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	f042 0220 	orr.w	r2, r2, #32
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	f002 021f 	and.w	r2, r2, #31
 8005896:	2101      	movs	r1, #1
 8005898:	fa01 f202 	lsl.w	r2, r1, r2
 800589c:	4013      	ands	r3, r2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e079      	b.n	800599a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058a6:	4b1d      	ldr	r3, [pc, #116]	; (800591c <HAL_RCC_ClockConfig+0x260>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f023 0203 	bic.w	r2, r3, #3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	491a      	ldr	r1, [pc, #104]	; (800591c <HAL_RCC_ClockConfig+0x260>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058b8:	f7fc feac 	bl	8002614 <HAL_GetTick>
 80058bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058be:	e00a      	b.n	80058d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c0:	f7fc fea8 	bl	8002614 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e061      	b.n	800599a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d6:	4b11      	ldr	r3, [pc, #68]	; (800591c <HAL_RCC_ClockConfig+0x260>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f003 020c 	and.w	r2, r3, #12
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d1eb      	bne.n	80058c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058e8:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <HAL_RCC_ClockConfig+0x25c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d214      	bcs.n	8005920 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f6:	4b08      	ldr	r3, [pc, #32]	; (8005918 <HAL_RCC_ClockConfig+0x25c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f023 0207 	bic.w	r2, r3, #7
 80058fe:	4906      	ldr	r1, [pc, #24]	; (8005918 <HAL_RCC_ClockConfig+0x25c>)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	4313      	orrs	r3, r2
 8005904:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005906:	4b04      	ldr	r3, [pc, #16]	; (8005918 <HAL_RCC_ClockConfig+0x25c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d005      	beq.n	8005920 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e040      	b.n	800599a <HAL_RCC_ClockConfig+0x2de>
 8005918:	40022000 	.word	0x40022000
 800591c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800592c:	4b1d      	ldr	r3, [pc, #116]	; (80059a4 <HAL_RCC_ClockConfig+0x2e8>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	491a      	ldr	r1, [pc, #104]	; (80059a4 <HAL_RCC_ClockConfig+0x2e8>)
 800593a:	4313      	orrs	r3, r2
 800593c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	2b00      	cmp	r3, #0
 8005948:	d009      	beq.n	800595e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800594a:	4b16      	ldr	r3, [pc, #88]	; (80059a4 <HAL_RCC_ClockConfig+0x2e8>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	4912      	ldr	r1, [pc, #72]	; (80059a4 <HAL_RCC_ClockConfig+0x2e8>)
 800595a:	4313      	orrs	r3, r2
 800595c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800595e:	f000 f829 	bl	80059b4 <HAL_RCC_GetSysClockFreq>
 8005962:	4601      	mov	r1, r0
 8005964:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <HAL_RCC_ClockConfig+0x2e8>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800596c:	22f0      	movs	r2, #240	; 0xf0
 800596e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	fa92 f2a2 	rbit	r2, r2
 8005976:	60fa      	str	r2, [r7, #12]
  return result;
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	fab2 f282 	clz	r2, r2
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	40d3      	lsrs	r3, r2
 8005982:	4a09      	ldr	r2, [pc, #36]	; (80059a8 <HAL_RCC_ClockConfig+0x2ec>)
 8005984:	5cd3      	ldrb	r3, [r2, r3]
 8005986:	fa21 f303 	lsr.w	r3, r1, r3
 800598a:	4a08      	ldr	r2, [pc, #32]	; (80059ac <HAL_RCC_ClockConfig+0x2f0>)
 800598c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800598e:	4b08      	ldr	r3, [pc, #32]	; (80059b0 <HAL_RCC_ClockConfig+0x2f4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f7fc fdfa 	bl	800258c <HAL_InitTick>
  
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3778      	adds	r7, #120	; 0x78
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	40021000 	.word	0x40021000
 80059a8:	0800a250 	.word	0x0800a250
 80059ac:	20000030 	.word	0x20000030
 80059b0:	20000034 	.word	0x20000034

080059b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b08b      	sub	sp, #44	; 0x2c
 80059b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	2300      	movs	r3, #0
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	2300      	movs	r3, #0
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80059ce:	4b2a      	ldr	r3, [pc, #168]	; (8005a78 <HAL_RCC_GetSysClockFreq+0xc4>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f003 030c 	and.w	r3, r3, #12
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d002      	beq.n	80059e4 <HAL_RCC_GetSysClockFreq+0x30>
 80059de:	2b08      	cmp	r3, #8
 80059e0:	d003      	beq.n	80059ea <HAL_RCC_GetSysClockFreq+0x36>
 80059e2:	e03f      	b.n	8005a64 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059e4:	4b25      	ldr	r3, [pc, #148]	; (8005a7c <HAL_RCC_GetSysClockFreq+0xc8>)
 80059e6:	623b      	str	r3, [r7, #32]
      break;
 80059e8:	e03f      	b.n	8005a6a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80059f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80059f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	fa92 f2a2 	rbit	r2, r2
 80059fc:	607a      	str	r2, [r7, #4]
  return result;
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	fab2 f282 	clz	r2, r2
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	40d3      	lsrs	r3, r2
 8005a08:	4a1d      	ldr	r2, [pc, #116]	; (8005a80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a0a:	5cd3      	ldrb	r3, [r2, r3]
 8005a0c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005a0e:	4b1a      	ldr	r3, [pc, #104]	; (8005a78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	220f      	movs	r2, #15
 8005a18:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	fa92 f2a2 	rbit	r2, r2
 8005a20:	60fa      	str	r2, [r7, #12]
  return result;
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	fab2 f282 	clz	r2, r2
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	40d3      	lsrs	r3, r2
 8005a2c:	4a15      	ldr	r2, [pc, #84]	; (8005a84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a2e:	5cd3      	ldrb	r3, [r2, r3]
 8005a30:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d008      	beq.n	8005a4e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005a3c:	4a0f      	ldr	r2, [pc, #60]	; (8005a7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	fb02 f303 	mul.w	r3, r2, r3
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4c:	e007      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005a4e:	4a0b      	ldr	r2, [pc, #44]	; (8005a7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	fb02 f303 	mul.w	r3, r2, r3
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	623b      	str	r3, [r7, #32]
      break;
 8005a62:	e002      	b.n	8005a6a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a64:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a66:	623b      	str	r3, [r7, #32]
      break;
 8005a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	372c      	adds	r7, #44	; 0x2c
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	007a1200 	.word	0x007a1200
 8005a80:	0800a268 	.word	0x0800a268
 8005a84:	0800a278 	.word	0x0800a278

08005a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a8c:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	20000030 	.word	0x20000030

08005aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005aa6:	f7ff ffef 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005aaa:	4601      	mov	r1, r0
 8005aac:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ab4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005ab8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	fa92 f2a2 	rbit	r2, r2
 8005ac0:	603a      	str	r2, [r7, #0]
  return result;
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	fab2 f282 	clz	r2, r2
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	40d3      	lsrs	r3, r2
 8005acc:	4a04      	ldr	r2, [pc, #16]	; (8005ae0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005ace:	5cd3      	ldrb	r3, [r2, r3]
 8005ad0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	0800a260 	.word	0x0800a260

08005ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005aea:	f7ff ffcd 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005aee:	4601      	mov	r1, r0
 8005af0:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005af8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005afc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	fa92 f2a2 	rbit	r2, r2
 8005b04:	603a      	str	r2, [r7, #0]
  return result;
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	fab2 f282 	clz	r2, r2
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	40d3      	lsrs	r3, r2
 8005b10:	4a04      	ldr	r2, [pc, #16]	; (8005b24 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005b12:	5cd3      	ldrb	r3, [r2, r3]
 8005b14:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40021000 	.word	0x40021000
 8005b24:	0800a260 	.word	0x0800a260

08005b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b092      	sub	sp, #72	; 0x48
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 80d4 	beq.w	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b4c:	4b4e      	ldr	r3, [pc, #312]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10e      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b58:	4b4b      	ldr	r3, [pc, #300]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	4a4a      	ldr	r2, [pc, #296]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b62:	61d3      	str	r3, [r2, #28]
 8005b64:	4b48      	ldr	r3, [pc, #288]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b70:	2301      	movs	r3, #1
 8005b72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b76:	4b45      	ldr	r3, [pc, #276]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d118      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b82:	4b42      	ldr	r3, [pc, #264]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a41      	ldr	r2, [pc, #260]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b8c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b8e:	f7fc fd41 	bl	8002614 <HAL_GetTick>
 8005b92:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b94:	e008      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b96:	f7fc fd3d 	bl	8002614 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b64      	cmp	r3, #100	; 0x64
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e1d6      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba8:	4b38      	ldr	r3, [pc, #224]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f0      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bb4:	4b34      	ldr	r3, [pc, #208]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8084 	beq.w	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d07c      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bd4:	4b2c      	ldr	r3, [pc, #176]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005be2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	fa93 f3a3 	rbit	r3, r3
 8005bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bee:	fab3 f383 	clz	r3, r3
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	4b26      	ldr	r3, [pc, #152]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	2301      	movs	r3, #1
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	fa93 f3a3 	rbit	r3, r3
 8005c0e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c12:	fab3 f383 	clz	r3, r3
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4b1d      	ldr	r3, [pc, #116]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	461a      	mov	r2, r3
 8005c22:	2300      	movs	r3, #0
 8005c24:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c26:	4a18      	ldr	r2, [pc, #96]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c2a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d04b      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c36:	f7fc fced 	bl	8002614 <HAL_GetTick>
 8005c3a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c3c:	e00a      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c3e:	f7fc fce9 	bl	8002614 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d901      	bls.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e180      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005c54:	2302      	movs	r3, #2
 8005c56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	fa93 f3a3 	rbit	r3, r3
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c60:	2302      	movs	r3, #2
 8005c62:	623b      	str	r3, [r7, #32]
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	fa93 f3a3 	rbit	r3, r3
 8005c6a:	61fb      	str	r3, [r7, #28]
  return result;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c6e:	fab3 f383 	clz	r3, r3
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	095b      	lsrs	r3, r3, #5
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	f043 0302 	orr.w	r3, r3, #2
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d108      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005c82:	4b01      	ldr	r3, [pc, #4]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	e00d      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	40007000 	.word	0x40007000
 8005c90:	10908100 	.word	0x10908100
 8005c94:	2302      	movs	r3, #2
 8005c96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	fa93 f3a3 	rbit	r3, r3
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	4b9a      	ldr	r3, [pc, #616]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	613a      	str	r2, [r7, #16]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	fa92 f2a2 	rbit	r2, r2
 8005cae:	60fa      	str	r2, [r7, #12]
  return result;
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	fab2 f282 	clz	r2, r2
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	f002 021f 	and.w	r2, r2, #31
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0b7      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005cce:	4b8f      	ldr	r3, [pc, #572]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	498c      	ldr	r1, [pc, #560]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ce0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d105      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ce8:	4b88      	ldr	r3, [pc, #544]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	4a87      	ldr	r2, [pc, #540]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d00:	4b82      	ldr	r3, [pc, #520]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	f023 0203 	bic.w	r2, r3, #3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	497f      	ldr	r1, [pc, #508]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d008      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d1e:	4b7b      	ldr	r3, [pc, #492]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	4978      	ldr	r1, [pc, #480]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d008      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d3c:	4b73      	ldr	r3, [pc, #460]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	4970      	ldr	r1, [pc, #448]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d008      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d5a:	4b6c      	ldr	r3, [pc, #432]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	f023 0210 	bic.w	r2, r3, #16
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	4969      	ldr	r1, [pc, #420]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005d78:	4b64      	ldr	r3, [pc, #400]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d84:	4961      	ldr	r1, [pc, #388]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d008      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d96:	4b5d      	ldr	r3, [pc, #372]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	f023 0220 	bic.w	r2, r3, #32
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	495a      	ldr	r1, [pc, #360]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005db4:	4b55      	ldr	r3, [pc, #340]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	4952      	ldr	r1, [pc, #328]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d008      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005dd2:	4b4e      	ldr	r3, [pc, #312]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	494b      	ldr	r1, [pc, #300]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d008      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005df0:	4b46      	ldr	r3, [pc, #280]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	4943      	ldr	r1, [pc, #268]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d008      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e0e:	4b3f      	ldr	r3, [pc, #252]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	493c      	ldr	r1, [pc, #240]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d008      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e2c:	4b37      	ldr	r3, [pc, #220]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	4934      	ldr	r1, [pc, #208]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d008      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005e4a:	4b30      	ldr	r3, [pc, #192]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	492d      	ldr	r1, [pc, #180]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005e68:	4b28      	ldr	r3, [pc, #160]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e74:	4925      	ldr	r1, [pc, #148]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d008      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005e86:	4b21      	ldr	r3, [pc, #132]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	491e      	ldr	r1, [pc, #120]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d008      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005ea4:	4b19      	ldr	r3, [pc, #100]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	4916      	ldr	r1, [pc, #88]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d008      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005ec2:	4b12      	ldr	r3, [pc, #72]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ece:	490f      	ldr	r1, [pc, #60]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d008      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eec:	4907      	ldr	r1, [pc, #28]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00c      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005efe:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	e002      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005f0a:	bf00      	nop
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f12:	4913      	ldr	r1, [pc, #76]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d008      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f30:	490b      	ldr	r1, [pc, #44]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d008      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005f42:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4e:	4904      	ldr	r1, [pc, #16]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3748      	adds	r7, #72	; 0x48
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40021000 	.word	0x40021000

08005f64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e040      	b.n	8005ff8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fc f97c 	bl	8002284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2224      	movs	r2, #36	; 0x24
 8005f90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 0201 	bic.w	r2, r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f8c0 	bl	8006128 <UART_SetConfig>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e022      	b.n	8005ff8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa8a 	bl	80064d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fb11 	bl	8006618 <UART_CheckIdleState>
 8005ff6:	4603      	mov	r3, r0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	; 0x28
 8006004:	af02      	add	r7, sp, #8
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	4613      	mov	r3, r2
 800600e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006014:	2b20      	cmp	r3, #32
 8006016:	f040 8082 	bne.w	800611e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <HAL_UART_Transmit+0x26>
 8006020:	88fb      	ldrh	r3, [r7, #6]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e07a      	b.n	8006120 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_UART_Transmit+0x38>
 8006034:	2302      	movs	r3, #2
 8006036:	e073      	b.n	8006120 <HAL_UART_Transmit+0x120>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2221      	movs	r2, #33	; 0x21
 800604c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800604e:	f7fc fae1 	bl	8002614 <HAL_GetTick>
 8006052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	88fa      	ldrh	r2, [r7, #6]
 8006058:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	88fa      	ldrh	r2, [r7, #6]
 8006060:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606c:	d108      	bne.n	8006080 <HAL_UART_Transmit+0x80>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d104      	bne.n	8006080 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006076:	2300      	movs	r3, #0
 8006078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	61bb      	str	r3, [r7, #24]
 800607e:	e003      	b.n	8006088 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006084:	2300      	movs	r3, #0
 8006086:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006090:	e02d      	b.n	80060ee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2200      	movs	r2, #0
 800609a:	2180      	movs	r1, #128	; 0x80
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 fb04 	bl	80066aa <UART_WaitOnFlagUntilTimeout>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e039      	b.n	8006120 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10b      	bne.n	80060ca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	881a      	ldrh	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060be:	b292      	uxth	r2, r2
 80060c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	3302      	adds	r3, #2
 80060c6:	61bb      	str	r3, [r7, #24]
 80060c8:	e008      	b.n	80060dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	781a      	ldrb	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	b292      	uxth	r2, r2
 80060d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	3301      	adds	r3, #1
 80060da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1cb      	bne.n	8006092 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2200      	movs	r2, #0
 8006102:	2140      	movs	r1, #64	; 0x40
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 fad0 	bl	80066aa <UART_WaitOnFlagUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e005      	b.n	8006120 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	e000      	b.n	8006120 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800611e:	2302      	movs	r3, #2
  }
}
 8006120:	4618      	mov	r0, r3
 8006122:	3720      	adds	r7, #32
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	431a      	orrs	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	4b92      	ldr	r3, [pc, #584]	; (800639c <UART_SetConfig+0x274>)
 8006154:	4013      	ands	r3, r2
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	6979      	ldr	r1, [r7, #20]
 800615c:	430b      	orrs	r3, r1
 800615e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	430a      	orrs	r2, r1
 8006198:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a80      	ldr	r2, [pc, #512]	; (80063a0 <UART_SetConfig+0x278>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d120      	bne.n	80061e6 <UART_SetConfig+0xbe>
 80061a4:	4b7f      	ldr	r3, [pc, #508]	; (80063a4 <UART_SetConfig+0x27c>)
 80061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a8:	f003 0303 	and.w	r3, r3, #3
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d817      	bhi.n	80061e0 <UART_SetConfig+0xb8>
 80061b0:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <UART_SetConfig+0x90>)
 80061b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b6:	bf00      	nop
 80061b8:	080061c9 	.word	0x080061c9
 80061bc:	080061d5 	.word	0x080061d5
 80061c0:	080061db 	.word	0x080061db
 80061c4:	080061cf 	.word	0x080061cf
 80061c8:	2301      	movs	r3, #1
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e0b5      	b.n	800633a <UART_SetConfig+0x212>
 80061ce:	2302      	movs	r3, #2
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e0b2      	b.n	800633a <UART_SetConfig+0x212>
 80061d4:	2304      	movs	r3, #4
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	e0af      	b.n	800633a <UART_SetConfig+0x212>
 80061da:	2308      	movs	r3, #8
 80061dc:	77fb      	strb	r3, [r7, #31]
 80061de:	e0ac      	b.n	800633a <UART_SetConfig+0x212>
 80061e0:	2310      	movs	r3, #16
 80061e2:	77fb      	strb	r3, [r7, #31]
 80061e4:	e0a9      	b.n	800633a <UART_SetConfig+0x212>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a6f      	ldr	r2, [pc, #444]	; (80063a8 <UART_SetConfig+0x280>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d124      	bne.n	800623a <UART_SetConfig+0x112>
 80061f0:	4b6c      	ldr	r3, [pc, #432]	; (80063a4 <UART_SetConfig+0x27c>)
 80061f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80061fc:	d011      	beq.n	8006222 <UART_SetConfig+0xfa>
 80061fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006202:	d817      	bhi.n	8006234 <UART_SetConfig+0x10c>
 8006204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006208:	d011      	beq.n	800622e <UART_SetConfig+0x106>
 800620a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800620e:	d811      	bhi.n	8006234 <UART_SetConfig+0x10c>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <UART_SetConfig+0xf4>
 8006214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006218:	d006      	beq.n	8006228 <UART_SetConfig+0x100>
 800621a:	e00b      	b.n	8006234 <UART_SetConfig+0x10c>
 800621c:	2300      	movs	r3, #0
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e08b      	b.n	800633a <UART_SetConfig+0x212>
 8006222:	2302      	movs	r3, #2
 8006224:	77fb      	strb	r3, [r7, #31]
 8006226:	e088      	b.n	800633a <UART_SetConfig+0x212>
 8006228:	2304      	movs	r3, #4
 800622a:	77fb      	strb	r3, [r7, #31]
 800622c:	e085      	b.n	800633a <UART_SetConfig+0x212>
 800622e:	2308      	movs	r3, #8
 8006230:	77fb      	strb	r3, [r7, #31]
 8006232:	e082      	b.n	800633a <UART_SetConfig+0x212>
 8006234:	2310      	movs	r3, #16
 8006236:	77fb      	strb	r3, [r7, #31]
 8006238:	e07f      	b.n	800633a <UART_SetConfig+0x212>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a5b      	ldr	r2, [pc, #364]	; (80063ac <UART_SetConfig+0x284>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d124      	bne.n	800628e <UART_SetConfig+0x166>
 8006244:	4b57      	ldr	r3, [pc, #348]	; (80063a4 <UART_SetConfig+0x27c>)
 8006246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006248:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800624c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006250:	d011      	beq.n	8006276 <UART_SetConfig+0x14e>
 8006252:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006256:	d817      	bhi.n	8006288 <UART_SetConfig+0x160>
 8006258:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800625c:	d011      	beq.n	8006282 <UART_SetConfig+0x15a>
 800625e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006262:	d811      	bhi.n	8006288 <UART_SetConfig+0x160>
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <UART_SetConfig+0x148>
 8006268:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800626c:	d006      	beq.n	800627c <UART_SetConfig+0x154>
 800626e:	e00b      	b.n	8006288 <UART_SetConfig+0x160>
 8006270:	2300      	movs	r3, #0
 8006272:	77fb      	strb	r3, [r7, #31]
 8006274:	e061      	b.n	800633a <UART_SetConfig+0x212>
 8006276:	2302      	movs	r3, #2
 8006278:	77fb      	strb	r3, [r7, #31]
 800627a:	e05e      	b.n	800633a <UART_SetConfig+0x212>
 800627c:	2304      	movs	r3, #4
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	e05b      	b.n	800633a <UART_SetConfig+0x212>
 8006282:	2308      	movs	r3, #8
 8006284:	77fb      	strb	r3, [r7, #31]
 8006286:	e058      	b.n	800633a <UART_SetConfig+0x212>
 8006288:	2310      	movs	r3, #16
 800628a:	77fb      	strb	r3, [r7, #31]
 800628c:	e055      	b.n	800633a <UART_SetConfig+0x212>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a47      	ldr	r2, [pc, #284]	; (80063b0 <UART_SetConfig+0x288>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d124      	bne.n	80062e2 <UART_SetConfig+0x1ba>
 8006298:	4b42      	ldr	r3, [pc, #264]	; (80063a4 <UART_SetConfig+0x27c>)
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80062a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062a4:	d011      	beq.n	80062ca <UART_SetConfig+0x1a2>
 80062a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062aa:	d817      	bhi.n	80062dc <UART_SetConfig+0x1b4>
 80062ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062b0:	d011      	beq.n	80062d6 <UART_SetConfig+0x1ae>
 80062b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062b6:	d811      	bhi.n	80062dc <UART_SetConfig+0x1b4>
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <UART_SetConfig+0x19c>
 80062bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062c0:	d006      	beq.n	80062d0 <UART_SetConfig+0x1a8>
 80062c2:	e00b      	b.n	80062dc <UART_SetConfig+0x1b4>
 80062c4:	2300      	movs	r3, #0
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e037      	b.n	800633a <UART_SetConfig+0x212>
 80062ca:	2302      	movs	r3, #2
 80062cc:	77fb      	strb	r3, [r7, #31]
 80062ce:	e034      	b.n	800633a <UART_SetConfig+0x212>
 80062d0:	2304      	movs	r3, #4
 80062d2:	77fb      	strb	r3, [r7, #31]
 80062d4:	e031      	b.n	800633a <UART_SetConfig+0x212>
 80062d6:	2308      	movs	r3, #8
 80062d8:	77fb      	strb	r3, [r7, #31]
 80062da:	e02e      	b.n	800633a <UART_SetConfig+0x212>
 80062dc:	2310      	movs	r3, #16
 80062de:	77fb      	strb	r3, [r7, #31]
 80062e0:	e02b      	b.n	800633a <UART_SetConfig+0x212>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a33      	ldr	r2, [pc, #204]	; (80063b4 <UART_SetConfig+0x28c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d124      	bne.n	8006336 <UART_SetConfig+0x20e>
 80062ec:	4b2d      	ldr	r3, [pc, #180]	; (80063a4 <UART_SetConfig+0x27c>)
 80062ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80062f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062f8:	d011      	beq.n	800631e <UART_SetConfig+0x1f6>
 80062fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062fe:	d817      	bhi.n	8006330 <UART_SetConfig+0x208>
 8006300:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006304:	d011      	beq.n	800632a <UART_SetConfig+0x202>
 8006306:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800630a:	d811      	bhi.n	8006330 <UART_SetConfig+0x208>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <UART_SetConfig+0x1f0>
 8006310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006314:	d006      	beq.n	8006324 <UART_SetConfig+0x1fc>
 8006316:	e00b      	b.n	8006330 <UART_SetConfig+0x208>
 8006318:	2300      	movs	r3, #0
 800631a:	77fb      	strb	r3, [r7, #31]
 800631c:	e00d      	b.n	800633a <UART_SetConfig+0x212>
 800631e:	2302      	movs	r3, #2
 8006320:	77fb      	strb	r3, [r7, #31]
 8006322:	e00a      	b.n	800633a <UART_SetConfig+0x212>
 8006324:	2304      	movs	r3, #4
 8006326:	77fb      	strb	r3, [r7, #31]
 8006328:	e007      	b.n	800633a <UART_SetConfig+0x212>
 800632a:	2308      	movs	r3, #8
 800632c:	77fb      	strb	r3, [r7, #31]
 800632e:	e004      	b.n	800633a <UART_SetConfig+0x212>
 8006330:	2310      	movs	r3, #16
 8006332:	77fb      	strb	r3, [r7, #31]
 8006334:	e001      	b.n	800633a <UART_SetConfig+0x212>
 8006336:	2310      	movs	r3, #16
 8006338:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006342:	d16c      	bne.n	800641e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8006344:	7ffb      	ldrb	r3, [r7, #31]
 8006346:	2b08      	cmp	r3, #8
 8006348:	d838      	bhi.n	80063bc <UART_SetConfig+0x294>
 800634a:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <UART_SetConfig+0x228>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	08006375 	.word	0x08006375
 8006354:	0800637d 	.word	0x0800637d
 8006358:	08006385 	.word	0x08006385
 800635c:	080063bd 	.word	0x080063bd
 8006360:	0800638b 	.word	0x0800638b
 8006364:	080063bd 	.word	0x080063bd
 8006368:	080063bd 	.word	0x080063bd
 800636c:	080063bd 	.word	0x080063bd
 8006370:	08006393 	.word	0x08006393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006374:	f7ff fb94 	bl	8005aa0 <HAL_RCC_GetPCLK1Freq>
 8006378:	61b8      	str	r0, [r7, #24]
        break;
 800637a:	e024      	b.n	80063c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800637c:	f7ff fbb2 	bl	8005ae4 <HAL_RCC_GetPCLK2Freq>
 8006380:	61b8      	str	r0, [r7, #24]
        break;
 8006382:	e020      	b.n	80063c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <UART_SetConfig+0x290>)
 8006386:	61bb      	str	r3, [r7, #24]
        break;
 8006388:	e01d      	b.n	80063c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800638a:	f7ff fb13 	bl	80059b4 <HAL_RCC_GetSysClockFreq>
 800638e:	61b8      	str	r0, [r7, #24]
        break;
 8006390:	e019      	b.n	80063c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006396:	61bb      	str	r3, [r7, #24]
        break;
 8006398:	e015      	b.n	80063c6 <UART_SetConfig+0x29e>
 800639a:	bf00      	nop
 800639c:	efff69f3 	.word	0xefff69f3
 80063a0:	40013800 	.word	0x40013800
 80063a4:	40021000 	.word	0x40021000
 80063a8:	40004400 	.word	0x40004400
 80063ac:	40004800 	.word	0x40004800
 80063b0:	40004c00 	.word	0x40004c00
 80063b4:	40005000 	.word	0x40005000
 80063b8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	77bb      	strb	r3, [r7, #30]
        break;
 80063c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d075      	beq.n	80064b8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	005a      	lsls	r2, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	085b      	lsrs	r3, r3, #1
 80063d6:	441a      	add	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b0f      	cmp	r3, #15
 80063e8:	d916      	bls.n	8006418 <UART_SetConfig+0x2f0>
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f0:	d212      	bcs.n	8006418 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	f023 030f 	bic.w	r3, r3, #15
 80063fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	085b      	lsrs	r3, r3, #1
 8006400:	b29b      	uxth	r3, r3
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	b29a      	uxth	r2, r3
 8006408:	89fb      	ldrh	r3, [r7, #14]
 800640a:	4313      	orrs	r3, r2
 800640c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	89fa      	ldrh	r2, [r7, #14]
 8006414:	60da      	str	r2, [r3, #12]
 8006416:	e04f      	b.n	80064b8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	77bb      	strb	r3, [r7, #30]
 800641c:	e04c      	b.n	80064b8 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800641e:	7ffb      	ldrb	r3, [r7, #31]
 8006420:	2b08      	cmp	r3, #8
 8006422:	d828      	bhi.n	8006476 <UART_SetConfig+0x34e>
 8006424:	a201      	add	r2, pc, #4	; (adr r2, 800642c <UART_SetConfig+0x304>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	08006451 	.word	0x08006451
 8006430:	08006459 	.word	0x08006459
 8006434:	08006461 	.word	0x08006461
 8006438:	08006477 	.word	0x08006477
 800643c:	08006467 	.word	0x08006467
 8006440:	08006477 	.word	0x08006477
 8006444:	08006477 	.word	0x08006477
 8006448:	08006477 	.word	0x08006477
 800644c:	0800646f 	.word	0x0800646f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006450:	f7ff fb26 	bl	8005aa0 <HAL_RCC_GetPCLK1Freq>
 8006454:	61b8      	str	r0, [r7, #24]
        break;
 8006456:	e013      	b.n	8006480 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006458:	f7ff fb44 	bl	8005ae4 <HAL_RCC_GetPCLK2Freq>
 800645c:	61b8      	str	r0, [r7, #24]
        break;
 800645e:	e00f      	b.n	8006480 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006460:	4b1b      	ldr	r3, [pc, #108]	; (80064d0 <UART_SetConfig+0x3a8>)
 8006462:	61bb      	str	r3, [r7, #24]
        break;
 8006464:	e00c      	b.n	8006480 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006466:	f7ff faa5 	bl	80059b4 <HAL_RCC_GetSysClockFreq>
 800646a:	61b8      	str	r0, [r7, #24]
        break;
 800646c:	e008      	b.n	8006480 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800646e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006472:	61bb      	str	r3, [r7, #24]
        break;
 8006474:	e004      	b.n	8006480 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	77bb      	strb	r3, [r7, #30]
        break;
 800647e:	bf00      	nop
    }

    if (pclk != 0U)
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d018      	beq.n	80064b8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	085a      	lsrs	r2, r3, #1
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	441a      	add	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	fbb2 f3f3 	udiv	r3, r2, r3
 8006498:	b29b      	uxth	r3, r3
 800649a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2b0f      	cmp	r3, #15
 80064a0:	d908      	bls.n	80064b4 <UART_SetConfig+0x38c>
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a8:	d204      	bcs.n	80064b4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	60da      	str	r2, [r3, #12]
 80064b2:	e001      	b.n	80064b8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80064c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3720      	adds	r7, #32
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	007a1200 	.word	0x007a1200

080064d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00a      	beq.n	80064fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	f003 0310 	and.w	r3, r3, #16
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01a      	beq.n	80065ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065d2:	d10a      	bne.n	80065ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	605a      	str	r2, [r3, #4]
  }
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af02      	add	r7, sp, #8
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006628:	f7fb fff4 	bl	8002614 <HAL_GetTick>
 800662c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b08      	cmp	r3, #8
 800663a:	d10e      	bne.n	800665a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800663c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f82d 	bl	80066aa <UART_WaitOnFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e023      	b.n	80066a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b04      	cmp	r3, #4
 8006666:	d10e      	bne.n	8006686 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f817 	bl	80066aa <UART_WaitOnFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e00d      	b.n	80066a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b09c      	sub	sp, #112	; 0x70
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	603b      	str	r3, [r7, #0]
 80066b6:	4613      	mov	r3, r2
 80066b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ba:	e0a5      	b.n	8006808 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c2:	f000 80a1 	beq.w	8006808 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c6:	f7fb ffa5 	bl	8002614 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d302      	bcc.n	80066dc <UART_WaitOnFlagUntilTimeout+0x32>
 80066d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d13e      	bne.n	800675a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066e4:	e853 3f00 	ldrex	r3, [r3]
 80066e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066f0:	667b      	str	r3, [r7, #100]	; 0x64
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	461a      	mov	r2, r3
 80066f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006700:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e6      	bne.n	80066dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3308      	adds	r3, #8
 8006714:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006720:	f023 0301 	bic.w	r3, r3, #1
 8006724:	663b      	str	r3, [r7, #96]	; 0x60
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3308      	adds	r3, #8
 800672c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800672e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006730:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800673c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e5      	bne.n	800670e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e067      	b.n	800682a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d04f      	beq.n	8006808 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006776:	d147      	bne.n	8006808 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006780:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	e853 3f00 	ldrex	r3, [r3]
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006796:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	461a      	mov	r2, r3
 800679e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067a0:	637b      	str	r3, [r7, #52]	; 0x34
 80067a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067a8:	e841 2300 	strex	r3, r2, [r1]
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1e6      	bne.n	8006782 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3308      	adds	r3, #8
 80067ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	613b      	str	r3, [r7, #16]
   return(result);
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f023 0301 	bic.w	r3, r3, #1
 80067ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3308      	adds	r3, #8
 80067d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067d4:	623a      	str	r2, [r7, #32]
 80067d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d8:	69f9      	ldr	r1, [r7, #28]
 80067da:	6a3a      	ldr	r2, [r7, #32]
 80067dc:	e841 2300 	strex	r3, r2, [r1]
 80067e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e5      	bne.n	80067b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2220      	movs	r2, #32
 80067ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2220      	movs	r2, #32
 80067f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e010      	b.n	800682a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	69da      	ldr	r2, [r3, #28]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	4013      	ands	r3, r2
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	429a      	cmp	r2, r3
 8006816:	bf0c      	ite	eq
 8006818:	2301      	moveq	r3, #1
 800681a:	2300      	movne	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	461a      	mov	r2, r3
 8006820:	79fb      	ldrb	r3, [r7, #7]
 8006822:	429a      	cmp	r2, r3
 8006824:	f43f af4a 	beq.w	80066bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3770      	adds	r7, #112	; 0x70
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <pow>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	ed2d 8b02 	vpush	{d8}
 800683a:	eeb0 8a40 	vmov.f32	s16, s0
 800683e:	eef0 8a60 	vmov.f32	s17, s1
 8006842:	ec55 4b11 	vmov	r4, r5, d1
 8006846:	f000 f867 	bl	8006918 <__ieee754_pow>
 800684a:	4622      	mov	r2, r4
 800684c:	462b      	mov	r3, r5
 800684e:	4620      	mov	r0, r4
 8006850:	4629      	mov	r1, r5
 8006852:	ec57 6b10 	vmov	r6, r7, d0
 8006856:	f7fa f971 	bl	8000b3c <__aeabi_dcmpun>
 800685a:	2800      	cmp	r0, #0
 800685c:	d13b      	bne.n	80068d6 <pow+0xa2>
 800685e:	ec51 0b18 	vmov	r0, r1, d8
 8006862:	2200      	movs	r2, #0
 8006864:	2300      	movs	r3, #0
 8006866:	f7fa f937 	bl	8000ad8 <__aeabi_dcmpeq>
 800686a:	b1b8      	cbz	r0, 800689c <pow+0x68>
 800686c:	2200      	movs	r2, #0
 800686e:	2300      	movs	r3, #0
 8006870:	4620      	mov	r0, r4
 8006872:	4629      	mov	r1, r5
 8006874:	f7fa f930 	bl	8000ad8 <__aeabi_dcmpeq>
 8006878:	2800      	cmp	r0, #0
 800687a:	d146      	bne.n	800690a <pow+0xd6>
 800687c:	ec45 4b10 	vmov	d0, r4, r5
 8006880:	f000 fe63 	bl	800754a <finite>
 8006884:	b338      	cbz	r0, 80068d6 <pow+0xa2>
 8006886:	2200      	movs	r2, #0
 8006888:	2300      	movs	r3, #0
 800688a:	4620      	mov	r0, r4
 800688c:	4629      	mov	r1, r5
 800688e:	f7fa f92d 	bl	8000aec <__aeabi_dcmplt>
 8006892:	b300      	cbz	r0, 80068d6 <pow+0xa2>
 8006894:	f000 feea 	bl	800766c <__errno>
 8006898:	2322      	movs	r3, #34	; 0x22
 800689a:	e01b      	b.n	80068d4 <pow+0xa0>
 800689c:	ec47 6b10 	vmov	d0, r6, r7
 80068a0:	f000 fe53 	bl	800754a <finite>
 80068a4:	b9e0      	cbnz	r0, 80068e0 <pow+0xac>
 80068a6:	eeb0 0a48 	vmov.f32	s0, s16
 80068aa:	eef0 0a68 	vmov.f32	s1, s17
 80068ae:	f000 fe4c 	bl	800754a <finite>
 80068b2:	b1a8      	cbz	r0, 80068e0 <pow+0xac>
 80068b4:	ec45 4b10 	vmov	d0, r4, r5
 80068b8:	f000 fe47 	bl	800754a <finite>
 80068bc:	b180      	cbz	r0, 80068e0 <pow+0xac>
 80068be:	4632      	mov	r2, r6
 80068c0:	463b      	mov	r3, r7
 80068c2:	4630      	mov	r0, r6
 80068c4:	4639      	mov	r1, r7
 80068c6:	f7fa f939 	bl	8000b3c <__aeabi_dcmpun>
 80068ca:	2800      	cmp	r0, #0
 80068cc:	d0e2      	beq.n	8006894 <pow+0x60>
 80068ce:	f000 fecd 	bl	800766c <__errno>
 80068d2:	2321      	movs	r3, #33	; 0x21
 80068d4:	6003      	str	r3, [r0, #0]
 80068d6:	ecbd 8b02 	vpop	{d8}
 80068da:	ec47 6b10 	vmov	d0, r6, r7
 80068de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068e0:	2200      	movs	r2, #0
 80068e2:	2300      	movs	r3, #0
 80068e4:	4630      	mov	r0, r6
 80068e6:	4639      	mov	r1, r7
 80068e8:	f7fa f8f6 	bl	8000ad8 <__aeabi_dcmpeq>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d0f2      	beq.n	80068d6 <pow+0xa2>
 80068f0:	eeb0 0a48 	vmov.f32	s0, s16
 80068f4:	eef0 0a68 	vmov.f32	s1, s17
 80068f8:	f000 fe27 	bl	800754a <finite>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d0ea      	beq.n	80068d6 <pow+0xa2>
 8006900:	ec45 4b10 	vmov	d0, r4, r5
 8006904:	f000 fe21 	bl	800754a <finite>
 8006908:	e7c3      	b.n	8006892 <pow+0x5e>
 800690a:	4f01      	ldr	r7, [pc, #4]	; (8006910 <pow+0xdc>)
 800690c:	2600      	movs	r6, #0
 800690e:	e7e2      	b.n	80068d6 <pow+0xa2>
 8006910:	3ff00000 	.word	0x3ff00000
 8006914:	00000000 	.word	0x00000000

08006918 <__ieee754_pow>:
 8006918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691c:	ed2d 8b06 	vpush	{d8-d10}
 8006920:	b089      	sub	sp, #36	; 0x24
 8006922:	ed8d 1b00 	vstr	d1, [sp]
 8006926:	e9dd 2900 	ldrd	r2, r9, [sp]
 800692a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800692e:	ea58 0102 	orrs.w	r1, r8, r2
 8006932:	ec57 6b10 	vmov	r6, r7, d0
 8006936:	d115      	bne.n	8006964 <__ieee754_pow+0x4c>
 8006938:	19b3      	adds	r3, r6, r6
 800693a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800693e:	4152      	adcs	r2, r2
 8006940:	4299      	cmp	r1, r3
 8006942:	4b89      	ldr	r3, [pc, #548]	; (8006b68 <__ieee754_pow+0x250>)
 8006944:	4193      	sbcs	r3, r2
 8006946:	f080 84d2 	bcs.w	80072ee <__ieee754_pow+0x9d6>
 800694a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800694e:	4630      	mov	r0, r6
 8006950:	4639      	mov	r1, r7
 8006952:	f7f9 fca3 	bl	800029c <__adddf3>
 8006956:	ec41 0b10 	vmov	d0, r0, r1
 800695a:	b009      	add	sp, #36	; 0x24
 800695c:	ecbd 8b06 	vpop	{d8-d10}
 8006960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006964:	4b81      	ldr	r3, [pc, #516]	; (8006b6c <__ieee754_pow+0x254>)
 8006966:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800696a:	429c      	cmp	r4, r3
 800696c:	ee10 aa10 	vmov	sl, s0
 8006970:	463d      	mov	r5, r7
 8006972:	dc06      	bgt.n	8006982 <__ieee754_pow+0x6a>
 8006974:	d101      	bne.n	800697a <__ieee754_pow+0x62>
 8006976:	2e00      	cmp	r6, #0
 8006978:	d1e7      	bne.n	800694a <__ieee754_pow+0x32>
 800697a:	4598      	cmp	r8, r3
 800697c:	dc01      	bgt.n	8006982 <__ieee754_pow+0x6a>
 800697e:	d10f      	bne.n	80069a0 <__ieee754_pow+0x88>
 8006980:	b172      	cbz	r2, 80069a0 <__ieee754_pow+0x88>
 8006982:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006986:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800698a:	ea55 050a 	orrs.w	r5, r5, sl
 800698e:	d1dc      	bne.n	800694a <__ieee754_pow+0x32>
 8006990:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006994:	18db      	adds	r3, r3, r3
 8006996:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800699a:	4152      	adcs	r2, r2
 800699c:	429d      	cmp	r5, r3
 800699e:	e7d0      	b.n	8006942 <__ieee754_pow+0x2a>
 80069a0:	2d00      	cmp	r5, #0
 80069a2:	da3b      	bge.n	8006a1c <__ieee754_pow+0x104>
 80069a4:	4b72      	ldr	r3, [pc, #456]	; (8006b70 <__ieee754_pow+0x258>)
 80069a6:	4598      	cmp	r8, r3
 80069a8:	dc51      	bgt.n	8006a4e <__ieee754_pow+0x136>
 80069aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80069ae:	4598      	cmp	r8, r3
 80069b0:	f340 84ac 	ble.w	800730c <__ieee754_pow+0x9f4>
 80069b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80069b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80069bc:	2b14      	cmp	r3, #20
 80069be:	dd0f      	ble.n	80069e0 <__ieee754_pow+0xc8>
 80069c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80069c4:	fa22 f103 	lsr.w	r1, r2, r3
 80069c8:	fa01 f303 	lsl.w	r3, r1, r3
 80069cc:	4293      	cmp	r3, r2
 80069ce:	f040 849d 	bne.w	800730c <__ieee754_pow+0x9f4>
 80069d2:	f001 0101 	and.w	r1, r1, #1
 80069d6:	f1c1 0302 	rsb	r3, r1, #2
 80069da:	9304      	str	r3, [sp, #16]
 80069dc:	b182      	cbz	r2, 8006a00 <__ieee754_pow+0xe8>
 80069de:	e05f      	b.n	8006aa0 <__ieee754_pow+0x188>
 80069e0:	2a00      	cmp	r2, #0
 80069e2:	d15b      	bne.n	8006a9c <__ieee754_pow+0x184>
 80069e4:	f1c3 0314 	rsb	r3, r3, #20
 80069e8:	fa48 f103 	asr.w	r1, r8, r3
 80069ec:	fa01 f303 	lsl.w	r3, r1, r3
 80069f0:	4543      	cmp	r3, r8
 80069f2:	f040 8488 	bne.w	8007306 <__ieee754_pow+0x9ee>
 80069f6:	f001 0101 	and.w	r1, r1, #1
 80069fa:	f1c1 0302 	rsb	r3, r1, #2
 80069fe:	9304      	str	r3, [sp, #16]
 8006a00:	4b5c      	ldr	r3, [pc, #368]	; (8006b74 <__ieee754_pow+0x25c>)
 8006a02:	4598      	cmp	r8, r3
 8006a04:	d132      	bne.n	8006a6c <__ieee754_pow+0x154>
 8006a06:	f1b9 0f00 	cmp.w	r9, #0
 8006a0a:	f280 8478 	bge.w	80072fe <__ieee754_pow+0x9e6>
 8006a0e:	4959      	ldr	r1, [pc, #356]	; (8006b74 <__ieee754_pow+0x25c>)
 8006a10:	4632      	mov	r2, r6
 8006a12:	463b      	mov	r3, r7
 8006a14:	2000      	movs	r0, #0
 8006a16:	f7f9 ff21 	bl	800085c <__aeabi_ddiv>
 8006a1a:	e79c      	b.n	8006956 <__ieee754_pow+0x3e>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	9304      	str	r3, [sp, #16]
 8006a20:	2a00      	cmp	r2, #0
 8006a22:	d13d      	bne.n	8006aa0 <__ieee754_pow+0x188>
 8006a24:	4b51      	ldr	r3, [pc, #324]	; (8006b6c <__ieee754_pow+0x254>)
 8006a26:	4598      	cmp	r8, r3
 8006a28:	d1ea      	bne.n	8006a00 <__ieee754_pow+0xe8>
 8006a2a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006a2e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006a32:	ea53 030a 	orrs.w	r3, r3, sl
 8006a36:	f000 845a 	beq.w	80072ee <__ieee754_pow+0x9d6>
 8006a3a:	4b4f      	ldr	r3, [pc, #316]	; (8006b78 <__ieee754_pow+0x260>)
 8006a3c:	429c      	cmp	r4, r3
 8006a3e:	dd08      	ble.n	8006a52 <__ieee754_pow+0x13a>
 8006a40:	f1b9 0f00 	cmp.w	r9, #0
 8006a44:	f2c0 8457 	blt.w	80072f6 <__ieee754_pow+0x9de>
 8006a48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a4c:	e783      	b.n	8006956 <__ieee754_pow+0x3e>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e7e5      	b.n	8006a1e <__ieee754_pow+0x106>
 8006a52:	f1b9 0f00 	cmp.w	r9, #0
 8006a56:	f04f 0000 	mov.w	r0, #0
 8006a5a:	f04f 0100 	mov.w	r1, #0
 8006a5e:	f6bf af7a 	bge.w	8006956 <__ieee754_pow+0x3e>
 8006a62:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006a66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a6a:	e774      	b.n	8006956 <__ieee754_pow+0x3e>
 8006a6c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006a70:	d106      	bne.n	8006a80 <__ieee754_pow+0x168>
 8006a72:	4632      	mov	r2, r6
 8006a74:	463b      	mov	r3, r7
 8006a76:	4630      	mov	r0, r6
 8006a78:	4639      	mov	r1, r7
 8006a7a:	f7f9 fdc5 	bl	8000608 <__aeabi_dmul>
 8006a7e:	e76a      	b.n	8006956 <__ieee754_pow+0x3e>
 8006a80:	4b3e      	ldr	r3, [pc, #248]	; (8006b7c <__ieee754_pow+0x264>)
 8006a82:	4599      	cmp	r9, r3
 8006a84:	d10c      	bne.n	8006aa0 <__ieee754_pow+0x188>
 8006a86:	2d00      	cmp	r5, #0
 8006a88:	db0a      	blt.n	8006aa0 <__ieee754_pow+0x188>
 8006a8a:	ec47 6b10 	vmov	d0, r6, r7
 8006a8e:	b009      	add	sp, #36	; 0x24
 8006a90:	ecbd 8b06 	vpop	{d8-d10}
 8006a94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	f000 bc6c 	b.w	8007374 <__ieee754_sqrt>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9304      	str	r3, [sp, #16]
 8006aa0:	ec47 6b10 	vmov	d0, r6, r7
 8006aa4:	f000 fd48 	bl	8007538 <fabs>
 8006aa8:	ec51 0b10 	vmov	r0, r1, d0
 8006aac:	f1ba 0f00 	cmp.w	sl, #0
 8006ab0:	d129      	bne.n	8006b06 <__ieee754_pow+0x1ee>
 8006ab2:	b124      	cbz	r4, 8006abe <__ieee754_pow+0x1a6>
 8006ab4:	4b2f      	ldr	r3, [pc, #188]	; (8006b74 <__ieee754_pow+0x25c>)
 8006ab6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d123      	bne.n	8006b06 <__ieee754_pow+0x1ee>
 8006abe:	f1b9 0f00 	cmp.w	r9, #0
 8006ac2:	da05      	bge.n	8006ad0 <__ieee754_pow+0x1b8>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	2000      	movs	r0, #0
 8006aca:	492a      	ldr	r1, [pc, #168]	; (8006b74 <__ieee754_pow+0x25c>)
 8006acc:	f7f9 fec6 	bl	800085c <__aeabi_ddiv>
 8006ad0:	2d00      	cmp	r5, #0
 8006ad2:	f6bf af40 	bge.w	8006956 <__ieee754_pow+0x3e>
 8006ad6:	9b04      	ldr	r3, [sp, #16]
 8006ad8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006adc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006ae0:	4323      	orrs	r3, r4
 8006ae2:	d108      	bne.n	8006af6 <__ieee754_pow+0x1de>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4619      	mov	r1, r3
 8006aec:	f7f9 fbd4 	bl	8000298 <__aeabi_dsub>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	e78f      	b.n	8006a16 <__ieee754_pow+0xfe>
 8006af6:	9b04      	ldr	r3, [sp, #16]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	f47f af2c 	bne.w	8006956 <__ieee754_pow+0x3e>
 8006afe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b02:	4619      	mov	r1, r3
 8006b04:	e727      	b.n	8006956 <__ieee754_pow+0x3e>
 8006b06:	0feb      	lsrs	r3, r5, #31
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	9306      	str	r3, [sp, #24]
 8006b0c:	9a06      	ldr	r2, [sp, #24]
 8006b0e:	9b04      	ldr	r3, [sp, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	d102      	bne.n	8006b1a <__ieee754_pow+0x202>
 8006b14:	4632      	mov	r2, r6
 8006b16:	463b      	mov	r3, r7
 8006b18:	e7e6      	b.n	8006ae8 <__ieee754_pow+0x1d0>
 8006b1a:	4b19      	ldr	r3, [pc, #100]	; (8006b80 <__ieee754_pow+0x268>)
 8006b1c:	4598      	cmp	r8, r3
 8006b1e:	f340 80fb 	ble.w	8006d18 <__ieee754_pow+0x400>
 8006b22:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006b26:	4598      	cmp	r8, r3
 8006b28:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <__ieee754_pow+0x260>)
 8006b2a:	dd0c      	ble.n	8006b46 <__ieee754_pow+0x22e>
 8006b2c:	429c      	cmp	r4, r3
 8006b2e:	dc0f      	bgt.n	8006b50 <__ieee754_pow+0x238>
 8006b30:	f1b9 0f00 	cmp.w	r9, #0
 8006b34:	da0f      	bge.n	8006b56 <__ieee754_pow+0x23e>
 8006b36:	2000      	movs	r0, #0
 8006b38:	b009      	add	sp, #36	; 0x24
 8006b3a:	ecbd 8b06 	vpop	{d8-d10}
 8006b3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b42:	f000 bcf0 	b.w	8007526 <__math_oflow>
 8006b46:	429c      	cmp	r4, r3
 8006b48:	dbf2      	blt.n	8006b30 <__ieee754_pow+0x218>
 8006b4a:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <__ieee754_pow+0x25c>)
 8006b4c:	429c      	cmp	r4, r3
 8006b4e:	dd19      	ble.n	8006b84 <__ieee754_pow+0x26c>
 8006b50:	f1b9 0f00 	cmp.w	r9, #0
 8006b54:	dcef      	bgt.n	8006b36 <__ieee754_pow+0x21e>
 8006b56:	2000      	movs	r0, #0
 8006b58:	b009      	add	sp, #36	; 0x24
 8006b5a:	ecbd 8b06 	vpop	{d8-d10}
 8006b5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b62:	f000 bcd7 	b.w	8007514 <__math_uflow>
 8006b66:	bf00      	nop
 8006b68:	fff00000 	.word	0xfff00000
 8006b6c:	7ff00000 	.word	0x7ff00000
 8006b70:	433fffff 	.word	0x433fffff
 8006b74:	3ff00000 	.word	0x3ff00000
 8006b78:	3fefffff 	.word	0x3fefffff
 8006b7c:	3fe00000 	.word	0x3fe00000
 8006b80:	41e00000 	.word	0x41e00000
 8006b84:	4b60      	ldr	r3, [pc, #384]	; (8006d08 <__ieee754_pow+0x3f0>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	f7f9 fb86 	bl	8000298 <__aeabi_dsub>
 8006b8c:	a354      	add	r3, pc, #336	; (adr r3, 8006ce0 <__ieee754_pow+0x3c8>)
 8006b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b92:	4604      	mov	r4, r0
 8006b94:	460d      	mov	r5, r1
 8006b96:	f7f9 fd37 	bl	8000608 <__aeabi_dmul>
 8006b9a:	a353      	add	r3, pc, #332	; (adr r3, 8006ce8 <__ieee754_pow+0x3d0>)
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	4606      	mov	r6, r0
 8006ba2:	460f      	mov	r7, r1
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	f7f9 fd2e 	bl	8000608 <__aeabi_dmul>
 8006bac:	4b57      	ldr	r3, [pc, #348]	; (8006d0c <__ieee754_pow+0x3f4>)
 8006bae:	4682      	mov	sl, r0
 8006bb0:	468b      	mov	fp, r1
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	f7f9 fd26 	bl	8000608 <__aeabi_dmul>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	a14b      	add	r1, pc, #300	; (adr r1, 8006cf0 <__ieee754_pow+0x3d8>)
 8006bc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bc6:	f7f9 fb67 	bl	8000298 <__aeabi_dsub>
 8006bca:	4622      	mov	r2, r4
 8006bcc:	462b      	mov	r3, r5
 8006bce:	f7f9 fd1b 	bl	8000608 <__aeabi_dmul>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	494d      	ldr	r1, [pc, #308]	; (8006d10 <__ieee754_pow+0x3f8>)
 8006bda:	f7f9 fb5d 	bl	8000298 <__aeabi_dsub>
 8006bde:	4622      	mov	r2, r4
 8006be0:	4680      	mov	r8, r0
 8006be2:	4689      	mov	r9, r1
 8006be4:	462b      	mov	r3, r5
 8006be6:	4620      	mov	r0, r4
 8006be8:	4629      	mov	r1, r5
 8006bea:	f7f9 fd0d 	bl	8000608 <__aeabi_dmul>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	f7f9 fd07 	bl	8000608 <__aeabi_dmul>
 8006bfa:	a33f      	add	r3, pc, #252	; (adr r3, 8006cf8 <__ieee754_pow+0x3e0>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f7f9 fd02 	bl	8000608 <__aeabi_dmul>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4650      	mov	r0, sl
 8006c0a:	4659      	mov	r1, fp
 8006c0c:	f7f9 fb44 	bl	8000298 <__aeabi_dsub>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4680      	mov	r8, r0
 8006c16:	4689      	mov	r9, r1
 8006c18:	4630      	mov	r0, r6
 8006c1a:	4639      	mov	r1, r7
 8006c1c:	f7f9 fb3e 	bl	800029c <__adddf3>
 8006c20:	2000      	movs	r0, #0
 8006c22:	4632      	mov	r2, r6
 8006c24:	463b      	mov	r3, r7
 8006c26:	4604      	mov	r4, r0
 8006c28:	460d      	mov	r5, r1
 8006c2a:	f7f9 fb35 	bl	8000298 <__aeabi_dsub>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	4640      	mov	r0, r8
 8006c34:	4649      	mov	r1, r9
 8006c36:	f7f9 fb2f 	bl	8000298 <__aeabi_dsub>
 8006c3a:	9b04      	ldr	r3, [sp, #16]
 8006c3c:	9a06      	ldr	r2, [sp, #24]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	4313      	orrs	r3, r2
 8006c42:	4682      	mov	sl, r0
 8006c44:	468b      	mov	fp, r1
 8006c46:	f040 81e7 	bne.w	8007018 <__ieee754_pow+0x700>
 8006c4a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006d00 <__ieee754_pow+0x3e8>
 8006c4e:	eeb0 8a47 	vmov.f32	s16, s14
 8006c52:	eef0 8a67 	vmov.f32	s17, s15
 8006c56:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006c5a:	2600      	movs	r6, #0
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	463b      	mov	r3, r7
 8006c60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c64:	f7f9 fb18 	bl	8000298 <__aeabi_dsub>
 8006c68:	4622      	mov	r2, r4
 8006c6a:	462b      	mov	r3, r5
 8006c6c:	f7f9 fccc 	bl	8000608 <__aeabi_dmul>
 8006c70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c74:	4680      	mov	r8, r0
 8006c76:	4689      	mov	r9, r1
 8006c78:	4650      	mov	r0, sl
 8006c7a:	4659      	mov	r1, fp
 8006c7c:	f7f9 fcc4 	bl	8000608 <__aeabi_dmul>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4640      	mov	r0, r8
 8006c86:	4649      	mov	r1, r9
 8006c88:	f7f9 fb08 	bl	800029c <__adddf3>
 8006c8c:	4632      	mov	r2, r6
 8006c8e:	463b      	mov	r3, r7
 8006c90:	4680      	mov	r8, r0
 8006c92:	4689      	mov	r9, r1
 8006c94:	4620      	mov	r0, r4
 8006c96:	4629      	mov	r1, r5
 8006c98:	f7f9 fcb6 	bl	8000608 <__aeabi_dmul>
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	460d      	mov	r5, r1
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	4649      	mov	r1, r9
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	f7f9 faf8 	bl	800029c <__adddf3>
 8006cac:	4b19      	ldr	r3, [pc, #100]	; (8006d14 <__ieee754_pow+0x3fc>)
 8006cae:	4299      	cmp	r1, r3
 8006cb0:	ec45 4b19 	vmov	d9, r4, r5
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	460f      	mov	r7, r1
 8006cb8:	468b      	mov	fp, r1
 8006cba:	f340 82f1 	ble.w	80072a0 <__ieee754_pow+0x988>
 8006cbe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006cc2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006cc6:	4303      	orrs	r3, r0
 8006cc8:	f000 81e4 	beq.w	8007094 <__ieee754_pow+0x77c>
 8006ccc:	ec51 0b18 	vmov	r0, r1, d8
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f7f9 ff0a 	bl	8000aec <__aeabi_dcmplt>
 8006cd8:	3800      	subs	r0, #0
 8006cda:	bf18      	it	ne
 8006cdc:	2001      	movne	r0, #1
 8006cde:	e72b      	b.n	8006b38 <__ieee754_pow+0x220>
 8006ce0:	60000000 	.word	0x60000000
 8006ce4:	3ff71547 	.word	0x3ff71547
 8006ce8:	f85ddf44 	.word	0xf85ddf44
 8006cec:	3e54ae0b 	.word	0x3e54ae0b
 8006cf0:	55555555 	.word	0x55555555
 8006cf4:	3fd55555 	.word	0x3fd55555
 8006cf8:	652b82fe 	.word	0x652b82fe
 8006cfc:	3ff71547 	.word	0x3ff71547
 8006d00:	00000000 	.word	0x00000000
 8006d04:	bff00000 	.word	0xbff00000
 8006d08:	3ff00000 	.word	0x3ff00000
 8006d0c:	3fd00000 	.word	0x3fd00000
 8006d10:	3fe00000 	.word	0x3fe00000
 8006d14:	408fffff 	.word	0x408fffff
 8006d18:	4bd5      	ldr	r3, [pc, #852]	; (8007070 <__ieee754_pow+0x758>)
 8006d1a:	402b      	ands	r3, r5
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	b92b      	cbnz	r3, 8006d2c <__ieee754_pow+0x414>
 8006d20:	4bd4      	ldr	r3, [pc, #848]	; (8007074 <__ieee754_pow+0x75c>)
 8006d22:	f7f9 fc71 	bl	8000608 <__aeabi_dmul>
 8006d26:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	1523      	asrs	r3, r4, #20
 8006d2e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d32:	4413      	add	r3, r2
 8006d34:	9305      	str	r3, [sp, #20]
 8006d36:	4bd0      	ldr	r3, [pc, #832]	; (8007078 <__ieee754_pow+0x760>)
 8006d38:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006d3c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006d40:	429c      	cmp	r4, r3
 8006d42:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006d46:	dd08      	ble.n	8006d5a <__ieee754_pow+0x442>
 8006d48:	4bcc      	ldr	r3, [pc, #816]	; (800707c <__ieee754_pow+0x764>)
 8006d4a:	429c      	cmp	r4, r3
 8006d4c:	f340 8162 	ble.w	8007014 <__ieee754_pow+0x6fc>
 8006d50:	9b05      	ldr	r3, [sp, #20]
 8006d52:	3301      	adds	r3, #1
 8006d54:	9305      	str	r3, [sp, #20]
 8006d56:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006d5a:	2400      	movs	r4, #0
 8006d5c:	00e3      	lsls	r3, r4, #3
 8006d5e:	9307      	str	r3, [sp, #28]
 8006d60:	4bc7      	ldr	r3, [pc, #796]	; (8007080 <__ieee754_pow+0x768>)
 8006d62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d66:	ed93 7b00 	vldr	d7, [r3]
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	ec53 2b17 	vmov	r2, r3, d7
 8006d70:	eeb0 9a47 	vmov.f32	s18, s14
 8006d74:	eef0 9a67 	vmov.f32	s19, s15
 8006d78:	4682      	mov	sl, r0
 8006d7a:	f7f9 fa8d 	bl	8000298 <__aeabi_dsub>
 8006d7e:	4652      	mov	r2, sl
 8006d80:	4606      	mov	r6, r0
 8006d82:	460f      	mov	r7, r1
 8006d84:	462b      	mov	r3, r5
 8006d86:	ec51 0b19 	vmov	r0, r1, d9
 8006d8a:	f7f9 fa87 	bl	800029c <__adddf3>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	2000      	movs	r0, #0
 8006d94:	49bb      	ldr	r1, [pc, #748]	; (8007084 <__ieee754_pow+0x76c>)
 8006d96:	f7f9 fd61 	bl	800085c <__aeabi_ddiv>
 8006d9a:	ec41 0b1a 	vmov	d10, r0, r1
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4630      	mov	r0, r6
 8006da4:	4639      	mov	r1, r7
 8006da6:	f7f9 fc2f 	bl	8000608 <__aeabi_dmul>
 8006daa:	2300      	movs	r3, #0
 8006dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006db0:	9302      	str	r3, [sp, #8]
 8006db2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006db6:	46ab      	mov	fp, r5
 8006db8:	106d      	asrs	r5, r5, #1
 8006dba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006dbe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006dc2:	ec41 0b18 	vmov	d8, r0, r1
 8006dc6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006dca:	2200      	movs	r2, #0
 8006dcc:	4640      	mov	r0, r8
 8006dce:	4649      	mov	r1, r9
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	461d      	mov	r5, r3
 8006dd4:	f7f9 fc18 	bl	8000608 <__aeabi_dmul>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4630      	mov	r0, r6
 8006dde:	4639      	mov	r1, r7
 8006de0:	f7f9 fa5a 	bl	8000298 <__aeabi_dsub>
 8006de4:	ec53 2b19 	vmov	r2, r3, d9
 8006de8:	4606      	mov	r6, r0
 8006dea:	460f      	mov	r7, r1
 8006dec:	4620      	mov	r0, r4
 8006dee:	4629      	mov	r1, r5
 8006df0:	f7f9 fa52 	bl	8000298 <__aeabi_dsub>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	4650      	mov	r0, sl
 8006dfa:	4659      	mov	r1, fp
 8006dfc:	f7f9 fa4c 	bl	8000298 <__aeabi_dsub>
 8006e00:	4642      	mov	r2, r8
 8006e02:	464b      	mov	r3, r9
 8006e04:	f7f9 fc00 	bl	8000608 <__aeabi_dmul>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	4639      	mov	r1, r7
 8006e10:	f7f9 fa42 	bl	8000298 <__aeabi_dsub>
 8006e14:	ec53 2b1a 	vmov	r2, r3, d10
 8006e18:	f7f9 fbf6 	bl	8000608 <__aeabi_dmul>
 8006e1c:	ec53 2b18 	vmov	r2, r3, d8
 8006e20:	ec41 0b19 	vmov	d9, r0, r1
 8006e24:	ec51 0b18 	vmov	r0, r1, d8
 8006e28:	f7f9 fbee 	bl	8000608 <__aeabi_dmul>
 8006e2c:	a37c      	add	r3, pc, #496	; (adr r3, 8007020 <__ieee754_pow+0x708>)
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	4604      	mov	r4, r0
 8006e34:	460d      	mov	r5, r1
 8006e36:	f7f9 fbe7 	bl	8000608 <__aeabi_dmul>
 8006e3a:	a37b      	add	r3, pc, #492	; (adr r3, 8007028 <__ieee754_pow+0x710>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 fa2c 	bl	800029c <__adddf3>
 8006e44:	4622      	mov	r2, r4
 8006e46:	462b      	mov	r3, r5
 8006e48:	f7f9 fbde 	bl	8000608 <__aeabi_dmul>
 8006e4c:	a378      	add	r3, pc, #480	; (adr r3, 8007030 <__ieee754_pow+0x718>)
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f7f9 fa23 	bl	800029c <__adddf3>
 8006e56:	4622      	mov	r2, r4
 8006e58:	462b      	mov	r3, r5
 8006e5a:	f7f9 fbd5 	bl	8000608 <__aeabi_dmul>
 8006e5e:	a376      	add	r3, pc, #472	; (adr r3, 8007038 <__ieee754_pow+0x720>)
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f7f9 fa1a 	bl	800029c <__adddf3>
 8006e68:	4622      	mov	r2, r4
 8006e6a:	462b      	mov	r3, r5
 8006e6c:	f7f9 fbcc 	bl	8000608 <__aeabi_dmul>
 8006e70:	a373      	add	r3, pc, #460	; (adr r3, 8007040 <__ieee754_pow+0x728>)
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	f7f9 fa11 	bl	800029c <__adddf3>
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	462b      	mov	r3, r5
 8006e7e:	f7f9 fbc3 	bl	8000608 <__aeabi_dmul>
 8006e82:	a371      	add	r3, pc, #452	; (adr r3, 8007048 <__ieee754_pow+0x730>)
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	f7f9 fa08 	bl	800029c <__adddf3>
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	4606      	mov	r6, r0
 8006e90:	460f      	mov	r7, r1
 8006e92:	462b      	mov	r3, r5
 8006e94:	4620      	mov	r0, r4
 8006e96:	4629      	mov	r1, r5
 8006e98:	f7f9 fbb6 	bl	8000608 <__aeabi_dmul>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	4639      	mov	r1, r7
 8006ea4:	f7f9 fbb0 	bl	8000608 <__aeabi_dmul>
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	4604      	mov	r4, r0
 8006eac:	460d      	mov	r5, r1
 8006eae:	464b      	mov	r3, r9
 8006eb0:	ec51 0b18 	vmov	r0, r1, d8
 8006eb4:	f7f9 f9f2 	bl	800029c <__adddf3>
 8006eb8:	ec53 2b19 	vmov	r2, r3, d9
 8006ebc:	f7f9 fba4 	bl	8000608 <__aeabi_dmul>
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	462b      	mov	r3, r5
 8006ec4:	f7f9 f9ea 	bl	800029c <__adddf3>
 8006ec8:	4642      	mov	r2, r8
 8006eca:	4682      	mov	sl, r0
 8006ecc:	468b      	mov	fp, r1
 8006ece:	464b      	mov	r3, r9
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	f7f9 fb98 	bl	8000608 <__aeabi_dmul>
 8006ed8:	4b6b      	ldr	r3, [pc, #428]	; (8007088 <__ieee754_pow+0x770>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	4606      	mov	r6, r0
 8006ede:	460f      	mov	r7, r1
 8006ee0:	f7f9 f9dc 	bl	800029c <__adddf3>
 8006ee4:	4652      	mov	r2, sl
 8006ee6:	465b      	mov	r3, fp
 8006ee8:	f7f9 f9d8 	bl	800029c <__adddf3>
 8006eec:	2000      	movs	r0, #0
 8006eee:	4604      	mov	r4, r0
 8006ef0:	460d      	mov	r5, r1
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	4649      	mov	r1, r9
 8006efa:	f7f9 fb85 	bl	8000608 <__aeabi_dmul>
 8006efe:	4b62      	ldr	r3, [pc, #392]	; (8007088 <__ieee754_pow+0x770>)
 8006f00:	4680      	mov	r8, r0
 8006f02:	4689      	mov	r9, r1
 8006f04:	2200      	movs	r2, #0
 8006f06:	4620      	mov	r0, r4
 8006f08:	4629      	mov	r1, r5
 8006f0a:	f7f9 f9c5 	bl	8000298 <__aeabi_dsub>
 8006f0e:	4632      	mov	r2, r6
 8006f10:	463b      	mov	r3, r7
 8006f12:	f7f9 f9c1 	bl	8000298 <__aeabi_dsub>
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4650      	mov	r0, sl
 8006f1c:	4659      	mov	r1, fp
 8006f1e:	f7f9 f9bb 	bl	8000298 <__aeabi_dsub>
 8006f22:	ec53 2b18 	vmov	r2, r3, d8
 8006f26:	f7f9 fb6f 	bl	8000608 <__aeabi_dmul>
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	4606      	mov	r6, r0
 8006f2e:	460f      	mov	r7, r1
 8006f30:	462b      	mov	r3, r5
 8006f32:	ec51 0b19 	vmov	r0, r1, d9
 8006f36:	f7f9 fb67 	bl	8000608 <__aeabi_dmul>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4630      	mov	r0, r6
 8006f40:	4639      	mov	r1, r7
 8006f42:	f7f9 f9ab 	bl	800029c <__adddf3>
 8006f46:	4606      	mov	r6, r0
 8006f48:	460f      	mov	r7, r1
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4640      	mov	r0, r8
 8006f50:	4649      	mov	r1, r9
 8006f52:	f7f9 f9a3 	bl	800029c <__adddf3>
 8006f56:	a33e      	add	r3, pc, #248	; (adr r3, 8007050 <__ieee754_pow+0x738>)
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	4604      	mov	r4, r0
 8006f60:	460d      	mov	r5, r1
 8006f62:	f7f9 fb51 	bl	8000608 <__aeabi_dmul>
 8006f66:	4642      	mov	r2, r8
 8006f68:	ec41 0b18 	vmov	d8, r0, r1
 8006f6c:	464b      	mov	r3, r9
 8006f6e:	4620      	mov	r0, r4
 8006f70:	4629      	mov	r1, r5
 8006f72:	f7f9 f991 	bl	8000298 <__aeabi_dsub>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	f7f9 f98b 	bl	8000298 <__aeabi_dsub>
 8006f82:	a335      	add	r3, pc, #212	; (adr r3, 8007058 <__ieee754_pow+0x740>)
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f7f9 fb3e 	bl	8000608 <__aeabi_dmul>
 8006f8c:	a334      	add	r3, pc, #208	; (adr r3, 8007060 <__ieee754_pow+0x748>)
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	4606      	mov	r6, r0
 8006f94:	460f      	mov	r7, r1
 8006f96:	4620      	mov	r0, r4
 8006f98:	4629      	mov	r1, r5
 8006f9a:	f7f9 fb35 	bl	8000608 <__aeabi_dmul>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	f7f9 f979 	bl	800029c <__adddf3>
 8006faa:	9a07      	ldr	r2, [sp, #28]
 8006fac:	4b37      	ldr	r3, [pc, #220]	; (800708c <__ieee754_pow+0x774>)
 8006fae:	4413      	add	r3, r2
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f7f9 f972 	bl	800029c <__adddf3>
 8006fb8:	4682      	mov	sl, r0
 8006fba:	9805      	ldr	r0, [sp, #20]
 8006fbc:	468b      	mov	fp, r1
 8006fbe:	f7f9 fab9 	bl	8000534 <__aeabi_i2d>
 8006fc2:	9a07      	ldr	r2, [sp, #28]
 8006fc4:	4b32      	ldr	r3, [pc, #200]	; (8007090 <__ieee754_pow+0x778>)
 8006fc6:	4413      	add	r3, r2
 8006fc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fcc:	4606      	mov	r6, r0
 8006fce:	460f      	mov	r7, r1
 8006fd0:	4652      	mov	r2, sl
 8006fd2:	465b      	mov	r3, fp
 8006fd4:	ec51 0b18 	vmov	r0, r1, d8
 8006fd8:	f7f9 f960 	bl	800029c <__adddf3>
 8006fdc:	4642      	mov	r2, r8
 8006fde:	464b      	mov	r3, r9
 8006fe0:	f7f9 f95c 	bl	800029c <__adddf3>
 8006fe4:	4632      	mov	r2, r6
 8006fe6:	463b      	mov	r3, r7
 8006fe8:	f7f9 f958 	bl	800029c <__adddf3>
 8006fec:	2000      	movs	r0, #0
 8006fee:	4632      	mov	r2, r6
 8006ff0:	463b      	mov	r3, r7
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	460d      	mov	r5, r1
 8006ff6:	f7f9 f94f 	bl	8000298 <__aeabi_dsub>
 8006ffa:	4642      	mov	r2, r8
 8006ffc:	464b      	mov	r3, r9
 8006ffe:	f7f9 f94b 	bl	8000298 <__aeabi_dsub>
 8007002:	ec53 2b18 	vmov	r2, r3, d8
 8007006:	f7f9 f947 	bl	8000298 <__aeabi_dsub>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4650      	mov	r0, sl
 8007010:	4659      	mov	r1, fp
 8007012:	e610      	b.n	8006c36 <__ieee754_pow+0x31e>
 8007014:	2401      	movs	r4, #1
 8007016:	e6a1      	b.n	8006d5c <__ieee754_pow+0x444>
 8007018:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007068 <__ieee754_pow+0x750>
 800701c:	e617      	b.n	8006c4e <__ieee754_pow+0x336>
 800701e:	bf00      	nop
 8007020:	4a454eef 	.word	0x4a454eef
 8007024:	3fca7e28 	.word	0x3fca7e28
 8007028:	93c9db65 	.word	0x93c9db65
 800702c:	3fcd864a 	.word	0x3fcd864a
 8007030:	a91d4101 	.word	0xa91d4101
 8007034:	3fd17460 	.word	0x3fd17460
 8007038:	518f264d 	.word	0x518f264d
 800703c:	3fd55555 	.word	0x3fd55555
 8007040:	db6fabff 	.word	0xdb6fabff
 8007044:	3fdb6db6 	.word	0x3fdb6db6
 8007048:	33333303 	.word	0x33333303
 800704c:	3fe33333 	.word	0x3fe33333
 8007050:	e0000000 	.word	0xe0000000
 8007054:	3feec709 	.word	0x3feec709
 8007058:	dc3a03fd 	.word	0xdc3a03fd
 800705c:	3feec709 	.word	0x3feec709
 8007060:	145b01f5 	.word	0x145b01f5
 8007064:	be3e2fe0 	.word	0xbe3e2fe0
 8007068:	00000000 	.word	0x00000000
 800706c:	3ff00000 	.word	0x3ff00000
 8007070:	7ff00000 	.word	0x7ff00000
 8007074:	43400000 	.word	0x43400000
 8007078:	0003988e 	.word	0x0003988e
 800707c:	000bb679 	.word	0x000bb679
 8007080:	0800a288 	.word	0x0800a288
 8007084:	3ff00000 	.word	0x3ff00000
 8007088:	40080000 	.word	0x40080000
 800708c:	0800a2a8 	.word	0x0800a2a8
 8007090:	0800a298 	.word	0x0800a298
 8007094:	a3b5      	add	r3, pc, #724	; (adr r3, 800736c <__ieee754_pow+0xa54>)
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	4640      	mov	r0, r8
 800709c:	4649      	mov	r1, r9
 800709e:	f7f9 f8fd 	bl	800029c <__adddf3>
 80070a2:	4622      	mov	r2, r4
 80070a4:	ec41 0b1a 	vmov	d10, r0, r1
 80070a8:	462b      	mov	r3, r5
 80070aa:	4630      	mov	r0, r6
 80070ac:	4639      	mov	r1, r7
 80070ae:	f7f9 f8f3 	bl	8000298 <__aeabi_dsub>
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	ec51 0b1a 	vmov	r0, r1, d10
 80070ba:	f7f9 fd35 	bl	8000b28 <__aeabi_dcmpgt>
 80070be:	2800      	cmp	r0, #0
 80070c0:	f47f ae04 	bne.w	8006ccc <__ieee754_pow+0x3b4>
 80070c4:	4aa4      	ldr	r2, [pc, #656]	; (8007358 <__ieee754_pow+0xa40>)
 80070c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070ca:	4293      	cmp	r3, r2
 80070cc:	f340 8108 	ble.w	80072e0 <__ieee754_pow+0x9c8>
 80070d0:	151b      	asrs	r3, r3, #20
 80070d2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80070d6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80070da:	fa4a f303 	asr.w	r3, sl, r3
 80070de:	445b      	add	r3, fp
 80070e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80070e4:	4e9d      	ldr	r6, [pc, #628]	; (800735c <__ieee754_pow+0xa44>)
 80070e6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80070ea:	4116      	asrs	r6, r2
 80070ec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80070f0:	2000      	movs	r0, #0
 80070f2:	ea23 0106 	bic.w	r1, r3, r6
 80070f6:	f1c2 0214 	rsb	r2, r2, #20
 80070fa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80070fe:	fa4a fa02 	asr.w	sl, sl, r2
 8007102:	f1bb 0f00 	cmp.w	fp, #0
 8007106:	4602      	mov	r2, r0
 8007108:	460b      	mov	r3, r1
 800710a:	4620      	mov	r0, r4
 800710c:	4629      	mov	r1, r5
 800710e:	bfb8      	it	lt
 8007110:	f1ca 0a00 	rsblt	sl, sl, #0
 8007114:	f7f9 f8c0 	bl	8000298 <__aeabi_dsub>
 8007118:	ec41 0b19 	vmov	d9, r0, r1
 800711c:	4642      	mov	r2, r8
 800711e:	464b      	mov	r3, r9
 8007120:	ec51 0b19 	vmov	r0, r1, d9
 8007124:	f7f9 f8ba 	bl	800029c <__adddf3>
 8007128:	a37b      	add	r3, pc, #492	; (adr r3, 8007318 <__ieee754_pow+0xa00>)
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	2000      	movs	r0, #0
 8007130:	4604      	mov	r4, r0
 8007132:	460d      	mov	r5, r1
 8007134:	f7f9 fa68 	bl	8000608 <__aeabi_dmul>
 8007138:	ec53 2b19 	vmov	r2, r3, d9
 800713c:	4606      	mov	r6, r0
 800713e:	460f      	mov	r7, r1
 8007140:	4620      	mov	r0, r4
 8007142:	4629      	mov	r1, r5
 8007144:	f7f9 f8a8 	bl	8000298 <__aeabi_dsub>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	4640      	mov	r0, r8
 800714e:	4649      	mov	r1, r9
 8007150:	f7f9 f8a2 	bl	8000298 <__aeabi_dsub>
 8007154:	a372      	add	r3, pc, #456	; (adr r3, 8007320 <__ieee754_pow+0xa08>)
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	f7f9 fa55 	bl	8000608 <__aeabi_dmul>
 800715e:	a372      	add	r3, pc, #456	; (adr r3, 8007328 <__ieee754_pow+0xa10>)
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	4680      	mov	r8, r0
 8007166:	4689      	mov	r9, r1
 8007168:	4620      	mov	r0, r4
 800716a:	4629      	mov	r1, r5
 800716c:	f7f9 fa4c 	bl	8000608 <__aeabi_dmul>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4640      	mov	r0, r8
 8007176:	4649      	mov	r1, r9
 8007178:	f7f9 f890 	bl	800029c <__adddf3>
 800717c:	4604      	mov	r4, r0
 800717e:	460d      	mov	r5, r1
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4630      	mov	r0, r6
 8007186:	4639      	mov	r1, r7
 8007188:	f7f9 f888 	bl	800029c <__adddf3>
 800718c:	4632      	mov	r2, r6
 800718e:	463b      	mov	r3, r7
 8007190:	4680      	mov	r8, r0
 8007192:	4689      	mov	r9, r1
 8007194:	f7f9 f880 	bl	8000298 <__aeabi_dsub>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	4620      	mov	r0, r4
 800719e:	4629      	mov	r1, r5
 80071a0:	f7f9 f87a 	bl	8000298 <__aeabi_dsub>
 80071a4:	4642      	mov	r2, r8
 80071a6:	4606      	mov	r6, r0
 80071a8:	460f      	mov	r7, r1
 80071aa:	464b      	mov	r3, r9
 80071ac:	4640      	mov	r0, r8
 80071ae:	4649      	mov	r1, r9
 80071b0:	f7f9 fa2a 	bl	8000608 <__aeabi_dmul>
 80071b4:	a35e      	add	r3, pc, #376	; (adr r3, 8007330 <__ieee754_pow+0xa18>)
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	4604      	mov	r4, r0
 80071bc:	460d      	mov	r5, r1
 80071be:	f7f9 fa23 	bl	8000608 <__aeabi_dmul>
 80071c2:	a35d      	add	r3, pc, #372	; (adr r3, 8007338 <__ieee754_pow+0xa20>)
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f7f9 f866 	bl	8000298 <__aeabi_dsub>
 80071cc:	4622      	mov	r2, r4
 80071ce:	462b      	mov	r3, r5
 80071d0:	f7f9 fa1a 	bl	8000608 <__aeabi_dmul>
 80071d4:	a35a      	add	r3, pc, #360	; (adr r3, 8007340 <__ieee754_pow+0xa28>)
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	f7f9 f85f 	bl	800029c <__adddf3>
 80071de:	4622      	mov	r2, r4
 80071e0:	462b      	mov	r3, r5
 80071e2:	f7f9 fa11 	bl	8000608 <__aeabi_dmul>
 80071e6:	a358      	add	r3, pc, #352	; (adr r3, 8007348 <__ieee754_pow+0xa30>)
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	f7f9 f854 	bl	8000298 <__aeabi_dsub>
 80071f0:	4622      	mov	r2, r4
 80071f2:	462b      	mov	r3, r5
 80071f4:	f7f9 fa08 	bl	8000608 <__aeabi_dmul>
 80071f8:	a355      	add	r3, pc, #340	; (adr r3, 8007350 <__ieee754_pow+0xa38>)
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	f7f9 f84d 	bl	800029c <__adddf3>
 8007202:	4622      	mov	r2, r4
 8007204:	462b      	mov	r3, r5
 8007206:	f7f9 f9ff 	bl	8000608 <__aeabi_dmul>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	4640      	mov	r0, r8
 8007210:	4649      	mov	r1, r9
 8007212:	f7f9 f841 	bl	8000298 <__aeabi_dsub>
 8007216:	4604      	mov	r4, r0
 8007218:	460d      	mov	r5, r1
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4640      	mov	r0, r8
 8007220:	4649      	mov	r1, r9
 8007222:	f7f9 f9f1 	bl	8000608 <__aeabi_dmul>
 8007226:	2200      	movs	r2, #0
 8007228:	ec41 0b19 	vmov	d9, r0, r1
 800722c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007230:	4620      	mov	r0, r4
 8007232:	4629      	mov	r1, r5
 8007234:	f7f9 f830 	bl	8000298 <__aeabi_dsub>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	ec51 0b19 	vmov	r0, r1, d9
 8007240:	f7f9 fb0c 	bl	800085c <__aeabi_ddiv>
 8007244:	4632      	mov	r2, r6
 8007246:	4604      	mov	r4, r0
 8007248:	460d      	mov	r5, r1
 800724a:	463b      	mov	r3, r7
 800724c:	4640      	mov	r0, r8
 800724e:	4649      	mov	r1, r9
 8007250:	f7f9 f9da 	bl	8000608 <__aeabi_dmul>
 8007254:	4632      	mov	r2, r6
 8007256:	463b      	mov	r3, r7
 8007258:	f7f9 f820 	bl	800029c <__adddf3>
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	4620      	mov	r0, r4
 8007262:	4629      	mov	r1, r5
 8007264:	f7f9 f818 	bl	8000298 <__aeabi_dsub>
 8007268:	4642      	mov	r2, r8
 800726a:	464b      	mov	r3, r9
 800726c:	f7f9 f814 	bl	8000298 <__aeabi_dsub>
 8007270:	460b      	mov	r3, r1
 8007272:	4602      	mov	r2, r0
 8007274:	493a      	ldr	r1, [pc, #232]	; (8007360 <__ieee754_pow+0xa48>)
 8007276:	2000      	movs	r0, #0
 8007278:	f7f9 f80e 	bl	8000298 <__aeabi_dsub>
 800727c:	ec41 0b10 	vmov	d0, r0, r1
 8007280:	ee10 3a90 	vmov	r3, s1
 8007284:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800728c:	da2b      	bge.n	80072e6 <__ieee754_pow+0x9ce>
 800728e:	4650      	mov	r0, sl
 8007290:	f000 f966 	bl	8007560 <scalbn>
 8007294:	ec51 0b10 	vmov	r0, r1, d0
 8007298:	ec53 2b18 	vmov	r2, r3, d8
 800729c:	f7ff bbed 	b.w	8006a7a <__ieee754_pow+0x162>
 80072a0:	4b30      	ldr	r3, [pc, #192]	; (8007364 <__ieee754_pow+0xa4c>)
 80072a2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80072a6:	429e      	cmp	r6, r3
 80072a8:	f77f af0c 	ble.w	80070c4 <__ieee754_pow+0x7ac>
 80072ac:	4b2e      	ldr	r3, [pc, #184]	; (8007368 <__ieee754_pow+0xa50>)
 80072ae:	440b      	add	r3, r1
 80072b0:	4303      	orrs	r3, r0
 80072b2:	d009      	beq.n	80072c8 <__ieee754_pow+0x9b0>
 80072b4:	ec51 0b18 	vmov	r0, r1, d8
 80072b8:	2200      	movs	r2, #0
 80072ba:	2300      	movs	r3, #0
 80072bc:	f7f9 fc16 	bl	8000aec <__aeabi_dcmplt>
 80072c0:	3800      	subs	r0, #0
 80072c2:	bf18      	it	ne
 80072c4:	2001      	movne	r0, #1
 80072c6:	e447      	b.n	8006b58 <__ieee754_pow+0x240>
 80072c8:	4622      	mov	r2, r4
 80072ca:	462b      	mov	r3, r5
 80072cc:	f7f8 ffe4 	bl	8000298 <__aeabi_dsub>
 80072d0:	4642      	mov	r2, r8
 80072d2:	464b      	mov	r3, r9
 80072d4:	f7f9 fc1e 	bl	8000b14 <__aeabi_dcmpge>
 80072d8:	2800      	cmp	r0, #0
 80072da:	f43f aef3 	beq.w	80070c4 <__ieee754_pow+0x7ac>
 80072de:	e7e9      	b.n	80072b4 <__ieee754_pow+0x99c>
 80072e0:	f04f 0a00 	mov.w	sl, #0
 80072e4:	e71a      	b.n	800711c <__ieee754_pow+0x804>
 80072e6:	ec51 0b10 	vmov	r0, r1, d0
 80072ea:	4619      	mov	r1, r3
 80072ec:	e7d4      	b.n	8007298 <__ieee754_pow+0x980>
 80072ee:	491c      	ldr	r1, [pc, #112]	; (8007360 <__ieee754_pow+0xa48>)
 80072f0:	2000      	movs	r0, #0
 80072f2:	f7ff bb30 	b.w	8006956 <__ieee754_pow+0x3e>
 80072f6:	2000      	movs	r0, #0
 80072f8:	2100      	movs	r1, #0
 80072fa:	f7ff bb2c 	b.w	8006956 <__ieee754_pow+0x3e>
 80072fe:	4630      	mov	r0, r6
 8007300:	4639      	mov	r1, r7
 8007302:	f7ff bb28 	b.w	8006956 <__ieee754_pow+0x3e>
 8007306:	9204      	str	r2, [sp, #16]
 8007308:	f7ff bb7a 	b.w	8006a00 <__ieee754_pow+0xe8>
 800730c:	2300      	movs	r3, #0
 800730e:	f7ff bb64 	b.w	80069da <__ieee754_pow+0xc2>
 8007312:	bf00      	nop
 8007314:	f3af 8000 	nop.w
 8007318:	00000000 	.word	0x00000000
 800731c:	3fe62e43 	.word	0x3fe62e43
 8007320:	fefa39ef 	.word	0xfefa39ef
 8007324:	3fe62e42 	.word	0x3fe62e42
 8007328:	0ca86c39 	.word	0x0ca86c39
 800732c:	be205c61 	.word	0xbe205c61
 8007330:	72bea4d0 	.word	0x72bea4d0
 8007334:	3e663769 	.word	0x3e663769
 8007338:	c5d26bf1 	.word	0xc5d26bf1
 800733c:	3ebbbd41 	.word	0x3ebbbd41
 8007340:	af25de2c 	.word	0xaf25de2c
 8007344:	3f11566a 	.word	0x3f11566a
 8007348:	16bebd93 	.word	0x16bebd93
 800734c:	3f66c16c 	.word	0x3f66c16c
 8007350:	5555553e 	.word	0x5555553e
 8007354:	3fc55555 	.word	0x3fc55555
 8007358:	3fe00000 	.word	0x3fe00000
 800735c:	000fffff 	.word	0x000fffff
 8007360:	3ff00000 	.word	0x3ff00000
 8007364:	4090cbff 	.word	0x4090cbff
 8007368:	3f6f3400 	.word	0x3f6f3400
 800736c:	652b82fe 	.word	0x652b82fe
 8007370:	3c971547 	.word	0x3c971547

08007374 <__ieee754_sqrt>:
 8007374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007378:	ec55 4b10 	vmov	r4, r5, d0
 800737c:	4e55      	ldr	r6, [pc, #340]	; (80074d4 <__ieee754_sqrt+0x160>)
 800737e:	43ae      	bics	r6, r5
 8007380:	ee10 0a10 	vmov	r0, s0
 8007384:	ee10 3a10 	vmov	r3, s0
 8007388:	462a      	mov	r2, r5
 800738a:	4629      	mov	r1, r5
 800738c:	d110      	bne.n	80073b0 <__ieee754_sqrt+0x3c>
 800738e:	ee10 2a10 	vmov	r2, s0
 8007392:	462b      	mov	r3, r5
 8007394:	f7f9 f938 	bl	8000608 <__aeabi_dmul>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4620      	mov	r0, r4
 800739e:	4629      	mov	r1, r5
 80073a0:	f7f8 ff7c 	bl	800029c <__adddf3>
 80073a4:	4604      	mov	r4, r0
 80073a6:	460d      	mov	r5, r1
 80073a8:	ec45 4b10 	vmov	d0, r4, r5
 80073ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b0:	2d00      	cmp	r5, #0
 80073b2:	dc10      	bgt.n	80073d6 <__ieee754_sqrt+0x62>
 80073b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80073b8:	4330      	orrs	r0, r6
 80073ba:	d0f5      	beq.n	80073a8 <__ieee754_sqrt+0x34>
 80073bc:	b15d      	cbz	r5, 80073d6 <__ieee754_sqrt+0x62>
 80073be:	ee10 2a10 	vmov	r2, s0
 80073c2:	462b      	mov	r3, r5
 80073c4:	ee10 0a10 	vmov	r0, s0
 80073c8:	f7f8 ff66 	bl	8000298 <__aeabi_dsub>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	f7f9 fa44 	bl	800085c <__aeabi_ddiv>
 80073d4:	e7e6      	b.n	80073a4 <__ieee754_sqrt+0x30>
 80073d6:	1512      	asrs	r2, r2, #20
 80073d8:	d074      	beq.n	80074c4 <__ieee754_sqrt+0x150>
 80073da:	07d4      	lsls	r4, r2, #31
 80073dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80073e0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80073e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80073e8:	bf5e      	ittt	pl
 80073ea:	0fda      	lsrpl	r2, r3, #31
 80073ec:	005b      	lslpl	r3, r3, #1
 80073ee:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80073f2:	2400      	movs	r4, #0
 80073f4:	0fda      	lsrs	r2, r3, #31
 80073f6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80073fa:	107f      	asrs	r7, r7, #1
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	2516      	movs	r5, #22
 8007400:	4620      	mov	r0, r4
 8007402:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007406:	1886      	adds	r6, r0, r2
 8007408:	428e      	cmp	r6, r1
 800740a:	bfde      	ittt	le
 800740c:	1b89      	suble	r1, r1, r6
 800740e:	18b0      	addle	r0, r6, r2
 8007410:	18a4      	addle	r4, r4, r2
 8007412:	0049      	lsls	r1, r1, #1
 8007414:	3d01      	subs	r5, #1
 8007416:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800741a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800741e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007422:	d1f0      	bne.n	8007406 <__ieee754_sqrt+0x92>
 8007424:	462a      	mov	r2, r5
 8007426:	f04f 0e20 	mov.w	lr, #32
 800742a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800742e:	4281      	cmp	r1, r0
 8007430:	eb06 0c05 	add.w	ip, r6, r5
 8007434:	dc02      	bgt.n	800743c <__ieee754_sqrt+0xc8>
 8007436:	d113      	bne.n	8007460 <__ieee754_sqrt+0xec>
 8007438:	459c      	cmp	ip, r3
 800743a:	d811      	bhi.n	8007460 <__ieee754_sqrt+0xec>
 800743c:	f1bc 0f00 	cmp.w	ip, #0
 8007440:	eb0c 0506 	add.w	r5, ip, r6
 8007444:	da43      	bge.n	80074ce <__ieee754_sqrt+0x15a>
 8007446:	2d00      	cmp	r5, #0
 8007448:	db41      	blt.n	80074ce <__ieee754_sqrt+0x15a>
 800744a:	f100 0801 	add.w	r8, r0, #1
 800744e:	1a09      	subs	r1, r1, r0
 8007450:	459c      	cmp	ip, r3
 8007452:	bf88      	it	hi
 8007454:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007458:	eba3 030c 	sub.w	r3, r3, ip
 800745c:	4432      	add	r2, r6
 800745e:	4640      	mov	r0, r8
 8007460:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007464:	f1be 0e01 	subs.w	lr, lr, #1
 8007468:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800746c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007470:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007474:	d1db      	bne.n	800742e <__ieee754_sqrt+0xba>
 8007476:	430b      	orrs	r3, r1
 8007478:	d006      	beq.n	8007488 <__ieee754_sqrt+0x114>
 800747a:	1c50      	adds	r0, r2, #1
 800747c:	bf13      	iteet	ne
 800747e:	3201      	addne	r2, #1
 8007480:	3401      	addeq	r4, #1
 8007482:	4672      	moveq	r2, lr
 8007484:	f022 0201 	bicne.w	r2, r2, #1
 8007488:	1063      	asrs	r3, r4, #1
 800748a:	0852      	lsrs	r2, r2, #1
 800748c:	07e1      	lsls	r1, r4, #31
 800748e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007492:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007496:	bf48      	it	mi
 8007498:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800749c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80074a0:	4614      	mov	r4, r2
 80074a2:	e781      	b.n	80073a8 <__ieee754_sqrt+0x34>
 80074a4:	0ad9      	lsrs	r1, r3, #11
 80074a6:	3815      	subs	r0, #21
 80074a8:	055b      	lsls	r3, r3, #21
 80074aa:	2900      	cmp	r1, #0
 80074ac:	d0fa      	beq.n	80074a4 <__ieee754_sqrt+0x130>
 80074ae:	02cd      	lsls	r5, r1, #11
 80074b0:	d50a      	bpl.n	80074c8 <__ieee754_sqrt+0x154>
 80074b2:	f1c2 0420 	rsb	r4, r2, #32
 80074b6:	fa23 f404 	lsr.w	r4, r3, r4
 80074ba:	1e55      	subs	r5, r2, #1
 80074bc:	4093      	lsls	r3, r2
 80074be:	4321      	orrs	r1, r4
 80074c0:	1b42      	subs	r2, r0, r5
 80074c2:	e78a      	b.n	80073da <__ieee754_sqrt+0x66>
 80074c4:	4610      	mov	r0, r2
 80074c6:	e7f0      	b.n	80074aa <__ieee754_sqrt+0x136>
 80074c8:	0049      	lsls	r1, r1, #1
 80074ca:	3201      	adds	r2, #1
 80074cc:	e7ef      	b.n	80074ae <__ieee754_sqrt+0x13a>
 80074ce:	4680      	mov	r8, r0
 80074d0:	e7bd      	b.n	800744e <__ieee754_sqrt+0xda>
 80074d2:	bf00      	nop
 80074d4:	7ff00000 	.word	0x7ff00000

080074d8 <with_errno>:
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	4604      	mov	r4, r0
 80074dc:	460d      	mov	r5, r1
 80074de:	4616      	mov	r6, r2
 80074e0:	f000 f8c4 	bl	800766c <__errno>
 80074e4:	4629      	mov	r1, r5
 80074e6:	6006      	str	r6, [r0, #0]
 80074e8:	4620      	mov	r0, r4
 80074ea:	bd70      	pop	{r4, r5, r6, pc}

080074ec <xflow>:
 80074ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074ee:	4614      	mov	r4, r2
 80074f0:	461d      	mov	r5, r3
 80074f2:	b108      	cbz	r0, 80074f8 <xflow+0xc>
 80074f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80074f8:	e9cd 2300 	strd	r2, r3, [sp]
 80074fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007500:	4620      	mov	r0, r4
 8007502:	4629      	mov	r1, r5
 8007504:	f7f9 f880 	bl	8000608 <__aeabi_dmul>
 8007508:	2222      	movs	r2, #34	; 0x22
 800750a:	b003      	add	sp, #12
 800750c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007510:	f7ff bfe2 	b.w	80074d8 <with_errno>

08007514 <__math_uflow>:
 8007514:	b508      	push	{r3, lr}
 8007516:	2200      	movs	r2, #0
 8007518:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800751c:	f7ff ffe6 	bl	80074ec <xflow>
 8007520:	ec41 0b10 	vmov	d0, r0, r1
 8007524:	bd08      	pop	{r3, pc}

08007526 <__math_oflow>:
 8007526:	b508      	push	{r3, lr}
 8007528:	2200      	movs	r2, #0
 800752a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800752e:	f7ff ffdd 	bl	80074ec <xflow>
 8007532:	ec41 0b10 	vmov	d0, r0, r1
 8007536:	bd08      	pop	{r3, pc}

08007538 <fabs>:
 8007538:	ec51 0b10 	vmov	r0, r1, d0
 800753c:	ee10 2a10 	vmov	r2, s0
 8007540:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007544:	ec43 2b10 	vmov	d0, r2, r3
 8007548:	4770      	bx	lr

0800754a <finite>:
 800754a:	b082      	sub	sp, #8
 800754c:	ed8d 0b00 	vstr	d0, [sp]
 8007550:	9801      	ldr	r0, [sp, #4]
 8007552:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007556:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800755a:	0fc0      	lsrs	r0, r0, #31
 800755c:	b002      	add	sp, #8
 800755e:	4770      	bx	lr

08007560 <scalbn>:
 8007560:	b570      	push	{r4, r5, r6, lr}
 8007562:	ec55 4b10 	vmov	r4, r5, d0
 8007566:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800756a:	4606      	mov	r6, r0
 800756c:	462b      	mov	r3, r5
 800756e:	b99a      	cbnz	r2, 8007598 <scalbn+0x38>
 8007570:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007574:	4323      	orrs	r3, r4
 8007576:	d036      	beq.n	80075e6 <scalbn+0x86>
 8007578:	4b39      	ldr	r3, [pc, #228]	; (8007660 <scalbn+0x100>)
 800757a:	4629      	mov	r1, r5
 800757c:	ee10 0a10 	vmov	r0, s0
 8007580:	2200      	movs	r2, #0
 8007582:	f7f9 f841 	bl	8000608 <__aeabi_dmul>
 8007586:	4b37      	ldr	r3, [pc, #220]	; (8007664 <scalbn+0x104>)
 8007588:	429e      	cmp	r6, r3
 800758a:	4604      	mov	r4, r0
 800758c:	460d      	mov	r5, r1
 800758e:	da10      	bge.n	80075b2 <scalbn+0x52>
 8007590:	a32b      	add	r3, pc, #172	; (adr r3, 8007640 <scalbn+0xe0>)
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	e03a      	b.n	800760e <scalbn+0xae>
 8007598:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800759c:	428a      	cmp	r2, r1
 800759e:	d10c      	bne.n	80075ba <scalbn+0x5a>
 80075a0:	ee10 2a10 	vmov	r2, s0
 80075a4:	4620      	mov	r0, r4
 80075a6:	4629      	mov	r1, r5
 80075a8:	f7f8 fe78 	bl	800029c <__adddf3>
 80075ac:	4604      	mov	r4, r0
 80075ae:	460d      	mov	r5, r1
 80075b0:	e019      	b.n	80075e6 <scalbn+0x86>
 80075b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80075b6:	460b      	mov	r3, r1
 80075b8:	3a36      	subs	r2, #54	; 0x36
 80075ba:	4432      	add	r2, r6
 80075bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80075c0:	428a      	cmp	r2, r1
 80075c2:	dd08      	ble.n	80075d6 <scalbn+0x76>
 80075c4:	2d00      	cmp	r5, #0
 80075c6:	a120      	add	r1, pc, #128	; (adr r1, 8007648 <scalbn+0xe8>)
 80075c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075cc:	da1c      	bge.n	8007608 <scalbn+0xa8>
 80075ce:	a120      	add	r1, pc, #128	; (adr r1, 8007650 <scalbn+0xf0>)
 80075d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075d4:	e018      	b.n	8007608 <scalbn+0xa8>
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	dd08      	ble.n	80075ec <scalbn+0x8c>
 80075da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80075e6:	ec45 4b10 	vmov	d0, r4, r5
 80075ea:	bd70      	pop	{r4, r5, r6, pc}
 80075ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80075f0:	da19      	bge.n	8007626 <scalbn+0xc6>
 80075f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80075f6:	429e      	cmp	r6, r3
 80075f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80075fc:	dd0a      	ble.n	8007614 <scalbn+0xb4>
 80075fe:	a112      	add	r1, pc, #72	; (adr r1, 8007648 <scalbn+0xe8>)
 8007600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e2      	bne.n	80075ce <scalbn+0x6e>
 8007608:	a30f      	add	r3, pc, #60	; (adr r3, 8007648 <scalbn+0xe8>)
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	f7f8 fffb 	bl	8000608 <__aeabi_dmul>
 8007612:	e7cb      	b.n	80075ac <scalbn+0x4c>
 8007614:	a10a      	add	r1, pc, #40	; (adr r1, 8007640 <scalbn+0xe0>)
 8007616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0b8      	beq.n	8007590 <scalbn+0x30>
 800761e:	a10e      	add	r1, pc, #56	; (adr r1, 8007658 <scalbn+0xf8>)
 8007620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007624:	e7b4      	b.n	8007590 <scalbn+0x30>
 8007626:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800762a:	3236      	adds	r2, #54	; 0x36
 800762c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007630:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007634:	4620      	mov	r0, r4
 8007636:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <scalbn+0x108>)
 8007638:	2200      	movs	r2, #0
 800763a:	e7e8      	b.n	800760e <scalbn+0xae>
 800763c:	f3af 8000 	nop.w
 8007640:	c2f8f359 	.word	0xc2f8f359
 8007644:	01a56e1f 	.word	0x01a56e1f
 8007648:	8800759c 	.word	0x8800759c
 800764c:	7e37e43c 	.word	0x7e37e43c
 8007650:	8800759c 	.word	0x8800759c
 8007654:	fe37e43c 	.word	0xfe37e43c
 8007658:	c2f8f359 	.word	0xc2f8f359
 800765c:	81a56e1f 	.word	0x81a56e1f
 8007660:	43500000 	.word	0x43500000
 8007664:	ffff3cb0 	.word	0xffff3cb0
 8007668:	3c900000 	.word	0x3c900000

0800766c <__errno>:
 800766c:	4b01      	ldr	r3, [pc, #4]	; (8007674 <__errno+0x8>)
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	2000003c 	.word	0x2000003c

08007678 <__libc_init_array>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	4d0d      	ldr	r5, [pc, #52]	; (80076b0 <__libc_init_array+0x38>)
 800767c:	4c0d      	ldr	r4, [pc, #52]	; (80076b4 <__libc_init_array+0x3c>)
 800767e:	1b64      	subs	r4, r4, r5
 8007680:	10a4      	asrs	r4, r4, #2
 8007682:	2600      	movs	r6, #0
 8007684:	42a6      	cmp	r6, r4
 8007686:	d109      	bne.n	800769c <__libc_init_array+0x24>
 8007688:	4d0b      	ldr	r5, [pc, #44]	; (80076b8 <__libc_init_array+0x40>)
 800768a:	4c0c      	ldr	r4, [pc, #48]	; (80076bc <__libc_init_array+0x44>)
 800768c:	f002 fdc2 	bl	800a214 <_init>
 8007690:	1b64      	subs	r4, r4, r5
 8007692:	10a4      	asrs	r4, r4, #2
 8007694:	2600      	movs	r6, #0
 8007696:	42a6      	cmp	r6, r4
 8007698:	d105      	bne.n	80076a6 <__libc_init_array+0x2e>
 800769a:	bd70      	pop	{r4, r5, r6, pc}
 800769c:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a0:	4798      	blx	r3
 80076a2:	3601      	adds	r6, #1
 80076a4:	e7ee      	b.n	8007684 <__libc_init_array+0xc>
 80076a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076aa:	4798      	blx	r3
 80076ac:	3601      	adds	r6, #1
 80076ae:	e7f2      	b.n	8007696 <__libc_init_array+0x1e>
 80076b0:	0800a69c 	.word	0x0800a69c
 80076b4:	0800a69c 	.word	0x0800a69c
 80076b8:	0800a69c 	.word	0x0800a69c
 80076bc:	0800a6a0 	.word	0x0800a6a0

080076c0 <memset>:
 80076c0:	4402      	add	r2, r0
 80076c2:	4603      	mov	r3, r0
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d100      	bne.n	80076ca <memset+0xa>
 80076c8:	4770      	bx	lr
 80076ca:	f803 1b01 	strb.w	r1, [r3], #1
 80076ce:	e7f9      	b.n	80076c4 <memset+0x4>

080076d0 <__cvt>:
 80076d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076d4:	ec55 4b10 	vmov	r4, r5, d0
 80076d8:	2d00      	cmp	r5, #0
 80076da:	460e      	mov	r6, r1
 80076dc:	4619      	mov	r1, r3
 80076de:	462b      	mov	r3, r5
 80076e0:	bfbb      	ittet	lt
 80076e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076e6:	461d      	movlt	r5, r3
 80076e8:	2300      	movge	r3, #0
 80076ea:	232d      	movlt	r3, #45	; 0x2d
 80076ec:	700b      	strb	r3, [r1, #0]
 80076ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076f4:	4691      	mov	r9, r2
 80076f6:	f023 0820 	bic.w	r8, r3, #32
 80076fa:	bfbc      	itt	lt
 80076fc:	4622      	movlt	r2, r4
 80076fe:	4614      	movlt	r4, r2
 8007700:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007704:	d005      	beq.n	8007712 <__cvt+0x42>
 8007706:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800770a:	d100      	bne.n	800770e <__cvt+0x3e>
 800770c:	3601      	adds	r6, #1
 800770e:	2102      	movs	r1, #2
 8007710:	e000      	b.n	8007714 <__cvt+0x44>
 8007712:	2103      	movs	r1, #3
 8007714:	ab03      	add	r3, sp, #12
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	ab02      	add	r3, sp, #8
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	ec45 4b10 	vmov	d0, r4, r5
 8007720:	4653      	mov	r3, sl
 8007722:	4632      	mov	r2, r6
 8007724:	f000 fe18 	bl	8008358 <_dtoa_r>
 8007728:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800772c:	4607      	mov	r7, r0
 800772e:	d102      	bne.n	8007736 <__cvt+0x66>
 8007730:	f019 0f01 	tst.w	r9, #1
 8007734:	d022      	beq.n	800777c <__cvt+0xac>
 8007736:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800773a:	eb07 0906 	add.w	r9, r7, r6
 800773e:	d110      	bne.n	8007762 <__cvt+0x92>
 8007740:	783b      	ldrb	r3, [r7, #0]
 8007742:	2b30      	cmp	r3, #48	; 0x30
 8007744:	d10a      	bne.n	800775c <__cvt+0x8c>
 8007746:	2200      	movs	r2, #0
 8007748:	2300      	movs	r3, #0
 800774a:	4620      	mov	r0, r4
 800774c:	4629      	mov	r1, r5
 800774e:	f7f9 f9c3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007752:	b918      	cbnz	r0, 800775c <__cvt+0x8c>
 8007754:	f1c6 0601 	rsb	r6, r6, #1
 8007758:	f8ca 6000 	str.w	r6, [sl]
 800775c:	f8da 3000 	ldr.w	r3, [sl]
 8007760:	4499      	add	r9, r3
 8007762:	2200      	movs	r2, #0
 8007764:	2300      	movs	r3, #0
 8007766:	4620      	mov	r0, r4
 8007768:	4629      	mov	r1, r5
 800776a:	f7f9 f9b5 	bl	8000ad8 <__aeabi_dcmpeq>
 800776e:	b108      	cbz	r0, 8007774 <__cvt+0xa4>
 8007770:	f8cd 900c 	str.w	r9, [sp, #12]
 8007774:	2230      	movs	r2, #48	; 0x30
 8007776:	9b03      	ldr	r3, [sp, #12]
 8007778:	454b      	cmp	r3, r9
 800777a:	d307      	bcc.n	800778c <__cvt+0xbc>
 800777c:	9b03      	ldr	r3, [sp, #12]
 800777e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007780:	1bdb      	subs	r3, r3, r7
 8007782:	4638      	mov	r0, r7
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	b004      	add	sp, #16
 8007788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778c:	1c59      	adds	r1, r3, #1
 800778e:	9103      	str	r1, [sp, #12]
 8007790:	701a      	strb	r2, [r3, #0]
 8007792:	e7f0      	b.n	8007776 <__cvt+0xa6>

08007794 <__exponent>:
 8007794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007796:	4603      	mov	r3, r0
 8007798:	2900      	cmp	r1, #0
 800779a:	bfb8      	it	lt
 800779c:	4249      	neglt	r1, r1
 800779e:	f803 2b02 	strb.w	r2, [r3], #2
 80077a2:	bfb4      	ite	lt
 80077a4:	222d      	movlt	r2, #45	; 0x2d
 80077a6:	222b      	movge	r2, #43	; 0x2b
 80077a8:	2909      	cmp	r1, #9
 80077aa:	7042      	strb	r2, [r0, #1]
 80077ac:	dd2a      	ble.n	8007804 <__exponent+0x70>
 80077ae:	f10d 0407 	add.w	r4, sp, #7
 80077b2:	46a4      	mov	ip, r4
 80077b4:	270a      	movs	r7, #10
 80077b6:	46a6      	mov	lr, r4
 80077b8:	460a      	mov	r2, r1
 80077ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80077be:	fb07 1516 	mls	r5, r7, r6, r1
 80077c2:	3530      	adds	r5, #48	; 0x30
 80077c4:	2a63      	cmp	r2, #99	; 0x63
 80077c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80077ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80077ce:	4631      	mov	r1, r6
 80077d0:	dcf1      	bgt.n	80077b6 <__exponent+0x22>
 80077d2:	3130      	adds	r1, #48	; 0x30
 80077d4:	f1ae 0502 	sub.w	r5, lr, #2
 80077d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077dc:	1c44      	adds	r4, r0, #1
 80077de:	4629      	mov	r1, r5
 80077e0:	4561      	cmp	r1, ip
 80077e2:	d30a      	bcc.n	80077fa <__exponent+0x66>
 80077e4:	f10d 0209 	add.w	r2, sp, #9
 80077e8:	eba2 020e 	sub.w	r2, r2, lr
 80077ec:	4565      	cmp	r5, ip
 80077ee:	bf88      	it	hi
 80077f0:	2200      	movhi	r2, #0
 80077f2:	4413      	add	r3, r2
 80077f4:	1a18      	subs	r0, r3, r0
 80077f6:	b003      	add	sp, #12
 80077f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007802:	e7ed      	b.n	80077e0 <__exponent+0x4c>
 8007804:	2330      	movs	r3, #48	; 0x30
 8007806:	3130      	adds	r1, #48	; 0x30
 8007808:	7083      	strb	r3, [r0, #2]
 800780a:	70c1      	strb	r1, [r0, #3]
 800780c:	1d03      	adds	r3, r0, #4
 800780e:	e7f1      	b.n	80077f4 <__exponent+0x60>

08007810 <_printf_float>:
 8007810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007814:	ed2d 8b02 	vpush	{d8}
 8007818:	b08d      	sub	sp, #52	; 0x34
 800781a:	460c      	mov	r4, r1
 800781c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007820:	4616      	mov	r6, r2
 8007822:	461f      	mov	r7, r3
 8007824:	4605      	mov	r5, r0
 8007826:	f001 fd3d 	bl	80092a4 <_localeconv_r>
 800782a:	f8d0 a000 	ldr.w	sl, [r0]
 800782e:	4650      	mov	r0, sl
 8007830:	f7f8 fcd6 	bl	80001e0 <strlen>
 8007834:	2300      	movs	r3, #0
 8007836:	930a      	str	r3, [sp, #40]	; 0x28
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	9305      	str	r3, [sp, #20]
 800783c:	f8d8 3000 	ldr.w	r3, [r8]
 8007840:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007844:	3307      	adds	r3, #7
 8007846:	f023 0307 	bic.w	r3, r3, #7
 800784a:	f103 0208 	add.w	r2, r3, #8
 800784e:	f8c8 2000 	str.w	r2, [r8]
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800785a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800785e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007862:	9307      	str	r3, [sp, #28]
 8007864:	f8cd 8018 	str.w	r8, [sp, #24]
 8007868:	ee08 0a10 	vmov	s16, r0
 800786c:	4b9f      	ldr	r3, [pc, #636]	; (8007aec <_printf_float+0x2dc>)
 800786e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007872:	f04f 32ff 	mov.w	r2, #4294967295
 8007876:	f7f9 f961 	bl	8000b3c <__aeabi_dcmpun>
 800787a:	bb88      	cbnz	r0, 80078e0 <_printf_float+0xd0>
 800787c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007880:	4b9a      	ldr	r3, [pc, #616]	; (8007aec <_printf_float+0x2dc>)
 8007882:	f04f 32ff 	mov.w	r2, #4294967295
 8007886:	f7f9 f93b 	bl	8000b00 <__aeabi_dcmple>
 800788a:	bb48      	cbnz	r0, 80078e0 <_printf_float+0xd0>
 800788c:	2200      	movs	r2, #0
 800788e:	2300      	movs	r3, #0
 8007890:	4640      	mov	r0, r8
 8007892:	4649      	mov	r1, r9
 8007894:	f7f9 f92a 	bl	8000aec <__aeabi_dcmplt>
 8007898:	b110      	cbz	r0, 80078a0 <_printf_float+0x90>
 800789a:	232d      	movs	r3, #45	; 0x2d
 800789c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078a0:	4b93      	ldr	r3, [pc, #588]	; (8007af0 <_printf_float+0x2e0>)
 80078a2:	4894      	ldr	r0, [pc, #592]	; (8007af4 <_printf_float+0x2e4>)
 80078a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80078a8:	bf94      	ite	ls
 80078aa:	4698      	movls	r8, r3
 80078ac:	4680      	movhi	r8, r0
 80078ae:	2303      	movs	r3, #3
 80078b0:	6123      	str	r3, [r4, #16]
 80078b2:	9b05      	ldr	r3, [sp, #20]
 80078b4:	f023 0204 	bic.w	r2, r3, #4
 80078b8:	6022      	str	r2, [r4, #0]
 80078ba:	f04f 0900 	mov.w	r9, #0
 80078be:	9700      	str	r7, [sp, #0]
 80078c0:	4633      	mov	r3, r6
 80078c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80078c4:	4621      	mov	r1, r4
 80078c6:	4628      	mov	r0, r5
 80078c8:	f000 f9d8 	bl	8007c7c <_printf_common>
 80078cc:	3001      	adds	r0, #1
 80078ce:	f040 8090 	bne.w	80079f2 <_printf_float+0x1e2>
 80078d2:	f04f 30ff 	mov.w	r0, #4294967295
 80078d6:	b00d      	add	sp, #52	; 0x34
 80078d8:	ecbd 8b02 	vpop	{d8}
 80078dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e0:	4642      	mov	r2, r8
 80078e2:	464b      	mov	r3, r9
 80078e4:	4640      	mov	r0, r8
 80078e6:	4649      	mov	r1, r9
 80078e8:	f7f9 f928 	bl	8000b3c <__aeabi_dcmpun>
 80078ec:	b140      	cbz	r0, 8007900 <_printf_float+0xf0>
 80078ee:	464b      	mov	r3, r9
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bfbc      	itt	lt
 80078f4:	232d      	movlt	r3, #45	; 0x2d
 80078f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078fa:	487f      	ldr	r0, [pc, #508]	; (8007af8 <_printf_float+0x2e8>)
 80078fc:	4b7f      	ldr	r3, [pc, #508]	; (8007afc <_printf_float+0x2ec>)
 80078fe:	e7d1      	b.n	80078a4 <_printf_float+0x94>
 8007900:	6863      	ldr	r3, [r4, #4]
 8007902:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007906:	9206      	str	r2, [sp, #24]
 8007908:	1c5a      	adds	r2, r3, #1
 800790a:	d13f      	bne.n	800798c <_printf_float+0x17c>
 800790c:	2306      	movs	r3, #6
 800790e:	6063      	str	r3, [r4, #4]
 8007910:	9b05      	ldr	r3, [sp, #20]
 8007912:	6861      	ldr	r1, [r4, #4]
 8007914:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007918:	2300      	movs	r3, #0
 800791a:	9303      	str	r3, [sp, #12]
 800791c:	ab0a      	add	r3, sp, #40	; 0x28
 800791e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007922:	ab09      	add	r3, sp, #36	; 0x24
 8007924:	ec49 8b10 	vmov	d0, r8, r9
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	6022      	str	r2, [r4, #0]
 800792c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007930:	4628      	mov	r0, r5
 8007932:	f7ff fecd 	bl	80076d0 <__cvt>
 8007936:	9b06      	ldr	r3, [sp, #24]
 8007938:	9909      	ldr	r1, [sp, #36]	; 0x24
 800793a:	2b47      	cmp	r3, #71	; 0x47
 800793c:	4680      	mov	r8, r0
 800793e:	d108      	bne.n	8007952 <_printf_float+0x142>
 8007940:	1cc8      	adds	r0, r1, #3
 8007942:	db02      	blt.n	800794a <_printf_float+0x13a>
 8007944:	6863      	ldr	r3, [r4, #4]
 8007946:	4299      	cmp	r1, r3
 8007948:	dd41      	ble.n	80079ce <_printf_float+0x1be>
 800794a:	f1ab 0b02 	sub.w	fp, fp, #2
 800794e:	fa5f fb8b 	uxtb.w	fp, fp
 8007952:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007956:	d820      	bhi.n	800799a <_printf_float+0x18a>
 8007958:	3901      	subs	r1, #1
 800795a:	465a      	mov	r2, fp
 800795c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007960:	9109      	str	r1, [sp, #36]	; 0x24
 8007962:	f7ff ff17 	bl	8007794 <__exponent>
 8007966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007968:	1813      	adds	r3, r2, r0
 800796a:	2a01      	cmp	r2, #1
 800796c:	4681      	mov	r9, r0
 800796e:	6123      	str	r3, [r4, #16]
 8007970:	dc02      	bgt.n	8007978 <_printf_float+0x168>
 8007972:	6822      	ldr	r2, [r4, #0]
 8007974:	07d2      	lsls	r2, r2, #31
 8007976:	d501      	bpl.n	800797c <_printf_float+0x16c>
 8007978:	3301      	adds	r3, #1
 800797a:	6123      	str	r3, [r4, #16]
 800797c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007980:	2b00      	cmp	r3, #0
 8007982:	d09c      	beq.n	80078be <_printf_float+0xae>
 8007984:	232d      	movs	r3, #45	; 0x2d
 8007986:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800798a:	e798      	b.n	80078be <_printf_float+0xae>
 800798c:	9a06      	ldr	r2, [sp, #24]
 800798e:	2a47      	cmp	r2, #71	; 0x47
 8007990:	d1be      	bne.n	8007910 <_printf_float+0x100>
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1bc      	bne.n	8007910 <_printf_float+0x100>
 8007996:	2301      	movs	r3, #1
 8007998:	e7b9      	b.n	800790e <_printf_float+0xfe>
 800799a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800799e:	d118      	bne.n	80079d2 <_printf_float+0x1c2>
 80079a0:	2900      	cmp	r1, #0
 80079a2:	6863      	ldr	r3, [r4, #4]
 80079a4:	dd0b      	ble.n	80079be <_printf_float+0x1ae>
 80079a6:	6121      	str	r1, [r4, #16]
 80079a8:	b913      	cbnz	r3, 80079b0 <_printf_float+0x1a0>
 80079aa:	6822      	ldr	r2, [r4, #0]
 80079ac:	07d0      	lsls	r0, r2, #31
 80079ae:	d502      	bpl.n	80079b6 <_printf_float+0x1a6>
 80079b0:	3301      	adds	r3, #1
 80079b2:	440b      	add	r3, r1
 80079b4:	6123      	str	r3, [r4, #16]
 80079b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80079b8:	f04f 0900 	mov.w	r9, #0
 80079bc:	e7de      	b.n	800797c <_printf_float+0x16c>
 80079be:	b913      	cbnz	r3, 80079c6 <_printf_float+0x1b6>
 80079c0:	6822      	ldr	r2, [r4, #0]
 80079c2:	07d2      	lsls	r2, r2, #31
 80079c4:	d501      	bpl.n	80079ca <_printf_float+0x1ba>
 80079c6:	3302      	adds	r3, #2
 80079c8:	e7f4      	b.n	80079b4 <_printf_float+0x1a4>
 80079ca:	2301      	movs	r3, #1
 80079cc:	e7f2      	b.n	80079b4 <_printf_float+0x1a4>
 80079ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80079d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079d4:	4299      	cmp	r1, r3
 80079d6:	db05      	blt.n	80079e4 <_printf_float+0x1d4>
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	6121      	str	r1, [r4, #16]
 80079dc:	07d8      	lsls	r0, r3, #31
 80079de:	d5ea      	bpl.n	80079b6 <_printf_float+0x1a6>
 80079e0:	1c4b      	adds	r3, r1, #1
 80079e2:	e7e7      	b.n	80079b4 <_printf_float+0x1a4>
 80079e4:	2900      	cmp	r1, #0
 80079e6:	bfd4      	ite	le
 80079e8:	f1c1 0202 	rsble	r2, r1, #2
 80079ec:	2201      	movgt	r2, #1
 80079ee:	4413      	add	r3, r2
 80079f0:	e7e0      	b.n	80079b4 <_printf_float+0x1a4>
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	055a      	lsls	r2, r3, #21
 80079f6:	d407      	bmi.n	8007a08 <_printf_float+0x1f8>
 80079f8:	6923      	ldr	r3, [r4, #16]
 80079fa:	4642      	mov	r2, r8
 80079fc:	4631      	mov	r1, r6
 80079fe:	4628      	mov	r0, r5
 8007a00:	47b8      	blx	r7
 8007a02:	3001      	adds	r0, #1
 8007a04:	d12c      	bne.n	8007a60 <_printf_float+0x250>
 8007a06:	e764      	b.n	80078d2 <_printf_float+0xc2>
 8007a08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a0c:	f240 80e0 	bls.w	8007bd0 <_printf_float+0x3c0>
 8007a10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a14:	2200      	movs	r2, #0
 8007a16:	2300      	movs	r3, #0
 8007a18:	f7f9 f85e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d034      	beq.n	8007a8a <_printf_float+0x27a>
 8007a20:	4a37      	ldr	r2, [pc, #220]	; (8007b00 <_printf_float+0x2f0>)
 8007a22:	2301      	movs	r3, #1
 8007a24:	4631      	mov	r1, r6
 8007a26:	4628      	mov	r0, r5
 8007a28:	47b8      	blx	r7
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	f43f af51 	beq.w	80078d2 <_printf_float+0xc2>
 8007a30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a34:	429a      	cmp	r2, r3
 8007a36:	db02      	blt.n	8007a3e <_printf_float+0x22e>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	07d8      	lsls	r0, r3, #31
 8007a3c:	d510      	bpl.n	8007a60 <_printf_float+0x250>
 8007a3e:	ee18 3a10 	vmov	r3, s16
 8007a42:	4652      	mov	r2, sl
 8007a44:	4631      	mov	r1, r6
 8007a46:	4628      	mov	r0, r5
 8007a48:	47b8      	blx	r7
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	f43f af41 	beq.w	80078d2 <_printf_float+0xc2>
 8007a50:	f04f 0800 	mov.w	r8, #0
 8007a54:	f104 091a 	add.w	r9, r4, #26
 8007a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	4543      	cmp	r3, r8
 8007a5e:	dc09      	bgt.n	8007a74 <_printf_float+0x264>
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	079b      	lsls	r3, r3, #30
 8007a64:	f100 8105 	bmi.w	8007c72 <_printf_float+0x462>
 8007a68:	68e0      	ldr	r0, [r4, #12]
 8007a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a6c:	4298      	cmp	r0, r3
 8007a6e:	bfb8      	it	lt
 8007a70:	4618      	movlt	r0, r3
 8007a72:	e730      	b.n	80078d6 <_printf_float+0xc6>
 8007a74:	2301      	movs	r3, #1
 8007a76:	464a      	mov	r2, r9
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	47b8      	blx	r7
 8007a7e:	3001      	adds	r0, #1
 8007a80:	f43f af27 	beq.w	80078d2 <_printf_float+0xc2>
 8007a84:	f108 0801 	add.w	r8, r8, #1
 8007a88:	e7e6      	b.n	8007a58 <_printf_float+0x248>
 8007a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dc39      	bgt.n	8007b04 <_printf_float+0x2f4>
 8007a90:	4a1b      	ldr	r2, [pc, #108]	; (8007b00 <_printf_float+0x2f0>)
 8007a92:	2301      	movs	r3, #1
 8007a94:	4631      	mov	r1, r6
 8007a96:	4628      	mov	r0, r5
 8007a98:	47b8      	blx	r7
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	f43f af19 	beq.w	80078d2 <_printf_float+0xc2>
 8007aa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	d102      	bne.n	8007aae <_printf_float+0x29e>
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	07d9      	lsls	r1, r3, #31
 8007aac:	d5d8      	bpl.n	8007a60 <_printf_float+0x250>
 8007aae:	ee18 3a10 	vmov	r3, s16
 8007ab2:	4652      	mov	r2, sl
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	47b8      	blx	r7
 8007aba:	3001      	adds	r0, #1
 8007abc:	f43f af09 	beq.w	80078d2 <_printf_float+0xc2>
 8007ac0:	f04f 0900 	mov.w	r9, #0
 8007ac4:	f104 0a1a 	add.w	sl, r4, #26
 8007ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aca:	425b      	negs	r3, r3
 8007acc:	454b      	cmp	r3, r9
 8007ace:	dc01      	bgt.n	8007ad4 <_printf_float+0x2c4>
 8007ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad2:	e792      	b.n	80079fa <_printf_float+0x1ea>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	4652      	mov	r2, sl
 8007ad8:	4631      	mov	r1, r6
 8007ada:	4628      	mov	r0, r5
 8007adc:	47b8      	blx	r7
 8007ade:	3001      	adds	r0, #1
 8007ae0:	f43f aef7 	beq.w	80078d2 <_printf_float+0xc2>
 8007ae4:	f109 0901 	add.w	r9, r9, #1
 8007ae8:	e7ee      	b.n	8007ac8 <_printf_float+0x2b8>
 8007aea:	bf00      	nop
 8007aec:	7fefffff 	.word	0x7fefffff
 8007af0:	0800a2bc 	.word	0x0800a2bc
 8007af4:	0800a2c0 	.word	0x0800a2c0
 8007af8:	0800a2c8 	.word	0x0800a2c8
 8007afc:	0800a2c4 	.word	0x0800a2c4
 8007b00:	0800a2cc 	.word	0x0800a2cc
 8007b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	bfa8      	it	ge
 8007b0c:	461a      	movge	r2, r3
 8007b0e:	2a00      	cmp	r2, #0
 8007b10:	4691      	mov	r9, r2
 8007b12:	dc37      	bgt.n	8007b84 <_printf_float+0x374>
 8007b14:	f04f 0b00 	mov.w	fp, #0
 8007b18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b1c:	f104 021a 	add.w	r2, r4, #26
 8007b20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b22:	9305      	str	r3, [sp, #20]
 8007b24:	eba3 0309 	sub.w	r3, r3, r9
 8007b28:	455b      	cmp	r3, fp
 8007b2a:	dc33      	bgt.n	8007b94 <_printf_float+0x384>
 8007b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b30:	429a      	cmp	r2, r3
 8007b32:	db3b      	blt.n	8007bac <_printf_float+0x39c>
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	07da      	lsls	r2, r3, #31
 8007b38:	d438      	bmi.n	8007bac <_printf_float+0x39c>
 8007b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b3c:	9a05      	ldr	r2, [sp, #20]
 8007b3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b40:	1a9a      	subs	r2, r3, r2
 8007b42:	eba3 0901 	sub.w	r9, r3, r1
 8007b46:	4591      	cmp	r9, r2
 8007b48:	bfa8      	it	ge
 8007b4a:	4691      	movge	r9, r2
 8007b4c:	f1b9 0f00 	cmp.w	r9, #0
 8007b50:	dc35      	bgt.n	8007bbe <_printf_float+0x3ae>
 8007b52:	f04f 0800 	mov.w	r8, #0
 8007b56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b5a:	f104 0a1a 	add.w	sl, r4, #26
 8007b5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b62:	1a9b      	subs	r3, r3, r2
 8007b64:	eba3 0309 	sub.w	r3, r3, r9
 8007b68:	4543      	cmp	r3, r8
 8007b6a:	f77f af79 	ble.w	8007a60 <_printf_float+0x250>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4652      	mov	r2, sl
 8007b72:	4631      	mov	r1, r6
 8007b74:	4628      	mov	r0, r5
 8007b76:	47b8      	blx	r7
 8007b78:	3001      	adds	r0, #1
 8007b7a:	f43f aeaa 	beq.w	80078d2 <_printf_float+0xc2>
 8007b7e:	f108 0801 	add.w	r8, r8, #1
 8007b82:	e7ec      	b.n	8007b5e <_printf_float+0x34e>
 8007b84:	4613      	mov	r3, r2
 8007b86:	4631      	mov	r1, r6
 8007b88:	4642      	mov	r2, r8
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	47b8      	blx	r7
 8007b8e:	3001      	adds	r0, #1
 8007b90:	d1c0      	bne.n	8007b14 <_printf_float+0x304>
 8007b92:	e69e      	b.n	80078d2 <_printf_float+0xc2>
 8007b94:	2301      	movs	r3, #1
 8007b96:	4631      	mov	r1, r6
 8007b98:	4628      	mov	r0, r5
 8007b9a:	9205      	str	r2, [sp, #20]
 8007b9c:	47b8      	blx	r7
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	f43f ae97 	beq.w	80078d2 <_printf_float+0xc2>
 8007ba4:	9a05      	ldr	r2, [sp, #20]
 8007ba6:	f10b 0b01 	add.w	fp, fp, #1
 8007baa:	e7b9      	b.n	8007b20 <_printf_float+0x310>
 8007bac:	ee18 3a10 	vmov	r3, s16
 8007bb0:	4652      	mov	r2, sl
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	47b8      	blx	r7
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d1be      	bne.n	8007b3a <_printf_float+0x32a>
 8007bbc:	e689      	b.n	80078d2 <_printf_float+0xc2>
 8007bbe:	9a05      	ldr	r2, [sp, #20]
 8007bc0:	464b      	mov	r3, r9
 8007bc2:	4442      	add	r2, r8
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b8      	blx	r7
 8007bca:	3001      	adds	r0, #1
 8007bcc:	d1c1      	bne.n	8007b52 <_printf_float+0x342>
 8007bce:	e680      	b.n	80078d2 <_printf_float+0xc2>
 8007bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bd2:	2a01      	cmp	r2, #1
 8007bd4:	dc01      	bgt.n	8007bda <_printf_float+0x3ca>
 8007bd6:	07db      	lsls	r3, r3, #31
 8007bd8:	d538      	bpl.n	8007c4c <_printf_float+0x43c>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	4642      	mov	r2, r8
 8007bde:	4631      	mov	r1, r6
 8007be0:	4628      	mov	r0, r5
 8007be2:	47b8      	blx	r7
 8007be4:	3001      	adds	r0, #1
 8007be6:	f43f ae74 	beq.w	80078d2 <_printf_float+0xc2>
 8007bea:	ee18 3a10 	vmov	r3, s16
 8007bee:	4652      	mov	r2, sl
 8007bf0:	4631      	mov	r1, r6
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	47b8      	blx	r7
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	f43f ae6b 	beq.w	80078d2 <_printf_float+0xc2>
 8007bfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c00:	2200      	movs	r2, #0
 8007c02:	2300      	movs	r3, #0
 8007c04:	f7f8 ff68 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c08:	b9d8      	cbnz	r0, 8007c42 <_printf_float+0x432>
 8007c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c0c:	f108 0201 	add.w	r2, r8, #1
 8007c10:	3b01      	subs	r3, #1
 8007c12:	4631      	mov	r1, r6
 8007c14:	4628      	mov	r0, r5
 8007c16:	47b8      	blx	r7
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d10e      	bne.n	8007c3a <_printf_float+0x42a>
 8007c1c:	e659      	b.n	80078d2 <_printf_float+0xc2>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	4652      	mov	r2, sl
 8007c22:	4631      	mov	r1, r6
 8007c24:	4628      	mov	r0, r5
 8007c26:	47b8      	blx	r7
 8007c28:	3001      	adds	r0, #1
 8007c2a:	f43f ae52 	beq.w	80078d2 <_printf_float+0xc2>
 8007c2e:	f108 0801 	add.w	r8, r8, #1
 8007c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c34:	3b01      	subs	r3, #1
 8007c36:	4543      	cmp	r3, r8
 8007c38:	dcf1      	bgt.n	8007c1e <_printf_float+0x40e>
 8007c3a:	464b      	mov	r3, r9
 8007c3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c40:	e6dc      	b.n	80079fc <_printf_float+0x1ec>
 8007c42:	f04f 0800 	mov.w	r8, #0
 8007c46:	f104 0a1a 	add.w	sl, r4, #26
 8007c4a:	e7f2      	b.n	8007c32 <_printf_float+0x422>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	4642      	mov	r2, r8
 8007c50:	e7df      	b.n	8007c12 <_printf_float+0x402>
 8007c52:	2301      	movs	r3, #1
 8007c54:	464a      	mov	r2, r9
 8007c56:	4631      	mov	r1, r6
 8007c58:	4628      	mov	r0, r5
 8007c5a:	47b8      	blx	r7
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	f43f ae38 	beq.w	80078d2 <_printf_float+0xc2>
 8007c62:	f108 0801 	add.w	r8, r8, #1
 8007c66:	68e3      	ldr	r3, [r4, #12]
 8007c68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c6a:	1a5b      	subs	r3, r3, r1
 8007c6c:	4543      	cmp	r3, r8
 8007c6e:	dcf0      	bgt.n	8007c52 <_printf_float+0x442>
 8007c70:	e6fa      	b.n	8007a68 <_printf_float+0x258>
 8007c72:	f04f 0800 	mov.w	r8, #0
 8007c76:	f104 0919 	add.w	r9, r4, #25
 8007c7a:	e7f4      	b.n	8007c66 <_printf_float+0x456>

08007c7c <_printf_common>:
 8007c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c80:	4616      	mov	r6, r2
 8007c82:	4699      	mov	r9, r3
 8007c84:	688a      	ldr	r2, [r1, #8]
 8007c86:	690b      	ldr	r3, [r1, #16]
 8007c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	bfb8      	it	lt
 8007c90:	4613      	movlt	r3, r2
 8007c92:	6033      	str	r3, [r6, #0]
 8007c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c98:	4607      	mov	r7, r0
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	b10a      	cbz	r2, 8007ca2 <_printf_common+0x26>
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	6033      	str	r3, [r6, #0]
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	0699      	lsls	r1, r3, #26
 8007ca6:	bf42      	ittt	mi
 8007ca8:	6833      	ldrmi	r3, [r6, #0]
 8007caa:	3302      	addmi	r3, #2
 8007cac:	6033      	strmi	r3, [r6, #0]
 8007cae:	6825      	ldr	r5, [r4, #0]
 8007cb0:	f015 0506 	ands.w	r5, r5, #6
 8007cb4:	d106      	bne.n	8007cc4 <_printf_common+0x48>
 8007cb6:	f104 0a19 	add.w	sl, r4, #25
 8007cba:	68e3      	ldr	r3, [r4, #12]
 8007cbc:	6832      	ldr	r2, [r6, #0]
 8007cbe:	1a9b      	subs	r3, r3, r2
 8007cc0:	42ab      	cmp	r3, r5
 8007cc2:	dc26      	bgt.n	8007d12 <_printf_common+0x96>
 8007cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cc8:	1e13      	subs	r3, r2, #0
 8007cca:	6822      	ldr	r2, [r4, #0]
 8007ccc:	bf18      	it	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	0692      	lsls	r2, r2, #26
 8007cd2:	d42b      	bmi.n	8007d2c <_printf_common+0xb0>
 8007cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cd8:	4649      	mov	r1, r9
 8007cda:	4638      	mov	r0, r7
 8007cdc:	47c0      	blx	r8
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d01e      	beq.n	8007d20 <_printf_common+0xa4>
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	68e5      	ldr	r5, [r4, #12]
 8007ce6:	6832      	ldr	r2, [r6, #0]
 8007ce8:	f003 0306 	and.w	r3, r3, #6
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	bf08      	it	eq
 8007cf0:	1aad      	subeq	r5, r5, r2
 8007cf2:	68a3      	ldr	r3, [r4, #8]
 8007cf4:	6922      	ldr	r2, [r4, #16]
 8007cf6:	bf0c      	ite	eq
 8007cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cfc:	2500      	movne	r5, #0
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	bfc4      	itt	gt
 8007d02:	1a9b      	subgt	r3, r3, r2
 8007d04:	18ed      	addgt	r5, r5, r3
 8007d06:	2600      	movs	r6, #0
 8007d08:	341a      	adds	r4, #26
 8007d0a:	42b5      	cmp	r5, r6
 8007d0c:	d11a      	bne.n	8007d44 <_printf_common+0xc8>
 8007d0e:	2000      	movs	r0, #0
 8007d10:	e008      	b.n	8007d24 <_printf_common+0xa8>
 8007d12:	2301      	movs	r3, #1
 8007d14:	4652      	mov	r2, sl
 8007d16:	4649      	mov	r1, r9
 8007d18:	4638      	mov	r0, r7
 8007d1a:	47c0      	blx	r8
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d103      	bne.n	8007d28 <_printf_common+0xac>
 8007d20:	f04f 30ff 	mov.w	r0, #4294967295
 8007d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d28:	3501      	adds	r5, #1
 8007d2a:	e7c6      	b.n	8007cba <_printf_common+0x3e>
 8007d2c:	18e1      	adds	r1, r4, r3
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	2030      	movs	r0, #48	; 0x30
 8007d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d36:	4422      	add	r2, r4
 8007d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d40:	3302      	adds	r3, #2
 8007d42:	e7c7      	b.n	8007cd4 <_printf_common+0x58>
 8007d44:	2301      	movs	r3, #1
 8007d46:	4622      	mov	r2, r4
 8007d48:	4649      	mov	r1, r9
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	47c0      	blx	r8
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d0e6      	beq.n	8007d20 <_printf_common+0xa4>
 8007d52:	3601      	adds	r6, #1
 8007d54:	e7d9      	b.n	8007d0a <_printf_common+0x8e>
	...

08007d58 <_printf_i>:
 8007d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5c:	7e0f      	ldrb	r7, [r1, #24]
 8007d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d60:	2f78      	cmp	r7, #120	; 0x78
 8007d62:	4691      	mov	r9, r2
 8007d64:	4680      	mov	r8, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	469a      	mov	sl, r3
 8007d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d6e:	d807      	bhi.n	8007d80 <_printf_i+0x28>
 8007d70:	2f62      	cmp	r7, #98	; 0x62
 8007d72:	d80a      	bhi.n	8007d8a <_printf_i+0x32>
 8007d74:	2f00      	cmp	r7, #0
 8007d76:	f000 80d8 	beq.w	8007f2a <_printf_i+0x1d2>
 8007d7a:	2f58      	cmp	r7, #88	; 0x58
 8007d7c:	f000 80a3 	beq.w	8007ec6 <_printf_i+0x16e>
 8007d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d88:	e03a      	b.n	8007e00 <_printf_i+0xa8>
 8007d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d8e:	2b15      	cmp	r3, #21
 8007d90:	d8f6      	bhi.n	8007d80 <_printf_i+0x28>
 8007d92:	a101      	add	r1, pc, #4	; (adr r1, 8007d98 <_printf_i+0x40>)
 8007d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d98:	08007df1 	.word	0x08007df1
 8007d9c:	08007e05 	.word	0x08007e05
 8007da0:	08007d81 	.word	0x08007d81
 8007da4:	08007d81 	.word	0x08007d81
 8007da8:	08007d81 	.word	0x08007d81
 8007dac:	08007d81 	.word	0x08007d81
 8007db0:	08007e05 	.word	0x08007e05
 8007db4:	08007d81 	.word	0x08007d81
 8007db8:	08007d81 	.word	0x08007d81
 8007dbc:	08007d81 	.word	0x08007d81
 8007dc0:	08007d81 	.word	0x08007d81
 8007dc4:	08007f11 	.word	0x08007f11
 8007dc8:	08007e35 	.word	0x08007e35
 8007dcc:	08007ef3 	.word	0x08007ef3
 8007dd0:	08007d81 	.word	0x08007d81
 8007dd4:	08007d81 	.word	0x08007d81
 8007dd8:	08007f33 	.word	0x08007f33
 8007ddc:	08007d81 	.word	0x08007d81
 8007de0:	08007e35 	.word	0x08007e35
 8007de4:	08007d81 	.word	0x08007d81
 8007de8:	08007d81 	.word	0x08007d81
 8007dec:	08007efb 	.word	0x08007efb
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	1d1a      	adds	r2, r3, #4
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	602a      	str	r2, [r5, #0]
 8007df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e00:	2301      	movs	r3, #1
 8007e02:	e0a3      	b.n	8007f4c <_printf_i+0x1f4>
 8007e04:	6820      	ldr	r0, [r4, #0]
 8007e06:	6829      	ldr	r1, [r5, #0]
 8007e08:	0606      	lsls	r6, r0, #24
 8007e0a:	f101 0304 	add.w	r3, r1, #4
 8007e0e:	d50a      	bpl.n	8007e26 <_printf_i+0xce>
 8007e10:	680e      	ldr	r6, [r1, #0]
 8007e12:	602b      	str	r3, [r5, #0]
 8007e14:	2e00      	cmp	r6, #0
 8007e16:	da03      	bge.n	8007e20 <_printf_i+0xc8>
 8007e18:	232d      	movs	r3, #45	; 0x2d
 8007e1a:	4276      	negs	r6, r6
 8007e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e20:	485e      	ldr	r0, [pc, #376]	; (8007f9c <_printf_i+0x244>)
 8007e22:	230a      	movs	r3, #10
 8007e24:	e019      	b.n	8007e5a <_printf_i+0x102>
 8007e26:	680e      	ldr	r6, [r1, #0]
 8007e28:	602b      	str	r3, [r5, #0]
 8007e2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e2e:	bf18      	it	ne
 8007e30:	b236      	sxthne	r6, r6
 8007e32:	e7ef      	b.n	8007e14 <_printf_i+0xbc>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	6820      	ldr	r0, [r4, #0]
 8007e38:	1d19      	adds	r1, r3, #4
 8007e3a:	6029      	str	r1, [r5, #0]
 8007e3c:	0601      	lsls	r1, r0, #24
 8007e3e:	d501      	bpl.n	8007e44 <_printf_i+0xec>
 8007e40:	681e      	ldr	r6, [r3, #0]
 8007e42:	e002      	b.n	8007e4a <_printf_i+0xf2>
 8007e44:	0646      	lsls	r6, r0, #25
 8007e46:	d5fb      	bpl.n	8007e40 <_printf_i+0xe8>
 8007e48:	881e      	ldrh	r6, [r3, #0]
 8007e4a:	4854      	ldr	r0, [pc, #336]	; (8007f9c <_printf_i+0x244>)
 8007e4c:	2f6f      	cmp	r7, #111	; 0x6f
 8007e4e:	bf0c      	ite	eq
 8007e50:	2308      	moveq	r3, #8
 8007e52:	230a      	movne	r3, #10
 8007e54:	2100      	movs	r1, #0
 8007e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e5a:	6865      	ldr	r5, [r4, #4]
 8007e5c:	60a5      	str	r5, [r4, #8]
 8007e5e:	2d00      	cmp	r5, #0
 8007e60:	bfa2      	ittt	ge
 8007e62:	6821      	ldrge	r1, [r4, #0]
 8007e64:	f021 0104 	bicge.w	r1, r1, #4
 8007e68:	6021      	strge	r1, [r4, #0]
 8007e6a:	b90e      	cbnz	r6, 8007e70 <_printf_i+0x118>
 8007e6c:	2d00      	cmp	r5, #0
 8007e6e:	d04d      	beq.n	8007f0c <_printf_i+0x1b4>
 8007e70:	4615      	mov	r5, r2
 8007e72:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e76:	fb03 6711 	mls	r7, r3, r1, r6
 8007e7a:	5dc7      	ldrb	r7, [r0, r7]
 8007e7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e80:	4637      	mov	r7, r6
 8007e82:	42bb      	cmp	r3, r7
 8007e84:	460e      	mov	r6, r1
 8007e86:	d9f4      	bls.n	8007e72 <_printf_i+0x11a>
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	d10b      	bne.n	8007ea4 <_printf_i+0x14c>
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	07de      	lsls	r6, r3, #31
 8007e90:	d508      	bpl.n	8007ea4 <_printf_i+0x14c>
 8007e92:	6923      	ldr	r3, [r4, #16]
 8007e94:	6861      	ldr	r1, [r4, #4]
 8007e96:	4299      	cmp	r1, r3
 8007e98:	bfde      	ittt	le
 8007e9a:	2330      	movle	r3, #48	; 0x30
 8007e9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ea0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ea4:	1b52      	subs	r2, r2, r5
 8007ea6:	6122      	str	r2, [r4, #16]
 8007ea8:	f8cd a000 	str.w	sl, [sp]
 8007eac:	464b      	mov	r3, r9
 8007eae:	aa03      	add	r2, sp, #12
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	4640      	mov	r0, r8
 8007eb4:	f7ff fee2 	bl	8007c7c <_printf_common>
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d14c      	bne.n	8007f56 <_printf_i+0x1fe>
 8007ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec0:	b004      	add	sp, #16
 8007ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec6:	4835      	ldr	r0, [pc, #212]	; (8007f9c <_printf_i+0x244>)
 8007ec8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ecc:	6829      	ldr	r1, [r5, #0]
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ed4:	6029      	str	r1, [r5, #0]
 8007ed6:	061d      	lsls	r5, r3, #24
 8007ed8:	d514      	bpl.n	8007f04 <_printf_i+0x1ac>
 8007eda:	07df      	lsls	r7, r3, #31
 8007edc:	bf44      	itt	mi
 8007ede:	f043 0320 	orrmi.w	r3, r3, #32
 8007ee2:	6023      	strmi	r3, [r4, #0]
 8007ee4:	b91e      	cbnz	r6, 8007eee <_printf_i+0x196>
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	f023 0320 	bic.w	r3, r3, #32
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	2310      	movs	r3, #16
 8007ef0:	e7b0      	b.n	8007e54 <_printf_i+0xfc>
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	f043 0320 	orr.w	r3, r3, #32
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	2378      	movs	r3, #120	; 0x78
 8007efc:	4828      	ldr	r0, [pc, #160]	; (8007fa0 <_printf_i+0x248>)
 8007efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f02:	e7e3      	b.n	8007ecc <_printf_i+0x174>
 8007f04:	0659      	lsls	r1, r3, #25
 8007f06:	bf48      	it	mi
 8007f08:	b2b6      	uxthmi	r6, r6
 8007f0a:	e7e6      	b.n	8007eda <_printf_i+0x182>
 8007f0c:	4615      	mov	r5, r2
 8007f0e:	e7bb      	b.n	8007e88 <_printf_i+0x130>
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	6826      	ldr	r6, [r4, #0]
 8007f14:	6961      	ldr	r1, [r4, #20]
 8007f16:	1d18      	adds	r0, r3, #4
 8007f18:	6028      	str	r0, [r5, #0]
 8007f1a:	0635      	lsls	r5, r6, #24
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	d501      	bpl.n	8007f24 <_printf_i+0x1cc>
 8007f20:	6019      	str	r1, [r3, #0]
 8007f22:	e002      	b.n	8007f2a <_printf_i+0x1d2>
 8007f24:	0670      	lsls	r0, r6, #25
 8007f26:	d5fb      	bpl.n	8007f20 <_printf_i+0x1c8>
 8007f28:	8019      	strh	r1, [r3, #0]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	6123      	str	r3, [r4, #16]
 8007f2e:	4615      	mov	r5, r2
 8007f30:	e7ba      	b.n	8007ea8 <_printf_i+0x150>
 8007f32:	682b      	ldr	r3, [r5, #0]
 8007f34:	1d1a      	adds	r2, r3, #4
 8007f36:	602a      	str	r2, [r5, #0]
 8007f38:	681d      	ldr	r5, [r3, #0]
 8007f3a:	6862      	ldr	r2, [r4, #4]
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f7f8 f956 	bl	80001f0 <memchr>
 8007f44:	b108      	cbz	r0, 8007f4a <_printf_i+0x1f2>
 8007f46:	1b40      	subs	r0, r0, r5
 8007f48:	6060      	str	r0, [r4, #4]
 8007f4a:	6863      	ldr	r3, [r4, #4]
 8007f4c:	6123      	str	r3, [r4, #16]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f54:	e7a8      	b.n	8007ea8 <_printf_i+0x150>
 8007f56:	6923      	ldr	r3, [r4, #16]
 8007f58:	462a      	mov	r2, r5
 8007f5a:	4649      	mov	r1, r9
 8007f5c:	4640      	mov	r0, r8
 8007f5e:	47d0      	blx	sl
 8007f60:	3001      	adds	r0, #1
 8007f62:	d0ab      	beq.n	8007ebc <_printf_i+0x164>
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	079b      	lsls	r3, r3, #30
 8007f68:	d413      	bmi.n	8007f92 <_printf_i+0x23a>
 8007f6a:	68e0      	ldr	r0, [r4, #12]
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	4298      	cmp	r0, r3
 8007f70:	bfb8      	it	lt
 8007f72:	4618      	movlt	r0, r3
 8007f74:	e7a4      	b.n	8007ec0 <_printf_i+0x168>
 8007f76:	2301      	movs	r3, #1
 8007f78:	4632      	mov	r2, r6
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	4640      	mov	r0, r8
 8007f7e:	47d0      	blx	sl
 8007f80:	3001      	adds	r0, #1
 8007f82:	d09b      	beq.n	8007ebc <_printf_i+0x164>
 8007f84:	3501      	adds	r5, #1
 8007f86:	68e3      	ldr	r3, [r4, #12]
 8007f88:	9903      	ldr	r1, [sp, #12]
 8007f8a:	1a5b      	subs	r3, r3, r1
 8007f8c:	42ab      	cmp	r3, r5
 8007f8e:	dcf2      	bgt.n	8007f76 <_printf_i+0x21e>
 8007f90:	e7eb      	b.n	8007f6a <_printf_i+0x212>
 8007f92:	2500      	movs	r5, #0
 8007f94:	f104 0619 	add.w	r6, r4, #25
 8007f98:	e7f5      	b.n	8007f86 <_printf_i+0x22e>
 8007f9a:	bf00      	nop
 8007f9c:	0800a2ce 	.word	0x0800a2ce
 8007fa0:	0800a2df 	.word	0x0800a2df

08007fa4 <iprintf>:
 8007fa4:	b40f      	push	{r0, r1, r2, r3}
 8007fa6:	4b0a      	ldr	r3, [pc, #40]	; (8007fd0 <iprintf+0x2c>)
 8007fa8:	b513      	push	{r0, r1, r4, lr}
 8007faa:	681c      	ldr	r4, [r3, #0]
 8007fac:	b124      	cbz	r4, 8007fb8 <iprintf+0x14>
 8007fae:	69a3      	ldr	r3, [r4, #24]
 8007fb0:	b913      	cbnz	r3, 8007fb8 <iprintf+0x14>
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f001 f8d8 	bl	8009168 <__sinit>
 8007fb8:	ab05      	add	r3, sp, #20
 8007fba:	9a04      	ldr	r2, [sp, #16]
 8007fbc:	68a1      	ldr	r1, [r4, #8]
 8007fbe:	9301      	str	r3, [sp, #4]
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f001 fe95 	bl	8009cf0 <_vfiprintf_r>
 8007fc6:	b002      	add	sp, #8
 8007fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fcc:	b004      	add	sp, #16
 8007fce:	4770      	bx	lr
 8007fd0:	2000003c 	.word	0x2000003c

08007fd4 <_puts_r>:
 8007fd4:	b570      	push	{r4, r5, r6, lr}
 8007fd6:	460e      	mov	r6, r1
 8007fd8:	4605      	mov	r5, r0
 8007fda:	b118      	cbz	r0, 8007fe4 <_puts_r+0x10>
 8007fdc:	6983      	ldr	r3, [r0, #24]
 8007fde:	b90b      	cbnz	r3, 8007fe4 <_puts_r+0x10>
 8007fe0:	f001 f8c2 	bl	8009168 <__sinit>
 8007fe4:	69ab      	ldr	r3, [r5, #24]
 8007fe6:	68ac      	ldr	r4, [r5, #8]
 8007fe8:	b913      	cbnz	r3, 8007ff0 <_puts_r+0x1c>
 8007fea:	4628      	mov	r0, r5
 8007fec:	f001 f8bc 	bl	8009168 <__sinit>
 8007ff0:	4b2c      	ldr	r3, [pc, #176]	; (80080a4 <_puts_r+0xd0>)
 8007ff2:	429c      	cmp	r4, r3
 8007ff4:	d120      	bne.n	8008038 <_puts_r+0x64>
 8007ff6:	686c      	ldr	r4, [r5, #4]
 8007ff8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ffa:	07db      	lsls	r3, r3, #31
 8007ffc:	d405      	bmi.n	800800a <_puts_r+0x36>
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	0598      	lsls	r0, r3, #22
 8008002:	d402      	bmi.n	800800a <_puts_r+0x36>
 8008004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008006:	f001 f952 	bl	80092ae <__retarget_lock_acquire_recursive>
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	0719      	lsls	r1, r3, #28
 800800e:	d51d      	bpl.n	800804c <_puts_r+0x78>
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	b1db      	cbz	r3, 800804c <_puts_r+0x78>
 8008014:	3e01      	subs	r6, #1
 8008016:	68a3      	ldr	r3, [r4, #8]
 8008018:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800801c:	3b01      	subs	r3, #1
 800801e:	60a3      	str	r3, [r4, #8]
 8008020:	bb39      	cbnz	r1, 8008072 <_puts_r+0x9e>
 8008022:	2b00      	cmp	r3, #0
 8008024:	da38      	bge.n	8008098 <_puts_r+0xc4>
 8008026:	4622      	mov	r2, r4
 8008028:	210a      	movs	r1, #10
 800802a:	4628      	mov	r0, r5
 800802c:	f000 f848 	bl	80080c0 <__swbuf_r>
 8008030:	3001      	adds	r0, #1
 8008032:	d011      	beq.n	8008058 <_puts_r+0x84>
 8008034:	250a      	movs	r5, #10
 8008036:	e011      	b.n	800805c <_puts_r+0x88>
 8008038:	4b1b      	ldr	r3, [pc, #108]	; (80080a8 <_puts_r+0xd4>)
 800803a:	429c      	cmp	r4, r3
 800803c:	d101      	bne.n	8008042 <_puts_r+0x6e>
 800803e:	68ac      	ldr	r4, [r5, #8]
 8008040:	e7da      	b.n	8007ff8 <_puts_r+0x24>
 8008042:	4b1a      	ldr	r3, [pc, #104]	; (80080ac <_puts_r+0xd8>)
 8008044:	429c      	cmp	r4, r3
 8008046:	bf08      	it	eq
 8008048:	68ec      	ldreq	r4, [r5, #12]
 800804a:	e7d5      	b.n	8007ff8 <_puts_r+0x24>
 800804c:	4621      	mov	r1, r4
 800804e:	4628      	mov	r0, r5
 8008050:	f000 f888 	bl	8008164 <__swsetup_r>
 8008054:	2800      	cmp	r0, #0
 8008056:	d0dd      	beq.n	8008014 <_puts_r+0x40>
 8008058:	f04f 35ff 	mov.w	r5, #4294967295
 800805c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800805e:	07da      	lsls	r2, r3, #31
 8008060:	d405      	bmi.n	800806e <_puts_r+0x9a>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	059b      	lsls	r3, r3, #22
 8008066:	d402      	bmi.n	800806e <_puts_r+0x9a>
 8008068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800806a:	f001 f921 	bl	80092b0 <__retarget_lock_release_recursive>
 800806e:	4628      	mov	r0, r5
 8008070:	bd70      	pop	{r4, r5, r6, pc}
 8008072:	2b00      	cmp	r3, #0
 8008074:	da04      	bge.n	8008080 <_puts_r+0xac>
 8008076:	69a2      	ldr	r2, [r4, #24]
 8008078:	429a      	cmp	r2, r3
 800807a:	dc06      	bgt.n	800808a <_puts_r+0xb6>
 800807c:	290a      	cmp	r1, #10
 800807e:	d004      	beq.n	800808a <_puts_r+0xb6>
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	6022      	str	r2, [r4, #0]
 8008086:	7019      	strb	r1, [r3, #0]
 8008088:	e7c5      	b.n	8008016 <_puts_r+0x42>
 800808a:	4622      	mov	r2, r4
 800808c:	4628      	mov	r0, r5
 800808e:	f000 f817 	bl	80080c0 <__swbuf_r>
 8008092:	3001      	adds	r0, #1
 8008094:	d1bf      	bne.n	8008016 <_puts_r+0x42>
 8008096:	e7df      	b.n	8008058 <_puts_r+0x84>
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	250a      	movs	r5, #10
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	6022      	str	r2, [r4, #0]
 80080a0:	701d      	strb	r5, [r3, #0]
 80080a2:	e7db      	b.n	800805c <_puts_r+0x88>
 80080a4:	0800a3a0 	.word	0x0800a3a0
 80080a8:	0800a3c0 	.word	0x0800a3c0
 80080ac:	0800a380 	.word	0x0800a380

080080b0 <puts>:
 80080b0:	4b02      	ldr	r3, [pc, #8]	; (80080bc <puts+0xc>)
 80080b2:	4601      	mov	r1, r0
 80080b4:	6818      	ldr	r0, [r3, #0]
 80080b6:	f7ff bf8d 	b.w	8007fd4 <_puts_r>
 80080ba:	bf00      	nop
 80080bc:	2000003c 	.word	0x2000003c

080080c0 <__swbuf_r>:
 80080c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c2:	460e      	mov	r6, r1
 80080c4:	4614      	mov	r4, r2
 80080c6:	4605      	mov	r5, r0
 80080c8:	b118      	cbz	r0, 80080d2 <__swbuf_r+0x12>
 80080ca:	6983      	ldr	r3, [r0, #24]
 80080cc:	b90b      	cbnz	r3, 80080d2 <__swbuf_r+0x12>
 80080ce:	f001 f84b 	bl	8009168 <__sinit>
 80080d2:	4b21      	ldr	r3, [pc, #132]	; (8008158 <__swbuf_r+0x98>)
 80080d4:	429c      	cmp	r4, r3
 80080d6:	d12b      	bne.n	8008130 <__swbuf_r+0x70>
 80080d8:	686c      	ldr	r4, [r5, #4]
 80080da:	69a3      	ldr	r3, [r4, #24]
 80080dc:	60a3      	str	r3, [r4, #8]
 80080de:	89a3      	ldrh	r3, [r4, #12]
 80080e0:	071a      	lsls	r2, r3, #28
 80080e2:	d52f      	bpl.n	8008144 <__swbuf_r+0x84>
 80080e4:	6923      	ldr	r3, [r4, #16]
 80080e6:	b36b      	cbz	r3, 8008144 <__swbuf_r+0x84>
 80080e8:	6923      	ldr	r3, [r4, #16]
 80080ea:	6820      	ldr	r0, [r4, #0]
 80080ec:	1ac0      	subs	r0, r0, r3
 80080ee:	6963      	ldr	r3, [r4, #20]
 80080f0:	b2f6      	uxtb	r6, r6
 80080f2:	4283      	cmp	r3, r0
 80080f4:	4637      	mov	r7, r6
 80080f6:	dc04      	bgt.n	8008102 <__swbuf_r+0x42>
 80080f8:	4621      	mov	r1, r4
 80080fa:	4628      	mov	r0, r5
 80080fc:	f000 ffa0 	bl	8009040 <_fflush_r>
 8008100:	bb30      	cbnz	r0, 8008150 <__swbuf_r+0x90>
 8008102:	68a3      	ldr	r3, [r4, #8]
 8008104:	3b01      	subs	r3, #1
 8008106:	60a3      	str	r3, [r4, #8]
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	6022      	str	r2, [r4, #0]
 800810e:	701e      	strb	r6, [r3, #0]
 8008110:	6963      	ldr	r3, [r4, #20]
 8008112:	3001      	adds	r0, #1
 8008114:	4283      	cmp	r3, r0
 8008116:	d004      	beq.n	8008122 <__swbuf_r+0x62>
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	07db      	lsls	r3, r3, #31
 800811c:	d506      	bpl.n	800812c <__swbuf_r+0x6c>
 800811e:	2e0a      	cmp	r6, #10
 8008120:	d104      	bne.n	800812c <__swbuf_r+0x6c>
 8008122:	4621      	mov	r1, r4
 8008124:	4628      	mov	r0, r5
 8008126:	f000 ff8b 	bl	8009040 <_fflush_r>
 800812a:	b988      	cbnz	r0, 8008150 <__swbuf_r+0x90>
 800812c:	4638      	mov	r0, r7
 800812e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008130:	4b0a      	ldr	r3, [pc, #40]	; (800815c <__swbuf_r+0x9c>)
 8008132:	429c      	cmp	r4, r3
 8008134:	d101      	bne.n	800813a <__swbuf_r+0x7a>
 8008136:	68ac      	ldr	r4, [r5, #8]
 8008138:	e7cf      	b.n	80080da <__swbuf_r+0x1a>
 800813a:	4b09      	ldr	r3, [pc, #36]	; (8008160 <__swbuf_r+0xa0>)
 800813c:	429c      	cmp	r4, r3
 800813e:	bf08      	it	eq
 8008140:	68ec      	ldreq	r4, [r5, #12]
 8008142:	e7ca      	b.n	80080da <__swbuf_r+0x1a>
 8008144:	4621      	mov	r1, r4
 8008146:	4628      	mov	r0, r5
 8008148:	f000 f80c 	bl	8008164 <__swsetup_r>
 800814c:	2800      	cmp	r0, #0
 800814e:	d0cb      	beq.n	80080e8 <__swbuf_r+0x28>
 8008150:	f04f 37ff 	mov.w	r7, #4294967295
 8008154:	e7ea      	b.n	800812c <__swbuf_r+0x6c>
 8008156:	bf00      	nop
 8008158:	0800a3a0 	.word	0x0800a3a0
 800815c:	0800a3c0 	.word	0x0800a3c0
 8008160:	0800a380 	.word	0x0800a380

08008164 <__swsetup_r>:
 8008164:	4b32      	ldr	r3, [pc, #200]	; (8008230 <__swsetup_r+0xcc>)
 8008166:	b570      	push	{r4, r5, r6, lr}
 8008168:	681d      	ldr	r5, [r3, #0]
 800816a:	4606      	mov	r6, r0
 800816c:	460c      	mov	r4, r1
 800816e:	b125      	cbz	r5, 800817a <__swsetup_r+0x16>
 8008170:	69ab      	ldr	r3, [r5, #24]
 8008172:	b913      	cbnz	r3, 800817a <__swsetup_r+0x16>
 8008174:	4628      	mov	r0, r5
 8008176:	f000 fff7 	bl	8009168 <__sinit>
 800817a:	4b2e      	ldr	r3, [pc, #184]	; (8008234 <__swsetup_r+0xd0>)
 800817c:	429c      	cmp	r4, r3
 800817e:	d10f      	bne.n	80081a0 <__swsetup_r+0x3c>
 8008180:	686c      	ldr	r4, [r5, #4]
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008188:	0719      	lsls	r1, r3, #28
 800818a:	d42c      	bmi.n	80081e6 <__swsetup_r+0x82>
 800818c:	06dd      	lsls	r5, r3, #27
 800818e:	d411      	bmi.n	80081b4 <__swsetup_r+0x50>
 8008190:	2309      	movs	r3, #9
 8008192:	6033      	str	r3, [r6, #0]
 8008194:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008198:	81a3      	strh	r3, [r4, #12]
 800819a:	f04f 30ff 	mov.w	r0, #4294967295
 800819e:	e03e      	b.n	800821e <__swsetup_r+0xba>
 80081a0:	4b25      	ldr	r3, [pc, #148]	; (8008238 <__swsetup_r+0xd4>)
 80081a2:	429c      	cmp	r4, r3
 80081a4:	d101      	bne.n	80081aa <__swsetup_r+0x46>
 80081a6:	68ac      	ldr	r4, [r5, #8]
 80081a8:	e7eb      	b.n	8008182 <__swsetup_r+0x1e>
 80081aa:	4b24      	ldr	r3, [pc, #144]	; (800823c <__swsetup_r+0xd8>)
 80081ac:	429c      	cmp	r4, r3
 80081ae:	bf08      	it	eq
 80081b0:	68ec      	ldreq	r4, [r5, #12]
 80081b2:	e7e6      	b.n	8008182 <__swsetup_r+0x1e>
 80081b4:	0758      	lsls	r0, r3, #29
 80081b6:	d512      	bpl.n	80081de <__swsetup_r+0x7a>
 80081b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081ba:	b141      	cbz	r1, 80081ce <__swsetup_r+0x6a>
 80081bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081c0:	4299      	cmp	r1, r3
 80081c2:	d002      	beq.n	80081ca <__swsetup_r+0x66>
 80081c4:	4630      	mov	r0, r6
 80081c6:	f001 fc89 	bl	8009adc <_free_r>
 80081ca:	2300      	movs	r3, #0
 80081cc:	6363      	str	r3, [r4, #52]	; 0x34
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081d4:	81a3      	strh	r3, [r4, #12]
 80081d6:	2300      	movs	r3, #0
 80081d8:	6063      	str	r3, [r4, #4]
 80081da:	6923      	ldr	r3, [r4, #16]
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	f043 0308 	orr.w	r3, r3, #8
 80081e4:	81a3      	strh	r3, [r4, #12]
 80081e6:	6923      	ldr	r3, [r4, #16]
 80081e8:	b94b      	cbnz	r3, 80081fe <__swsetup_r+0x9a>
 80081ea:	89a3      	ldrh	r3, [r4, #12]
 80081ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081f4:	d003      	beq.n	80081fe <__swsetup_r+0x9a>
 80081f6:	4621      	mov	r1, r4
 80081f8:	4630      	mov	r0, r6
 80081fa:	f001 f87f 	bl	80092fc <__smakebuf_r>
 80081fe:	89a0      	ldrh	r0, [r4, #12]
 8008200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008204:	f010 0301 	ands.w	r3, r0, #1
 8008208:	d00a      	beq.n	8008220 <__swsetup_r+0xbc>
 800820a:	2300      	movs	r3, #0
 800820c:	60a3      	str	r3, [r4, #8]
 800820e:	6963      	ldr	r3, [r4, #20]
 8008210:	425b      	negs	r3, r3
 8008212:	61a3      	str	r3, [r4, #24]
 8008214:	6923      	ldr	r3, [r4, #16]
 8008216:	b943      	cbnz	r3, 800822a <__swsetup_r+0xc6>
 8008218:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800821c:	d1ba      	bne.n	8008194 <__swsetup_r+0x30>
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	0781      	lsls	r1, r0, #30
 8008222:	bf58      	it	pl
 8008224:	6963      	ldrpl	r3, [r4, #20]
 8008226:	60a3      	str	r3, [r4, #8]
 8008228:	e7f4      	b.n	8008214 <__swsetup_r+0xb0>
 800822a:	2000      	movs	r0, #0
 800822c:	e7f7      	b.n	800821e <__swsetup_r+0xba>
 800822e:	bf00      	nop
 8008230:	2000003c 	.word	0x2000003c
 8008234:	0800a3a0 	.word	0x0800a3a0
 8008238:	0800a3c0 	.word	0x0800a3c0
 800823c:	0800a380 	.word	0x0800a380

08008240 <quorem>:
 8008240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	6903      	ldr	r3, [r0, #16]
 8008246:	690c      	ldr	r4, [r1, #16]
 8008248:	42a3      	cmp	r3, r4
 800824a:	4607      	mov	r7, r0
 800824c:	f2c0 8081 	blt.w	8008352 <quorem+0x112>
 8008250:	3c01      	subs	r4, #1
 8008252:	f101 0814 	add.w	r8, r1, #20
 8008256:	f100 0514 	add.w	r5, r0, #20
 800825a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008264:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008268:	3301      	adds	r3, #1
 800826a:	429a      	cmp	r2, r3
 800826c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008270:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008274:	fbb2 f6f3 	udiv	r6, r2, r3
 8008278:	d331      	bcc.n	80082de <quorem+0x9e>
 800827a:	f04f 0e00 	mov.w	lr, #0
 800827e:	4640      	mov	r0, r8
 8008280:	46ac      	mov	ip, r5
 8008282:	46f2      	mov	sl, lr
 8008284:	f850 2b04 	ldr.w	r2, [r0], #4
 8008288:	b293      	uxth	r3, r2
 800828a:	fb06 e303 	mla	r3, r6, r3, lr
 800828e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008292:	b29b      	uxth	r3, r3
 8008294:	ebaa 0303 	sub.w	r3, sl, r3
 8008298:	f8dc a000 	ldr.w	sl, [ip]
 800829c:	0c12      	lsrs	r2, r2, #16
 800829e:	fa13 f38a 	uxtah	r3, r3, sl
 80082a2:	fb06 e202 	mla	r2, r6, r2, lr
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	9b00      	ldr	r3, [sp, #0]
 80082aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082ae:	b292      	uxth	r2, r2
 80082b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80082bc:	4581      	cmp	r9, r0
 80082be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082c2:	f84c 3b04 	str.w	r3, [ip], #4
 80082c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082ca:	d2db      	bcs.n	8008284 <quorem+0x44>
 80082cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80082d0:	b92b      	cbnz	r3, 80082de <quorem+0x9e>
 80082d2:	9b01      	ldr	r3, [sp, #4]
 80082d4:	3b04      	subs	r3, #4
 80082d6:	429d      	cmp	r5, r3
 80082d8:	461a      	mov	r2, r3
 80082da:	d32e      	bcc.n	800833a <quorem+0xfa>
 80082dc:	613c      	str	r4, [r7, #16]
 80082de:	4638      	mov	r0, r7
 80082e0:	f001 fae4 	bl	80098ac <__mcmp>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	db24      	blt.n	8008332 <quorem+0xf2>
 80082e8:	3601      	adds	r6, #1
 80082ea:	4628      	mov	r0, r5
 80082ec:	f04f 0c00 	mov.w	ip, #0
 80082f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80082f4:	f8d0 e000 	ldr.w	lr, [r0]
 80082f8:	b293      	uxth	r3, r2
 80082fa:	ebac 0303 	sub.w	r3, ip, r3
 80082fe:	0c12      	lsrs	r2, r2, #16
 8008300:	fa13 f38e 	uxtah	r3, r3, lr
 8008304:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008308:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800830c:	b29b      	uxth	r3, r3
 800830e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008312:	45c1      	cmp	r9, r8
 8008314:	f840 3b04 	str.w	r3, [r0], #4
 8008318:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800831c:	d2e8      	bcs.n	80082f0 <quorem+0xb0>
 800831e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008326:	b922      	cbnz	r2, 8008332 <quorem+0xf2>
 8008328:	3b04      	subs	r3, #4
 800832a:	429d      	cmp	r5, r3
 800832c:	461a      	mov	r2, r3
 800832e:	d30a      	bcc.n	8008346 <quorem+0x106>
 8008330:	613c      	str	r4, [r7, #16]
 8008332:	4630      	mov	r0, r6
 8008334:	b003      	add	sp, #12
 8008336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833a:	6812      	ldr	r2, [r2, #0]
 800833c:	3b04      	subs	r3, #4
 800833e:	2a00      	cmp	r2, #0
 8008340:	d1cc      	bne.n	80082dc <quorem+0x9c>
 8008342:	3c01      	subs	r4, #1
 8008344:	e7c7      	b.n	80082d6 <quorem+0x96>
 8008346:	6812      	ldr	r2, [r2, #0]
 8008348:	3b04      	subs	r3, #4
 800834a:	2a00      	cmp	r2, #0
 800834c:	d1f0      	bne.n	8008330 <quorem+0xf0>
 800834e:	3c01      	subs	r4, #1
 8008350:	e7eb      	b.n	800832a <quorem+0xea>
 8008352:	2000      	movs	r0, #0
 8008354:	e7ee      	b.n	8008334 <quorem+0xf4>
	...

08008358 <_dtoa_r>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	ed2d 8b04 	vpush	{d8-d9}
 8008360:	ec57 6b10 	vmov	r6, r7, d0
 8008364:	b093      	sub	sp, #76	; 0x4c
 8008366:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008368:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800836c:	9106      	str	r1, [sp, #24]
 800836e:	ee10 aa10 	vmov	sl, s0
 8008372:	4604      	mov	r4, r0
 8008374:	9209      	str	r2, [sp, #36]	; 0x24
 8008376:	930c      	str	r3, [sp, #48]	; 0x30
 8008378:	46bb      	mov	fp, r7
 800837a:	b975      	cbnz	r5, 800839a <_dtoa_r+0x42>
 800837c:	2010      	movs	r0, #16
 800837e:	f000 fffd 	bl	800937c <malloc>
 8008382:	4602      	mov	r2, r0
 8008384:	6260      	str	r0, [r4, #36]	; 0x24
 8008386:	b920      	cbnz	r0, 8008392 <_dtoa_r+0x3a>
 8008388:	4ba7      	ldr	r3, [pc, #668]	; (8008628 <_dtoa_r+0x2d0>)
 800838a:	21ea      	movs	r1, #234	; 0xea
 800838c:	48a7      	ldr	r0, [pc, #668]	; (800862c <_dtoa_r+0x2d4>)
 800838e:	f001 fe45 	bl	800a01c <__assert_func>
 8008392:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008396:	6005      	str	r5, [r0, #0]
 8008398:	60c5      	str	r5, [r0, #12]
 800839a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800839c:	6819      	ldr	r1, [r3, #0]
 800839e:	b151      	cbz	r1, 80083b6 <_dtoa_r+0x5e>
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	604a      	str	r2, [r1, #4]
 80083a4:	2301      	movs	r3, #1
 80083a6:	4093      	lsls	r3, r2
 80083a8:	608b      	str	r3, [r1, #8]
 80083aa:	4620      	mov	r0, r4
 80083ac:	f001 f83c 	bl	8009428 <_Bfree>
 80083b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	1e3b      	subs	r3, r7, #0
 80083b8:	bfaa      	itet	ge
 80083ba:	2300      	movge	r3, #0
 80083bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80083c0:	f8c8 3000 	strge.w	r3, [r8]
 80083c4:	4b9a      	ldr	r3, [pc, #616]	; (8008630 <_dtoa_r+0x2d8>)
 80083c6:	bfbc      	itt	lt
 80083c8:	2201      	movlt	r2, #1
 80083ca:	f8c8 2000 	strlt.w	r2, [r8]
 80083ce:	ea33 030b 	bics.w	r3, r3, fp
 80083d2:	d11b      	bne.n	800840c <_dtoa_r+0xb4>
 80083d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083e0:	4333      	orrs	r3, r6
 80083e2:	f000 8592 	beq.w	8008f0a <_dtoa_r+0xbb2>
 80083e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083e8:	b963      	cbnz	r3, 8008404 <_dtoa_r+0xac>
 80083ea:	4b92      	ldr	r3, [pc, #584]	; (8008634 <_dtoa_r+0x2dc>)
 80083ec:	e022      	b.n	8008434 <_dtoa_r+0xdc>
 80083ee:	4b92      	ldr	r3, [pc, #584]	; (8008638 <_dtoa_r+0x2e0>)
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	3308      	adds	r3, #8
 80083f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	9801      	ldr	r0, [sp, #4]
 80083fa:	b013      	add	sp, #76	; 0x4c
 80083fc:	ecbd 8b04 	vpop	{d8-d9}
 8008400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008404:	4b8b      	ldr	r3, [pc, #556]	; (8008634 <_dtoa_r+0x2dc>)
 8008406:	9301      	str	r3, [sp, #4]
 8008408:	3303      	adds	r3, #3
 800840a:	e7f3      	b.n	80083f4 <_dtoa_r+0x9c>
 800840c:	2200      	movs	r2, #0
 800840e:	2300      	movs	r3, #0
 8008410:	4650      	mov	r0, sl
 8008412:	4659      	mov	r1, fp
 8008414:	f7f8 fb60 	bl	8000ad8 <__aeabi_dcmpeq>
 8008418:	ec4b ab19 	vmov	d9, sl, fp
 800841c:	4680      	mov	r8, r0
 800841e:	b158      	cbz	r0, 8008438 <_dtoa_r+0xe0>
 8008420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008422:	2301      	movs	r3, #1
 8008424:	6013      	str	r3, [r2, #0]
 8008426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 856b 	beq.w	8008f04 <_dtoa_r+0xbac>
 800842e:	4883      	ldr	r0, [pc, #524]	; (800863c <_dtoa_r+0x2e4>)
 8008430:	6018      	str	r0, [r3, #0]
 8008432:	1e43      	subs	r3, r0, #1
 8008434:	9301      	str	r3, [sp, #4]
 8008436:	e7df      	b.n	80083f8 <_dtoa_r+0xa0>
 8008438:	ec4b ab10 	vmov	d0, sl, fp
 800843c:	aa10      	add	r2, sp, #64	; 0x40
 800843e:	a911      	add	r1, sp, #68	; 0x44
 8008440:	4620      	mov	r0, r4
 8008442:	f001 fad9 	bl	80099f8 <__d2b>
 8008446:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800844a:	ee08 0a10 	vmov	s16, r0
 800844e:	2d00      	cmp	r5, #0
 8008450:	f000 8084 	beq.w	800855c <_dtoa_r+0x204>
 8008454:	ee19 3a90 	vmov	r3, s19
 8008458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800845c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008460:	4656      	mov	r6, sl
 8008462:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008466:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800846a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800846e:	4b74      	ldr	r3, [pc, #464]	; (8008640 <_dtoa_r+0x2e8>)
 8008470:	2200      	movs	r2, #0
 8008472:	4630      	mov	r0, r6
 8008474:	4639      	mov	r1, r7
 8008476:	f7f7 ff0f 	bl	8000298 <__aeabi_dsub>
 800847a:	a365      	add	r3, pc, #404	; (adr r3, 8008610 <_dtoa_r+0x2b8>)
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	f7f8 f8c2 	bl	8000608 <__aeabi_dmul>
 8008484:	a364      	add	r3, pc, #400	; (adr r3, 8008618 <_dtoa_r+0x2c0>)
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	f7f7 ff07 	bl	800029c <__adddf3>
 800848e:	4606      	mov	r6, r0
 8008490:	4628      	mov	r0, r5
 8008492:	460f      	mov	r7, r1
 8008494:	f7f8 f84e 	bl	8000534 <__aeabi_i2d>
 8008498:	a361      	add	r3, pc, #388	; (adr r3, 8008620 <_dtoa_r+0x2c8>)
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	f7f8 f8b3 	bl	8000608 <__aeabi_dmul>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4630      	mov	r0, r6
 80084a8:	4639      	mov	r1, r7
 80084aa:	f7f7 fef7 	bl	800029c <__adddf3>
 80084ae:	4606      	mov	r6, r0
 80084b0:	460f      	mov	r7, r1
 80084b2:	f7f8 fb59 	bl	8000b68 <__aeabi_d2iz>
 80084b6:	2200      	movs	r2, #0
 80084b8:	9000      	str	r0, [sp, #0]
 80084ba:	2300      	movs	r3, #0
 80084bc:	4630      	mov	r0, r6
 80084be:	4639      	mov	r1, r7
 80084c0:	f7f8 fb14 	bl	8000aec <__aeabi_dcmplt>
 80084c4:	b150      	cbz	r0, 80084dc <_dtoa_r+0x184>
 80084c6:	9800      	ldr	r0, [sp, #0]
 80084c8:	f7f8 f834 	bl	8000534 <__aeabi_i2d>
 80084cc:	4632      	mov	r2, r6
 80084ce:	463b      	mov	r3, r7
 80084d0:	f7f8 fb02 	bl	8000ad8 <__aeabi_dcmpeq>
 80084d4:	b910      	cbnz	r0, 80084dc <_dtoa_r+0x184>
 80084d6:	9b00      	ldr	r3, [sp, #0]
 80084d8:	3b01      	subs	r3, #1
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	9b00      	ldr	r3, [sp, #0]
 80084de:	2b16      	cmp	r3, #22
 80084e0:	d85a      	bhi.n	8008598 <_dtoa_r+0x240>
 80084e2:	9a00      	ldr	r2, [sp, #0]
 80084e4:	4b57      	ldr	r3, [pc, #348]	; (8008644 <_dtoa_r+0x2ec>)
 80084e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	ec51 0b19 	vmov	r0, r1, d9
 80084f2:	f7f8 fafb 	bl	8000aec <__aeabi_dcmplt>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d050      	beq.n	800859c <_dtoa_r+0x244>
 80084fa:	9b00      	ldr	r3, [sp, #0]
 80084fc:	3b01      	subs	r3, #1
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	2300      	movs	r3, #0
 8008502:	930b      	str	r3, [sp, #44]	; 0x2c
 8008504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008506:	1b5d      	subs	r5, r3, r5
 8008508:	1e6b      	subs	r3, r5, #1
 800850a:	9305      	str	r3, [sp, #20]
 800850c:	bf45      	ittet	mi
 800850e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008512:	9304      	strmi	r3, [sp, #16]
 8008514:	2300      	movpl	r3, #0
 8008516:	2300      	movmi	r3, #0
 8008518:	bf4c      	ite	mi
 800851a:	9305      	strmi	r3, [sp, #20]
 800851c:	9304      	strpl	r3, [sp, #16]
 800851e:	9b00      	ldr	r3, [sp, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	db3d      	blt.n	80085a0 <_dtoa_r+0x248>
 8008524:	9b05      	ldr	r3, [sp, #20]
 8008526:	9a00      	ldr	r2, [sp, #0]
 8008528:	920a      	str	r2, [sp, #40]	; 0x28
 800852a:	4413      	add	r3, r2
 800852c:	9305      	str	r3, [sp, #20]
 800852e:	2300      	movs	r3, #0
 8008530:	9307      	str	r3, [sp, #28]
 8008532:	9b06      	ldr	r3, [sp, #24]
 8008534:	2b09      	cmp	r3, #9
 8008536:	f200 8089 	bhi.w	800864c <_dtoa_r+0x2f4>
 800853a:	2b05      	cmp	r3, #5
 800853c:	bfc4      	itt	gt
 800853e:	3b04      	subgt	r3, #4
 8008540:	9306      	strgt	r3, [sp, #24]
 8008542:	9b06      	ldr	r3, [sp, #24]
 8008544:	f1a3 0302 	sub.w	r3, r3, #2
 8008548:	bfcc      	ite	gt
 800854a:	2500      	movgt	r5, #0
 800854c:	2501      	movle	r5, #1
 800854e:	2b03      	cmp	r3, #3
 8008550:	f200 8087 	bhi.w	8008662 <_dtoa_r+0x30a>
 8008554:	e8df f003 	tbb	[pc, r3]
 8008558:	59383a2d 	.word	0x59383a2d
 800855c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008560:	441d      	add	r5, r3
 8008562:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008566:	2b20      	cmp	r3, #32
 8008568:	bfc1      	itttt	gt
 800856a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800856e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008572:	fa0b f303 	lslgt.w	r3, fp, r3
 8008576:	fa26 f000 	lsrgt.w	r0, r6, r0
 800857a:	bfda      	itte	le
 800857c:	f1c3 0320 	rsble	r3, r3, #32
 8008580:	fa06 f003 	lslle.w	r0, r6, r3
 8008584:	4318      	orrgt	r0, r3
 8008586:	f7f7 ffc5 	bl	8000514 <__aeabi_ui2d>
 800858a:	2301      	movs	r3, #1
 800858c:	4606      	mov	r6, r0
 800858e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008592:	3d01      	subs	r5, #1
 8008594:	930e      	str	r3, [sp, #56]	; 0x38
 8008596:	e76a      	b.n	800846e <_dtoa_r+0x116>
 8008598:	2301      	movs	r3, #1
 800859a:	e7b2      	b.n	8008502 <_dtoa_r+0x1aa>
 800859c:	900b      	str	r0, [sp, #44]	; 0x2c
 800859e:	e7b1      	b.n	8008504 <_dtoa_r+0x1ac>
 80085a0:	9b04      	ldr	r3, [sp, #16]
 80085a2:	9a00      	ldr	r2, [sp, #0]
 80085a4:	1a9b      	subs	r3, r3, r2
 80085a6:	9304      	str	r3, [sp, #16]
 80085a8:	4253      	negs	r3, r2
 80085aa:	9307      	str	r3, [sp, #28]
 80085ac:	2300      	movs	r3, #0
 80085ae:	930a      	str	r3, [sp, #40]	; 0x28
 80085b0:	e7bf      	b.n	8008532 <_dtoa_r+0x1da>
 80085b2:	2300      	movs	r3, #0
 80085b4:	9308      	str	r3, [sp, #32]
 80085b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	dc55      	bgt.n	8008668 <_dtoa_r+0x310>
 80085bc:	2301      	movs	r3, #1
 80085be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085c2:	461a      	mov	r2, r3
 80085c4:	9209      	str	r2, [sp, #36]	; 0x24
 80085c6:	e00c      	b.n	80085e2 <_dtoa_r+0x28a>
 80085c8:	2301      	movs	r3, #1
 80085ca:	e7f3      	b.n	80085b4 <_dtoa_r+0x25c>
 80085cc:	2300      	movs	r3, #0
 80085ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085d0:	9308      	str	r3, [sp, #32]
 80085d2:	9b00      	ldr	r3, [sp, #0]
 80085d4:	4413      	add	r3, r2
 80085d6:	9302      	str	r3, [sp, #8]
 80085d8:	3301      	adds	r3, #1
 80085da:	2b01      	cmp	r3, #1
 80085dc:	9303      	str	r3, [sp, #12]
 80085de:	bfb8      	it	lt
 80085e0:	2301      	movlt	r3, #1
 80085e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80085e4:	2200      	movs	r2, #0
 80085e6:	6042      	str	r2, [r0, #4]
 80085e8:	2204      	movs	r2, #4
 80085ea:	f102 0614 	add.w	r6, r2, #20
 80085ee:	429e      	cmp	r6, r3
 80085f0:	6841      	ldr	r1, [r0, #4]
 80085f2:	d93d      	bls.n	8008670 <_dtoa_r+0x318>
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 fed7 	bl	80093a8 <_Balloc>
 80085fa:	9001      	str	r0, [sp, #4]
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d13b      	bne.n	8008678 <_dtoa_r+0x320>
 8008600:	4b11      	ldr	r3, [pc, #68]	; (8008648 <_dtoa_r+0x2f0>)
 8008602:	4602      	mov	r2, r0
 8008604:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008608:	e6c0      	b.n	800838c <_dtoa_r+0x34>
 800860a:	2301      	movs	r3, #1
 800860c:	e7df      	b.n	80085ce <_dtoa_r+0x276>
 800860e:	bf00      	nop
 8008610:	636f4361 	.word	0x636f4361
 8008614:	3fd287a7 	.word	0x3fd287a7
 8008618:	8b60c8b3 	.word	0x8b60c8b3
 800861c:	3fc68a28 	.word	0x3fc68a28
 8008620:	509f79fb 	.word	0x509f79fb
 8008624:	3fd34413 	.word	0x3fd34413
 8008628:	0800a2fd 	.word	0x0800a2fd
 800862c:	0800a314 	.word	0x0800a314
 8008630:	7ff00000 	.word	0x7ff00000
 8008634:	0800a2f9 	.word	0x0800a2f9
 8008638:	0800a2f0 	.word	0x0800a2f0
 800863c:	0800a2cd 	.word	0x0800a2cd
 8008640:	3ff80000 	.word	0x3ff80000
 8008644:	0800a468 	.word	0x0800a468
 8008648:	0800a36f 	.word	0x0800a36f
 800864c:	2501      	movs	r5, #1
 800864e:	2300      	movs	r3, #0
 8008650:	9306      	str	r3, [sp, #24]
 8008652:	9508      	str	r5, [sp, #32]
 8008654:	f04f 33ff 	mov.w	r3, #4294967295
 8008658:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800865c:	2200      	movs	r2, #0
 800865e:	2312      	movs	r3, #18
 8008660:	e7b0      	b.n	80085c4 <_dtoa_r+0x26c>
 8008662:	2301      	movs	r3, #1
 8008664:	9308      	str	r3, [sp, #32]
 8008666:	e7f5      	b.n	8008654 <_dtoa_r+0x2fc>
 8008668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800866a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800866e:	e7b8      	b.n	80085e2 <_dtoa_r+0x28a>
 8008670:	3101      	adds	r1, #1
 8008672:	6041      	str	r1, [r0, #4]
 8008674:	0052      	lsls	r2, r2, #1
 8008676:	e7b8      	b.n	80085ea <_dtoa_r+0x292>
 8008678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800867a:	9a01      	ldr	r2, [sp, #4]
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	9b03      	ldr	r3, [sp, #12]
 8008680:	2b0e      	cmp	r3, #14
 8008682:	f200 809d 	bhi.w	80087c0 <_dtoa_r+0x468>
 8008686:	2d00      	cmp	r5, #0
 8008688:	f000 809a 	beq.w	80087c0 <_dtoa_r+0x468>
 800868c:	9b00      	ldr	r3, [sp, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	dd32      	ble.n	80086f8 <_dtoa_r+0x3a0>
 8008692:	4ab7      	ldr	r2, [pc, #732]	; (8008970 <_dtoa_r+0x618>)
 8008694:	f003 030f 	and.w	r3, r3, #15
 8008698:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800869c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086a0:	9b00      	ldr	r3, [sp, #0]
 80086a2:	05d8      	lsls	r0, r3, #23
 80086a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80086a8:	d516      	bpl.n	80086d8 <_dtoa_r+0x380>
 80086aa:	4bb2      	ldr	r3, [pc, #712]	; (8008974 <_dtoa_r+0x61c>)
 80086ac:	ec51 0b19 	vmov	r0, r1, d9
 80086b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086b4:	f7f8 f8d2 	bl	800085c <__aeabi_ddiv>
 80086b8:	f007 070f 	and.w	r7, r7, #15
 80086bc:	4682      	mov	sl, r0
 80086be:	468b      	mov	fp, r1
 80086c0:	2503      	movs	r5, #3
 80086c2:	4eac      	ldr	r6, [pc, #688]	; (8008974 <_dtoa_r+0x61c>)
 80086c4:	b957      	cbnz	r7, 80086dc <_dtoa_r+0x384>
 80086c6:	4642      	mov	r2, r8
 80086c8:	464b      	mov	r3, r9
 80086ca:	4650      	mov	r0, sl
 80086cc:	4659      	mov	r1, fp
 80086ce:	f7f8 f8c5 	bl	800085c <__aeabi_ddiv>
 80086d2:	4682      	mov	sl, r0
 80086d4:	468b      	mov	fp, r1
 80086d6:	e028      	b.n	800872a <_dtoa_r+0x3d2>
 80086d8:	2502      	movs	r5, #2
 80086da:	e7f2      	b.n	80086c2 <_dtoa_r+0x36a>
 80086dc:	07f9      	lsls	r1, r7, #31
 80086de:	d508      	bpl.n	80086f2 <_dtoa_r+0x39a>
 80086e0:	4640      	mov	r0, r8
 80086e2:	4649      	mov	r1, r9
 80086e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086e8:	f7f7 ff8e 	bl	8000608 <__aeabi_dmul>
 80086ec:	3501      	adds	r5, #1
 80086ee:	4680      	mov	r8, r0
 80086f0:	4689      	mov	r9, r1
 80086f2:	107f      	asrs	r7, r7, #1
 80086f4:	3608      	adds	r6, #8
 80086f6:	e7e5      	b.n	80086c4 <_dtoa_r+0x36c>
 80086f8:	f000 809b 	beq.w	8008832 <_dtoa_r+0x4da>
 80086fc:	9b00      	ldr	r3, [sp, #0]
 80086fe:	4f9d      	ldr	r7, [pc, #628]	; (8008974 <_dtoa_r+0x61c>)
 8008700:	425e      	negs	r6, r3
 8008702:	4b9b      	ldr	r3, [pc, #620]	; (8008970 <_dtoa_r+0x618>)
 8008704:	f006 020f 	and.w	r2, r6, #15
 8008708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	ec51 0b19 	vmov	r0, r1, d9
 8008714:	f7f7 ff78 	bl	8000608 <__aeabi_dmul>
 8008718:	1136      	asrs	r6, r6, #4
 800871a:	4682      	mov	sl, r0
 800871c:	468b      	mov	fp, r1
 800871e:	2300      	movs	r3, #0
 8008720:	2502      	movs	r5, #2
 8008722:	2e00      	cmp	r6, #0
 8008724:	d17a      	bne.n	800881c <_dtoa_r+0x4c4>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1d3      	bne.n	80086d2 <_dtoa_r+0x37a>
 800872a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 8082 	beq.w	8008836 <_dtoa_r+0x4de>
 8008732:	4b91      	ldr	r3, [pc, #580]	; (8008978 <_dtoa_r+0x620>)
 8008734:	2200      	movs	r2, #0
 8008736:	4650      	mov	r0, sl
 8008738:	4659      	mov	r1, fp
 800873a:	f7f8 f9d7 	bl	8000aec <__aeabi_dcmplt>
 800873e:	2800      	cmp	r0, #0
 8008740:	d079      	beq.n	8008836 <_dtoa_r+0x4de>
 8008742:	9b03      	ldr	r3, [sp, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d076      	beq.n	8008836 <_dtoa_r+0x4de>
 8008748:	9b02      	ldr	r3, [sp, #8]
 800874a:	2b00      	cmp	r3, #0
 800874c:	dd36      	ble.n	80087bc <_dtoa_r+0x464>
 800874e:	9b00      	ldr	r3, [sp, #0]
 8008750:	4650      	mov	r0, sl
 8008752:	4659      	mov	r1, fp
 8008754:	1e5f      	subs	r7, r3, #1
 8008756:	2200      	movs	r2, #0
 8008758:	4b88      	ldr	r3, [pc, #544]	; (800897c <_dtoa_r+0x624>)
 800875a:	f7f7 ff55 	bl	8000608 <__aeabi_dmul>
 800875e:	9e02      	ldr	r6, [sp, #8]
 8008760:	4682      	mov	sl, r0
 8008762:	468b      	mov	fp, r1
 8008764:	3501      	adds	r5, #1
 8008766:	4628      	mov	r0, r5
 8008768:	f7f7 fee4 	bl	8000534 <__aeabi_i2d>
 800876c:	4652      	mov	r2, sl
 800876e:	465b      	mov	r3, fp
 8008770:	f7f7 ff4a 	bl	8000608 <__aeabi_dmul>
 8008774:	4b82      	ldr	r3, [pc, #520]	; (8008980 <_dtoa_r+0x628>)
 8008776:	2200      	movs	r2, #0
 8008778:	f7f7 fd90 	bl	800029c <__adddf3>
 800877c:	46d0      	mov	r8, sl
 800877e:	46d9      	mov	r9, fp
 8008780:	4682      	mov	sl, r0
 8008782:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008786:	2e00      	cmp	r6, #0
 8008788:	d158      	bne.n	800883c <_dtoa_r+0x4e4>
 800878a:	4b7e      	ldr	r3, [pc, #504]	; (8008984 <_dtoa_r+0x62c>)
 800878c:	2200      	movs	r2, #0
 800878e:	4640      	mov	r0, r8
 8008790:	4649      	mov	r1, r9
 8008792:	f7f7 fd81 	bl	8000298 <__aeabi_dsub>
 8008796:	4652      	mov	r2, sl
 8008798:	465b      	mov	r3, fp
 800879a:	4680      	mov	r8, r0
 800879c:	4689      	mov	r9, r1
 800879e:	f7f8 f9c3 	bl	8000b28 <__aeabi_dcmpgt>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	f040 8295 	bne.w	8008cd2 <_dtoa_r+0x97a>
 80087a8:	4652      	mov	r2, sl
 80087aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80087ae:	4640      	mov	r0, r8
 80087b0:	4649      	mov	r1, r9
 80087b2:	f7f8 f99b 	bl	8000aec <__aeabi_dcmplt>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	f040 8289 	bne.w	8008cce <_dtoa_r+0x976>
 80087bc:	ec5b ab19 	vmov	sl, fp, d9
 80087c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f2c0 8148 	blt.w	8008a58 <_dtoa_r+0x700>
 80087c8:	9a00      	ldr	r2, [sp, #0]
 80087ca:	2a0e      	cmp	r2, #14
 80087cc:	f300 8144 	bgt.w	8008a58 <_dtoa_r+0x700>
 80087d0:	4b67      	ldr	r3, [pc, #412]	; (8008970 <_dtoa_r+0x618>)
 80087d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f280 80d5 	bge.w	800898c <_dtoa_r+0x634>
 80087e2:	9b03      	ldr	r3, [sp, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f300 80d1 	bgt.w	800898c <_dtoa_r+0x634>
 80087ea:	f040 826f 	bne.w	8008ccc <_dtoa_r+0x974>
 80087ee:	4b65      	ldr	r3, [pc, #404]	; (8008984 <_dtoa_r+0x62c>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	4640      	mov	r0, r8
 80087f4:	4649      	mov	r1, r9
 80087f6:	f7f7 ff07 	bl	8000608 <__aeabi_dmul>
 80087fa:	4652      	mov	r2, sl
 80087fc:	465b      	mov	r3, fp
 80087fe:	f7f8 f989 	bl	8000b14 <__aeabi_dcmpge>
 8008802:	9e03      	ldr	r6, [sp, #12]
 8008804:	4637      	mov	r7, r6
 8008806:	2800      	cmp	r0, #0
 8008808:	f040 8245 	bne.w	8008c96 <_dtoa_r+0x93e>
 800880c:	9d01      	ldr	r5, [sp, #4]
 800880e:	2331      	movs	r3, #49	; 0x31
 8008810:	f805 3b01 	strb.w	r3, [r5], #1
 8008814:	9b00      	ldr	r3, [sp, #0]
 8008816:	3301      	adds	r3, #1
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	e240      	b.n	8008c9e <_dtoa_r+0x946>
 800881c:	07f2      	lsls	r2, r6, #31
 800881e:	d505      	bpl.n	800882c <_dtoa_r+0x4d4>
 8008820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008824:	f7f7 fef0 	bl	8000608 <__aeabi_dmul>
 8008828:	3501      	adds	r5, #1
 800882a:	2301      	movs	r3, #1
 800882c:	1076      	asrs	r6, r6, #1
 800882e:	3708      	adds	r7, #8
 8008830:	e777      	b.n	8008722 <_dtoa_r+0x3ca>
 8008832:	2502      	movs	r5, #2
 8008834:	e779      	b.n	800872a <_dtoa_r+0x3d2>
 8008836:	9f00      	ldr	r7, [sp, #0]
 8008838:	9e03      	ldr	r6, [sp, #12]
 800883a:	e794      	b.n	8008766 <_dtoa_r+0x40e>
 800883c:	9901      	ldr	r1, [sp, #4]
 800883e:	4b4c      	ldr	r3, [pc, #304]	; (8008970 <_dtoa_r+0x618>)
 8008840:	4431      	add	r1, r6
 8008842:	910d      	str	r1, [sp, #52]	; 0x34
 8008844:	9908      	ldr	r1, [sp, #32]
 8008846:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800884a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800884e:	2900      	cmp	r1, #0
 8008850:	d043      	beq.n	80088da <_dtoa_r+0x582>
 8008852:	494d      	ldr	r1, [pc, #308]	; (8008988 <_dtoa_r+0x630>)
 8008854:	2000      	movs	r0, #0
 8008856:	f7f8 f801 	bl	800085c <__aeabi_ddiv>
 800885a:	4652      	mov	r2, sl
 800885c:	465b      	mov	r3, fp
 800885e:	f7f7 fd1b 	bl	8000298 <__aeabi_dsub>
 8008862:	9d01      	ldr	r5, [sp, #4]
 8008864:	4682      	mov	sl, r0
 8008866:	468b      	mov	fp, r1
 8008868:	4649      	mov	r1, r9
 800886a:	4640      	mov	r0, r8
 800886c:	f7f8 f97c 	bl	8000b68 <__aeabi_d2iz>
 8008870:	4606      	mov	r6, r0
 8008872:	f7f7 fe5f 	bl	8000534 <__aeabi_i2d>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4640      	mov	r0, r8
 800887c:	4649      	mov	r1, r9
 800887e:	f7f7 fd0b 	bl	8000298 <__aeabi_dsub>
 8008882:	3630      	adds	r6, #48	; 0x30
 8008884:	f805 6b01 	strb.w	r6, [r5], #1
 8008888:	4652      	mov	r2, sl
 800888a:	465b      	mov	r3, fp
 800888c:	4680      	mov	r8, r0
 800888e:	4689      	mov	r9, r1
 8008890:	f7f8 f92c 	bl	8000aec <__aeabi_dcmplt>
 8008894:	2800      	cmp	r0, #0
 8008896:	d163      	bne.n	8008960 <_dtoa_r+0x608>
 8008898:	4642      	mov	r2, r8
 800889a:	464b      	mov	r3, r9
 800889c:	4936      	ldr	r1, [pc, #216]	; (8008978 <_dtoa_r+0x620>)
 800889e:	2000      	movs	r0, #0
 80088a0:	f7f7 fcfa 	bl	8000298 <__aeabi_dsub>
 80088a4:	4652      	mov	r2, sl
 80088a6:	465b      	mov	r3, fp
 80088a8:	f7f8 f920 	bl	8000aec <__aeabi_dcmplt>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	f040 80b5 	bne.w	8008a1c <_dtoa_r+0x6c4>
 80088b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088b4:	429d      	cmp	r5, r3
 80088b6:	d081      	beq.n	80087bc <_dtoa_r+0x464>
 80088b8:	4b30      	ldr	r3, [pc, #192]	; (800897c <_dtoa_r+0x624>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	4650      	mov	r0, sl
 80088be:	4659      	mov	r1, fp
 80088c0:	f7f7 fea2 	bl	8000608 <__aeabi_dmul>
 80088c4:	4b2d      	ldr	r3, [pc, #180]	; (800897c <_dtoa_r+0x624>)
 80088c6:	4682      	mov	sl, r0
 80088c8:	468b      	mov	fp, r1
 80088ca:	4640      	mov	r0, r8
 80088cc:	4649      	mov	r1, r9
 80088ce:	2200      	movs	r2, #0
 80088d0:	f7f7 fe9a 	bl	8000608 <__aeabi_dmul>
 80088d4:	4680      	mov	r8, r0
 80088d6:	4689      	mov	r9, r1
 80088d8:	e7c6      	b.n	8008868 <_dtoa_r+0x510>
 80088da:	4650      	mov	r0, sl
 80088dc:	4659      	mov	r1, fp
 80088de:	f7f7 fe93 	bl	8000608 <__aeabi_dmul>
 80088e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088e4:	9d01      	ldr	r5, [sp, #4]
 80088e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088e8:	4682      	mov	sl, r0
 80088ea:	468b      	mov	fp, r1
 80088ec:	4649      	mov	r1, r9
 80088ee:	4640      	mov	r0, r8
 80088f0:	f7f8 f93a 	bl	8000b68 <__aeabi_d2iz>
 80088f4:	4606      	mov	r6, r0
 80088f6:	f7f7 fe1d 	bl	8000534 <__aeabi_i2d>
 80088fa:	3630      	adds	r6, #48	; 0x30
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	4640      	mov	r0, r8
 8008902:	4649      	mov	r1, r9
 8008904:	f7f7 fcc8 	bl	8000298 <__aeabi_dsub>
 8008908:	f805 6b01 	strb.w	r6, [r5], #1
 800890c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800890e:	429d      	cmp	r5, r3
 8008910:	4680      	mov	r8, r0
 8008912:	4689      	mov	r9, r1
 8008914:	f04f 0200 	mov.w	r2, #0
 8008918:	d124      	bne.n	8008964 <_dtoa_r+0x60c>
 800891a:	4b1b      	ldr	r3, [pc, #108]	; (8008988 <_dtoa_r+0x630>)
 800891c:	4650      	mov	r0, sl
 800891e:	4659      	mov	r1, fp
 8008920:	f7f7 fcbc 	bl	800029c <__adddf3>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4640      	mov	r0, r8
 800892a:	4649      	mov	r1, r9
 800892c:	f7f8 f8fc 	bl	8000b28 <__aeabi_dcmpgt>
 8008930:	2800      	cmp	r0, #0
 8008932:	d173      	bne.n	8008a1c <_dtoa_r+0x6c4>
 8008934:	4652      	mov	r2, sl
 8008936:	465b      	mov	r3, fp
 8008938:	4913      	ldr	r1, [pc, #76]	; (8008988 <_dtoa_r+0x630>)
 800893a:	2000      	movs	r0, #0
 800893c:	f7f7 fcac 	bl	8000298 <__aeabi_dsub>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4640      	mov	r0, r8
 8008946:	4649      	mov	r1, r9
 8008948:	f7f8 f8d0 	bl	8000aec <__aeabi_dcmplt>
 800894c:	2800      	cmp	r0, #0
 800894e:	f43f af35 	beq.w	80087bc <_dtoa_r+0x464>
 8008952:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008954:	1e6b      	subs	r3, r5, #1
 8008956:	930f      	str	r3, [sp, #60]	; 0x3c
 8008958:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800895c:	2b30      	cmp	r3, #48	; 0x30
 800895e:	d0f8      	beq.n	8008952 <_dtoa_r+0x5fa>
 8008960:	9700      	str	r7, [sp, #0]
 8008962:	e049      	b.n	80089f8 <_dtoa_r+0x6a0>
 8008964:	4b05      	ldr	r3, [pc, #20]	; (800897c <_dtoa_r+0x624>)
 8008966:	f7f7 fe4f 	bl	8000608 <__aeabi_dmul>
 800896a:	4680      	mov	r8, r0
 800896c:	4689      	mov	r9, r1
 800896e:	e7bd      	b.n	80088ec <_dtoa_r+0x594>
 8008970:	0800a468 	.word	0x0800a468
 8008974:	0800a440 	.word	0x0800a440
 8008978:	3ff00000 	.word	0x3ff00000
 800897c:	40240000 	.word	0x40240000
 8008980:	401c0000 	.word	0x401c0000
 8008984:	40140000 	.word	0x40140000
 8008988:	3fe00000 	.word	0x3fe00000
 800898c:	9d01      	ldr	r5, [sp, #4]
 800898e:	4656      	mov	r6, sl
 8008990:	465f      	mov	r7, fp
 8008992:	4642      	mov	r2, r8
 8008994:	464b      	mov	r3, r9
 8008996:	4630      	mov	r0, r6
 8008998:	4639      	mov	r1, r7
 800899a:	f7f7 ff5f 	bl	800085c <__aeabi_ddiv>
 800899e:	f7f8 f8e3 	bl	8000b68 <__aeabi_d2iz>
 80089a2:	4682      	mov	sl, r0
 80089a4:	f7f7 fdc6 	bl	8000534 <__aeabi_i2d>
 80089a8:	4642      	mov	r2, r8
 80089aa:	464b      	mov	r3, r9
 80089ac:	f7f7 fe2c 	bl	8000608 <__aeabi_dmul>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4630      	mov	r0, r6
 80089b6:	4639      	mov	r1, r7
 80089b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80089bc:	f7f7 fc6c 	bl	8000298 <__aeabi_dsub>
 80089c0:	f805 6b01 	strb.w	r6, [r5], #1
 80089c4:	9e01      	ldr	r6, [sp, #4]
 80089c6:	9f03      	ldr	r7, [sp, #12]
 80089c8:	1bae      	subs	r6, r5, r6
 80089ca:	42b7      	cmp	r7, r6
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	d135      	bne.n	8008a3e <_dtoa_r+0x6e6>
 80089d2:	f7f7 fc63 	bl	800029c <__adddf3>
 80089d6:	4642      	mov	r2, r8
 80089d8:	464b      	mov	r3, r9
 80089da:	4606      	mov	r6, r0
 80089dc:	460f      	mov	r7, r1
 80089de:	f7f8 f8a3 	bl	8000b28 <__aeabi_dcmpgt>
 80089e2:	b9d0      	cbnz	r0, 8008a1a <_dtoa_r+0x6c2>
 80089e4:	4642      	mov	r2, r8
 80089e6:	464b      	mov	r3, r9
 80089e8:	4630      	mov	r0, r6
 80089ea:	4639      	mov	r1, r7
 80089ec:	f7f8 f874 	bl	8000ad8 <__aeabi_dcmpeq>
 80089f0:	b110      	cbz	r0, 80089f8 <_dtoa_r+0x6a0>
 80089f2:	f01a 0f01 	tst.w	sl, #1
 80089f6:	d110      	bne.n	8008a1a <_dtoa_r+0x6c2>
 80089f8:	4620      	mov	r0, r4
 80089fa:	ee18 1a10 	vmov	r1, s16
 80089fe:	f000 fd13 	bl	8009428 <_Bfree>
 8008a02:	2300      	movs	r3, #0
 8008a04:	9800      	ldr	r0, [sp, #0]
 8008a06:	702b      	strb	r3, [r5, #0]
 8008a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	6018      	str	r0, [r3, #0]
 8008a0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f43f acf1 	beq.w	80083f8 <_dtoa_r+0xa0>
 8008a16:	601d      	str	r5, [r3, #0]
 8008a18:	e4ee      	b.n	80083f8 <_dtoa_r+0xa0>
 8008a1a:	9f00      	ldr	r7, [sp, #0]
 8008a1c:	462b      	mov	r3, r5
 8008a1e:	461d      	mov	r5, r3
 8008a20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a24:	2a39      	cmp	r2, #57	; 0x39
 8008a26:	d106      	bne.n	8008a36 <_dtoa_r+0x6de>
 8008a28:	9a01      	ldr	r2, [sp, #4]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d1f7      	bne.n	8008a1e <_dtoa_r+0x6c6>
 8008a2e:	9901      	ldr	r1, [sp, #4]
 8008a30:	2230      	movs	r2, #48	; 0x30
 8008a32:	3701      	adds	r7, #1
 8008a34:	700a      	strb	r2, [r1, #0]
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	3201      	adds	r2, #1
 8008a3a:	701a      	strb	r2, [r3, #0]
 8008a3c:	e790      	b.n	8008960 <_dtoa_r+0x608>
 8008a3e:	4ba6      	ldr	r3, [pc, #664]	; (8008cd8 <_dtoa_r+0x980>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	f7f7 fde1 	bl	8000608 <__aeabi_dmul>
 8008a46:	2200      	movs	r2, #0
 8008a48:	2300      	movs	r3, #0
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	460f      	mov	r7, r1
 8008a4e:	f7f8 f843 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d09d      	beq.n	8008992 <_dtoa_r+0x63a>
 8008a56:	e7cf      	b.n	80089f8 <_dtoa_r+0x6a0>
 8008a58:	9a08      	ldr	r2, [sp, #32]
 8008a5a:	2a00      	cmp	r2, #0
 8008a5c:	f000 80d7 	beq.w	8008c0e <_dtoa_r+0x8b6>
 8008a60:	9a06      	ldr	r2, [sp, #24]
 8008a62:	2a01      	cmp	r2, #1
 8008a64:	f300 80ba 	bgt.w	8008bdc <_dtoa_r+0x884>
 8008a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a6a:	2a00      	cmp	r2, #0
 8008a6c:	f000 80b2 	beq.w	8008bd4 <_dtoa_r+0x87c>
 8008a70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a74:	9e07      	ldr	r6, [sp, #28]
 8008a76:	9d04      	ldr	r5, [sp, #16]
 8008a78:	9a04      	ldr	r2, [sp, #16]
 8008a7a:	441a      	add	r2, r3
 8008a7c:	9204      	str	r2, [sp, #16]
 8008a7e:	9a05      	ldr	r2, [sp, #20]
 8008a80:	2101      	movs	r1, #1
 8008a82:	441a      	add	r2, r3
 8008a84:	4620      	mov	r0, r4
 8008a86:	9205      	str	r2, [sp, #20]
 8008a88:	f000 fd86 	bl	8009598 <__i2b>
 8008a8c:	4607      	mov	r7, r0
 8008a8e:	2d00      	cmp	r5, #0
 8008a90:	dd0c      	ble.n	8008aac <_dtoa_r+0x754>
 8008a92:	9b05      	ldr	r3, [sp, #20]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dd09      	ble.n	8008aac <_dtoa_r+0x754>
 8008a98:	42ab      	cmp	r3, r5
 8008a9a:	9a04      	ldr	r2, [sp, #16]
 8008a9c:	bfa8      	it	ge
 8008a9e:	462b      	movge	r3, r5
 8008aa0:	1ad2      	subs	r2, r2, r3
 8008aa2:	9204      	str	r2, [sp, #16]
 8008aa4:	9a05      	ldr	r2, [sp, #20]
 8008aa6:	1aed      	subs	r5, r5, r3
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	9305      	str	r3, [sp, #20]
 8008aac:	9b07      	ldr	r3, [sp, #28]
 8008aae:	b31b      	cbz	r3, 8008af8 <_dtoa_r+0x7a0>
 8008ab0:	9b08      	ldr	r3, [sp, #32]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f000 80af 	beq.w	8008c16 <_dtoa_r+0x8be>
 8008ab8:	2e00      	cmp	r6, #0
 8008aba:	dd13      	ble.n	8008ae4 <_dtoa_r+0x78c>
 8008abc:	4639      	mov	r1, r7
 8008abe:	4632      	mov	r2, r6
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 fe29 	bl	8009718 <__pow5mult>
 8008ac6:	ee18 2a10 	vmov	r2, s16
 8008aca:	4601      	mov	r1, r0
 8008acc:	4607      	mov	r7, r0
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f000 fd78 	bl	80095c4 <__multiply>
 8008ad4:	ee18 1a10 	vmov	r1, s16
 8008ad8:	4680      	mov	r8, r0
 8008ada:	4620      	mov	r0, r4
 8008adc:	f000 fca4 	bl	8009428 <_Bfree>
 8008ae0:	ee08 8a10 	vmov	s16, r8
 8008ae4:	9b07      	ldr	r3, [sp, #28]
 8008ae6:	1b9a      	subs	r2, r3, r6
 8008ae8:	d006      	beq.n	8008af8 <_dtoa_r+0x7a0>
 8008aea:	ee18 1a10 	vmov	r1, s16
 8008aee:	4620      	mov	r0, r4
 8008af0:	f000 fe12 	bl	8009718 <__pow5mult>
 8008af4:	ee08 0a10 	vmov	s16, r0
 8008af8:	2101      	movs	r1, #1
 8008afa:	4620      	mov	r0, r4
 8008afc:	f000 fd4c 	bl	8009598 <__i2b>
 8008b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	4606      	mov	r6, r0
 8008b06:	f340 8088 	ble.w	8008c1a <_dtoa_r+0x8c2>
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	4601      	mov	r1, r0
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 fe02 	bl	8009718 <__pow5mult>
 8008b14:	9b06      	ldr	r3, [sp, #24]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	4606      	mov	r6, r0
 8008b1a:	f340 8081 	ble.w	8008c20 <_dtoa_r+0x8c8>
 8008b1e:	f04f 0800 	mov.w	r8, #0
 8008b22:	6933      	ldr	r3, [r6, #16]
 8008b24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b28:	6918      	ldr	r0, [r3, #16]
 8008b2a:	f000 fce5 	bl	80094f8 <__hi0bits>
 8008b2e:	f1c0 0020 	rsb	r0, r0, #32
 8008b32:	9b05      	ldr	r3, [sp, #20]
 8008b34:	4418      	add	r0, r3
 8008b36:	f010 001f 	ands.w	r0, r0, #31
 8008b3a:	f000 8092 	beq.w	8008c62 <_dtoa_r+0x90a>
 8008b3e:	f1c0 0320 	rsb	r3, r0, #32
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	f340 808a 	ble.w	8008c5c <_dtoa_r+0x904>
 8008b48:	f1c0 001c 	rsb	r0, r0, #28
 8008b4c:	9b04      	ldr	r3, [sp, #16]
 8008b4e:	4403      	add	r3, r0
 8008b50:	9304      	str	r3, [sp, #16]
 8008b52:	9b05      	ldr	r3, [sp, #20]
 8008b54:	4403      	add	r3, r0
 8008b56:	4405      	add	r5, r0
 8008b58:	9305      	str	r3, [sp, #20]
 8008b5a:	9b04      	ldr	r3, [sp, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	dd07      	ble.n	8008b70 <_dtoa_r+0x818>
 8008b60:	ee18 1a10 	vmov	r1, s16
 8008b64:	461a      	mov	r2, r3
 8008b66:	4620      	mov	r0, r4
 8008b68:	f000 fe30 	bl	80097cc <__lshift>
 8008b6c:	ee08 0a10 	vmov	s16, r0
 8008b70:	9b05      	ldr	r3, [sp, #20]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	dd05      	ble.n	8008b82 <_dtoa_r+0x82a>
 8008b76:	4631      	mov	r1, r6
 8008b78:	461a      	mov	r2, r3
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 fe26 	bl	80097cc <__lshift>
 8008b80:	4606      	mov	r6, r0
 8008b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d06e      	beq.n	8008c66 <_dtoa_r+0x90e>
 8008b88:	ee18 0a10 	vmov	r0, s16
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	f000 fe8d 	bl	80098ac <__mcmp>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	da67      	bge.n	8008c66 <_dtoa_r+0x90e>
 8008b96:	9b00      	ldr	r3, [sp, #0]
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	ee18 1a10 	vmov	r1, s16
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	220a      	movs	r2, #10
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f000 fc61 	bl	800946c <__multadd>
 8008baa:	9b08      	ldr	r3, [sp, #32]
 8008bac:	ee08 0a10 	vmov	s16, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f000 81b1 	beq.w	8008f18 <_dtoa_r+0xbc0>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	4639      	mov	r1, r7
 8008bba:	220a      	movs	r2, #10
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f000 fc55 	bl	800946c <__multadd>
 8008bc2:	9b02      	ldr	r3, [sp, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	4607      	mov	r7, r0
 8008bc8:	f300 808e 	bgt.w	8008ce8 <_dtoa_r+0x990>
 8008bcc:	9b06      	ldr	r3, [sp, #24]
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	dc51      	bgt.n	8008c76 <_dtoa_r+0x91e>
 8008bd2:	e089      	b.n	8008ce8 <_dtoa_r+0x990>
 8008bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008bda:	e74b      	b.n	8008a74 <_dtoa_r+0x71c>
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	1e5e      	subs	r6, r3, #1
 8008be0:	9b07      	ldr	r3, [sp, #28]
 8008be2:	42b3      	cmp	r3, r6
 8008be4:	bfbf      	itttt	lt
 8008be6:	9b07      	ldrlt	r3, [sp, #28]
 8008be8:	9607      	strlt	r6, [sp, #28]
 8008bea:	1af2      	sublt	r2, r6, r3
 8008bec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008bee:	bfb6      	itet	lt
 8008bf0:	189b      	addlt	r3, r3, r2
 8008bf2:	1b9e      	subge	r6, r3, r6
 8008bf4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008bf6:	9b03      	ldr	r3, [sp, #12]
 8008bf8:	bfb8      	it	lt
 8008bfa:	2600      	movlt	r6, #0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	bfb7      	itett	lt
 8008c00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008c04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008c08:	1a9d      	sublt	r5, r3, r2
 8008c0a:	2300      	movlt	r3, #0
 8008c0c:	e734      	b.n	8008a78 <_dtoa_r+0x720>
 8008c0e:	9e07      	ldr	r6, [sp, #28]
 8008c10:	9d04      	ldr	r5, [sp, #16]
 8008c12:	9f08      	ldr	r7, [sp, #32]
 8008c14:	e73b      	b.n	8008a8e <_dtoa_r+0x736>
 8008c16:	9a07      	ldr	r2, [sp, #28]
 8008c18:	e767      	b.n	8008aea <_dtoa_r+0x792>
 8008c1a:	9b06      	ldr	r3, [sp, #24]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	dc18      	bgt.n	8008c52 <_dtoa_r+0x8fa>
 8008c20:	f1ba 0f00 	cmp.w	sl, #0
 8008c24:	d115      	bne.n	8008c52 <_dtoa_r+0x8fa>
 8008c26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c2a:	b993      	cbnz	r3, 8008c52 <_dtoa_r+0x8fa>
 8008c2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c30:	0d1b      	lsrs	r3, r3, #20
 8008c32:	051b      	lsls	r3, r3, #20
 8008c34:	b183      	cbz	r3, 8008c58 <_dtoa_r+0x900>
 8008c36:	9b04      	ldr	r3, [sp, #16]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	9304      	str	r3, [sp, #16]
 8008c3c:	9b05      	ldr	r3, [sp, #20]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	9305      	str	r3, [sp, #20]
 8008c42:	f04f 0801 	mov.w	r8, #1
 8008c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f47f af6a 	bne.w	8008b22 <_dtoa_r+0x7ca>
 8008c4e:	2001      	movs	r0, #1
 8008c50:	e76f      	b.n	8008b32 <_dtoa_r+0x7da>
 8008c52:	f04f 0800 	mov.w	r8, #0
 8008c56:	e7f6      	b.n	8008c46 <_dtoa_r+0x8ee>
 8008c58:	4698      	mov	r8, r3
 8008c5a:	e7f4      	b.n	8008c46 <_dtoa_r+0x8ee>
 8008c5c:	f43f af7d 	beq.w	8008b5a <_dtoa_r+0x802>
 8008c60:	4618      	mov	r0, r3
 8008c62:	301c      	adds	r0, #28
 8008c64:	e772      	b.n	8008b4c <_dtoa_r+0x7f4>
 8008c66:	9b03      	ldr	r3, [sp, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	dc37      	bgt.n	8008cdc <_dtoa_r+0x984>
 8008c6c:	9b06      	ldr	r3, [sp, #24]
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	dd34      	ble.n	8008cdc <_dtoa_r+0x984>
 8008c72:	9b03      	ldr	r3, [sp, #12]
 8008c74:	9302      	str	r3, [sp, #8]
 8008c76:	9b02      	ldr	r3, [sp, #8]
 8008c78:	b96b      	cbnz	r3, 8008c96 <_dtoa_r+0x93e>
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	2205      	movs	r2, #5
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f000 fbf4 	bl	800946c <__multadd>
 8008c84:	4601      	mov	r1, r0
 8008c86:	4606      	mov	r6, r0
 8008c88:	ee18 0a10 	vmov	r0, s16
 8008c8c:	f000 fe0e 	bl	80098ac <__mcmp>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	f73f adbb 	bgt.w	800880c <_dtoa_r+0x4b4>
 8008c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c98:	9d01      	ldr	r5, [sp, #4]
 8008c9a:	43db      	mvns	r3, r3
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	f04f 0800 	mov.w	r8, #0
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	f000 fbbf 	bl	8009428 <_Bfree>
 8008caa:	2f00      	cmp	r7, #0
 8008cac:	f43f aea4 	beq.w	80089f8 <_dtoa_r+0x6a0>
 8008cb0:	f1b8 0f00 	cmp.w	r8, #0
 8008cb4:	d005      	beq.n	8008cc2 <_dtoa_r+0x96a>
 8008cb6:	45b8      	cmp	r8, r7
 8008cb8:	d003      	beq.n	8008cc2 <_dtoa_r+0x96a>
 8008cba:	4641      	mov	r1, r8
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f000 fbb3 	bl	8009428 <_Bfree>
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f000 fbaf 	bl	8009428 <_Bfree>
 8008cca:	e695      	b.n	80089f8 <_dtoa_r+0x6a0>
 8008ccc:	2600      	movs	r6, #0
 8008cce:	4637      	mov	r7, r6
 8008cd0:	e7e1      	b.n	8008c96 <_dtoa_r+0x93e>
 8008cd2:	9700      	str	r7, [sp, #0]
 8008cd4:	4637      	mov	r7, r6
 8008cd6:	e599      	b.n	800880c <_dtoa_r+0x4b4>
 8008cd8:	40240000 	.word	0x40240000
 8008cdc:	9b08      	ldr	r3, [sp, #32]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 80ca 	beq.w	8008e78 <_dtoa_r+0xb20>
 8008ce4:	9b03      	ldr	r3, [sp, #12]
 8008ce6:	9302      	str	r3, [sp, #8]
 8008ce8:	2d00      	cmp	r5, #0
 8008cea:	dd05      	ble.n	8008cf8 <_dtoa_r+0x9a0>
 8008cec:	4639      	mov	r1, r7
 8008cee:	462a      	mov	r2, r5
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f000 fd6b 	bl	80097cc <__lshift>
 8008cf6:	4607      	mov	r7, r0
 8008cf8:	f1b8 0f00 	cmp.w	r8, #0
 8008cfc:	d05b      	beq.n	8008db6 <_dtoa_r+0xa5e>
 8008cfe:	6879      	ldr	r1, [r7, #4]
 8008d00:	4620      	mov	r0, r4
 8008d02:	f000 fb51 	bl	80093a8 <_Balloc>
 8008d06:	4605      	mov	r5, r0
 8008d08:	b928      	cbnz	r0, 8008d16 <_dtoa_r+0x9be>
 8008d0a:	4b87      	ldr	r3, [pc, #540]	; (8008f28 <_dtoa_r+0xbd0>)
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d12:	f7ff bb3b 	b.w	800838c <_dtoa_r+0x34>
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	3202      	adds	r2, #2
 8008d1a:	0092      	lsls	r2, r2, #2
 8008d1c:	f107 010c 	add.w	r1, r7, #12
 8008d20:	300c      	adds	r0, #12
 8008d22:	f000 fb33 	bl	800938c <memcpy>
 8008d26:	2201      	movs	r2, #1
 8008d28:	4629      	mov	r1, r5
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f000 fd4e 	bl	80097cc <__lshift>
 8008d30:	9b01      	ldr	r3, [sp, #4]
 8008d32:	f103 0901 	add.w	r9, r3, #1
 8008d36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	9305      	str	r3, [sp, #20]
 8008d3e:	f00a 0301 	and.w	r3, sl, #1
 8008d42:	46b8      	mov	r8, r7
 8008d44:	9304      	str	r3, [sp, #16]
 8008d46:	4607      	mov	r7, r0
 8008d48:	4631      	mov	r1, r6
 8008d4a:	ee18 0a10 	vmov	r0, s16
 8008d4e:	f7ff fa77 	bl	8008240 <quorem>
 8008d52:	4641      	mov	r1, r8
 8008d54:	9002      	str	r0, [sp, #8]
 8008d56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d5a:	ee18 0a10 	vmov	r0, s16
 8008d5e:	f000 fda5 	bl	80098ac <__mcmp>
 8008d62:	463a      	mov	r2, r7
 8008d64:	9003      	str	r0, [sp, #12]
 8008d66:	4631      	mov	r1, r6
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f000 fdbb 	bl	80098e4 <__mdiff>
 8008d6e:	68c2      	ldr	r2, [r0, #12]
 8008d70:	f109 3bff 	add.w	fp, r9, #4294967295
 8008d74:	4605      	mov	r5, r0
 8008d76:	bb02      	cbnz	r2, 8008dba <_dtoa_r+0xa62>
 8008d78:	4601      	mov	r1, r0
 8008d7a:	ee18 0a10 	vmov	r0, s16
 8008d7e:	f000 fd95 	bl	80098ac <__mcmp>
 8008d82:	4602      	mov	r2, r0
 8008d84:	4629      	mov	r1, r5
 8008d86:	4620      	mov	r0, r4
 8008d88:	9207      	str	r2, [sp, #28]
 8008d8a:	f000 fb4d 	bl	8009428 <_Bfree>
 8008d8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d92:	ea43 0102 	orr.w	r1, r3, r2
 8008d96:	9b04      	ldr	r3, [sp, #16]
 8008d98:	430b      	orrs	r3, r1
 8008d9a:	464d      	mov	r5, r9
 8008d9c:	d10f      	bne.n	8008dbe <_dtoa_r+0xa66>
 8008d9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008da2:	d02a      	beq.n	8008dfa <_dtoa_r+0xaa2>
 8008da4:	9b03      	ldr	r3, [sp, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	dd02      	ble.n	8008db0 <_dtoa_r+0xa58>
 8008daa:	9b02      	ldr	r3, [sp, #8]
 8008dac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008db0:	f88b a000 	strb.w	sl, [fp]
 8008db4:	e775      	b.n	8008ca2 <_dtoa_r+0x94a>
 8008db6:	4638      	mov	r0, r7
 8008db8:	e7ba      	b.n	8008d30 <_dtoa_r+0x9d8>
 8008dba:	2201      	movs	r2, #1
 8008dbc:	e7e2      	b.n	8008d84 <_dtoa_r+0xa2c>
 8008dbe:	9b03      	ldr	r3, [sp, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	db04      	blt.n	8008dce <_dtoa_r+0xa76>
 8008dc4:	9906      	ldr	r1, [sp, #24]
 8008dc6:	430b      	orrs	r3, r1
 8008dc8:	9904      	ldr	r1, [sp, #16]
 8008dca:	430b      	orrs	r3, r1
 8008dcc:	d122      	bne.n	8008e14 <_dtoa_r+0xabc>
 8008dce:	2a00      	cmp	r2, #0
 8008dd0:	ddee      	ble.n	8008db0 <_dtoa_r+0xa58>
 8008dd2:	ee18 1a10 	vmov	r1, s16
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f000 fcf7 	bl	80097cc <__lshift>
 8008dde:	4631      	mov	r1, r6
 8008de0:	ee08 0a10 	vmov	s16, r0
 8008de4:	f000 fd62 	bl	80098ac <__mcmp>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	dc03      	bgt.n	8008df4 <_dtoa_r+0xa9c>
 8008dec:	d1e0      	bne.n	8008db0 <_dtoa_r+0xa58>
 8008dee:	f01a 0f01 	tst.w	sl, #1
 8008df2:	d0dd      	beq.n	8008db0 <_dtoa_r+0xa58>
 8008df4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008df8:	d1d7      	bne.n	8008daa <_dtoa_r+0xa52>
 8008dfa:	2339      	movs	r3, #57	; 0x39
 8008dfc:	f88b 3000 	strb.w	r3, [fp]
 8008e00:	462b      	mov	r3, r5
 8008e02:	461d      	mov	r5, r3
 8008e04:	3b01      	subs	r3, #1
 8008e06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e0a:	2a39      	cmp	r2, #57	; 0x39
 8008e0c:	d071      	beq.n	8008ef2 <_dtoa_r+0xb9a>
 8008e0e:	3201      	adds	r2, #1
 8008e10:	701a      	strb	r2, [r3, #0]
 8008e12:	e746      	b.n	8008ca2 <_dtoa_r+0x94a>
 8008e14:	2a00      	cmp	r2, #0
 8008e16:	dd07      	ble.n	8008e28 <_dtoa_r+0xad0>
 8008e18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e1c:	d0ed      	beq.n	8008dfa <_dtoa_r+0xaa2>
 8008e1e:	f10a 0301 	add.w	r3, sl, #1
 8008e22:	f88b 3000 	strb.w	r3, [fp]
 8008e26:	e73c      	b.n	8008ca2 <_dtoa_r+0x94a>
 8008e28:	9b05      	ldr	r3, [sp, #20]
 8008e2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008e2e:	4599      	cmp	r9, r3
 8008e30:	d047      	beq.n	8008ec2 <_dtoa_r+0xb6a>
 8008e32:	ee18 1a10 	vmov	r1, s16
 8008e36:	2300      	movs	r3, #0
 8008e38:	220a      	movs	r2, #10
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 fb16 	bl	800946c <__multadd>
 8008e40:	45b8      	cmp	r8, r7
 8008e42:	ee08 0a10 	vmov	s16, r0
 8008e46:	f04f 0300 	mov.w	r3, #0
 8008e4a:	f04f 020a 	mov.w	r2, #10
 8008e4e:	4641      	mov	r1, r8
 8008e50:	4620      	mov	r0, r4
 8008e52:	d106      	bne.n	8008e62 <_dtoa_r+0xb0a>
 8008e54:	f000 fb0a 	bl	800946c <__multadd>
 8008e58:	4680      	mov	r8, r0
 8008e5a:	4607      	mov	r7, r0
 8008e5c:	f109 0901 	add.w	r9, r9, #1
 8008e60:	e772      	b.n	8008d48 <_dtoa_r+0x9f0>
 8008e62:	f000 fb03 	bl	800946c <__multadd>
 8008e66:	4639      	mov	r1, r7
 8008e68:	4680      	mov	r8, r0
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	220a      	movs	r2, #10
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f000 fafc 	bl	800946c <__multadd>
 8008e74:	4607      	mov	r7, r0
 8008e76:	e7f1      	b.n	8008e5c <_dtoa_r+0xb04>
 8008e78:	9b03      	ldr	r3, [sp, #12]
 8008e7a:	9302      	str	r3, [sp, #8]
 8008e7c:	9d01      	ldr	r5, [sp, #4]
 8008e7e:	ee18 0a10 	vmov	r0, s16
 8008e82:	4631      	mov	r1, r6
 8008e84:	f7ff f9dc 	bl	8008240 <quorem>
 8008e88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e8c:	9b01      	ldr	r3, [sp, #4]
 8008e8e:	f805 ab01 	strb.w	sl, [r5], #1
 8008e92:	1aea      	subs	r2, r5, r3
 8008e94:	9b02      	ldr	r3, [sp, #8]
 8008e96:	4293      	cmp	r3, r2
 8008e98:	dd09      	ble.n	8008eae <_dtoa_r+0xb56>
 8008e9a:	ee18 1a10 	vmov	r1, s16
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	220a      	movs	r2, #10
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 fae2 	bl	800946c <__multadd>
 8008ea8:	ee08 0a10 	vmov	s16, r0
 8008eac:	e7e7      	b.n	8008e7e <_dtoa_r+0xb26>
 8008eae:	9b02      	ldr	r3, [sp, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	bfc8      	it	gt
 8008eb4:	461d      	movgt	r5, r3
 8008eb6:	9b01      	ldr	r3, [sp, #4]
 8008eb8:	bfd8      	it	le
 8008eba:	2501      	movle	r5, #1
 8008ebc:	441d      	add	r5, r3
 8008ebe:	f04f 0800 	mov.w	r8, #0
 8008ec2:	ee18 1a10 	vmov	r1, s16
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f000 fc7f 	bl	80097cc <__lshift>
 8008ece:	4631      	mov	r1, r6
 8008ed0:	ee08 0a10 	vmov	s16, r0
 8008ed4:	f000 fcea 	bl	80098ac <__mcmp>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	dc91      	bgt.n	8008e00 <_dtoa_r+0xaa8>
 8008edc:	d102      	bne.n	8008ee4 <_dtoa_r+0xb8c>
 8008ede:	f01a 0f01 	tst.w	sl, #1
 8008ee2:	d18d      	bne.n	8008e00 <_dtoa_r+0xaa8>
 8008ee4:	462b      	mov	r3, r5
 8008ee6:	461d      	mov	r5, r3
 8008ee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008eec:	2a30      	cmp	r2, #48	; 0x30
 8008eee:	d0fa      	beq.n	8008ee6 <_dtoa_r+0xb8e>
 8008ef0:	e6d7      	b.n	8008ca2 <_dtoa_r+0x94a>
 8008ef2:	9a01      	ldr	r2, [sp, #4]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d184      	bne.n	8008e02 <_dtoa_r+0xaaa>
 8008ef8:	9b00      	ldr	r3, [sp, #0]
 8008efa:	3301      	adds	r3, #1
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	2331      	movs	r3, #49	; 0x31
 8008f00:	7013      	strb	r3, [r2, #0]
 8008f02:	e6ce      	b.n	8008ca2 <_dtoa_r+0x94a>
 8008f04:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <_dtoa_r+0xbd4>)
 8008f06:	f7ff ba95 	b.w	8008434 <_dtoa_r+0xdc>
 8008f0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f47f aa6e 	bne.w	80083ee <_dtoa_r+0x96>
 8008f12:	4b07      	ldr	r3, [pc, #28]	; (8008f30 <_dtoa_r+0xbd8>)
 8008f14:	f7ff ba8e 	b.w	8008434 <_dtoa_r+0xdc>
 8008f18:	9b02      	ldr	r3, [sp, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dcae      	bgt.n	8008e7c <_dtoa_r+0xb24>
 8008f1e:	9b06      	ldr	r3, [sp, #24]
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	f73f aea8 	bgt.w	8008c76 <_dtoa_r+0x91e>
 8008f26:	e7a9      	b.n	8008e7c <_dtoa_r+0xb24>
 8008f28:	0800a36f 	.word	0x0800a36f
 8008f2c:	0800a2cc 	.word	0x0800a2cc
 8008f30:	0800a2f0 	.word	0x0800a2f0

08008f34 <__sflush_r>:
 8008f34:	898a      	ldrh	r2, [r1, #12]
 8008f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	0710      	lsls	r0, r2, #28
 8008f3e:	460c      	mov	r4, r1
 8008f40:	d458      	bmi.n	8008ff4 <__sflush_r+0xc0>
 8008f42:	684b      	ldr	r3, [r1, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	dc05      	bgt.n	8008f54 <__sflush_r+0x20>
 8008f48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	dc02      	bgt.n	8008f54 <__sflush_r+0x20>
 8008f4e:	2000      	movs	r0, #0
 8008f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f56:	2e00      	cmp	r6, #0
 8008f58:	d0f9      	beq.n	8008f4e <__sflush_r+0x1a>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f60:	682f      	ldr	r7, [r5, #0]
 8008f62:	602b      	str	r3, [r5, #0]
 8008f64:	d032      	beq.n	8008fcc <__sflush_r+0x98>
 8008f66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	075a      	lsls	r2, r3, #29
 8008f6c:	d505      	bpl.n	8008f7a <__sflush_r+0x46>
 8008f6e:	6863      	ldr	r3, [r4, #4]
 8008f70:	1ac0      	subs	r0, r0, r3
 8008f72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f74:	b10b      	cbz	r3, 8008f7a <__sflush_r+0x46>
 8008f76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f78:	1ac0      	subs	r0, r0, r3
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f80:	6a21      	ldr	r1, [r4, #32]
 8008f82:	4628      	mov	r0, r5
 8008f84:	47b0      	blx	r6
 8008f86:	1c43      	adds	r3, r0, #1
 8008f88:	89a3      	ldrh	r3, [r4, #12]
 8008f8a:	d106      	bne.n	8008f9a <__sflush_r+0x66>
 8008f8c:	6829      	ldr	r1, [r5, #0]
 8008f8e:	291d      	cmp	r1, #29
 8008f90:	d82c      	bhi.n	8008fec <__sflush_r+0xb8>
 8008f92:	4a2a      	ldr	r2, [pc, #168]	; (800903c <__sflush_r+0x108>)
 8008f94:	40ca      	lsrs	r2, r1
 8008f96:	07d6      	lsls	r6, r2, #31
 8008f98:	d528      	bpl.n	8008fec <__sflush_r+0xb8>
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	6062      	str	r2, [r4, #4]
 8008f9e:	04d9      	lsls	r1, r3, #19
 8008fa0:	6922      	ldr	r2, [r4, #16]
 8008fa2:	6022      	str	r2, [r4, #0]
 8008fa4:	d504      	bpl.n	8008fb0 <__sflush_r+0x7c>
 8008fa6:	1c42      	adds	r2, r0, #1
 8008fa8:	d101      	bne.n	8008fae <__sflush_r+0x7a>
 8008faa:	682b      	ldr	r3, [r5, #0]
 8008fac:	b903      	cbnz	r3, 8008fb0 <__sflush_r+0x7c>
 8008fae:	6560      	str	r0, [r4, #84]	; 0x54
 8008fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fb2:	602f      	str	r7, [r5, #0]
 8008fb4:	2900      	cmp	r1, #0
 8008fb6:	d0ca      	beq.n	8008f4e <__sflush_r+0x1a>
 8008fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fbc:	4299      	cmp	r1, r3
 8008fbe:	d002      	beq.n	8008fc6 <__sflush_r+0x92>
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	f000 fd8b 	bl	8009adc <_free_r>
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	6360      	str	r0, [r4, #52]	; 0x34
 8008fca:	e7c1      	b.n	8008f50 <__sflush_r+0x1c>
 8008fcc:	6a21      	ldr	r1, [r4, #32]
 8008fce:	2301      	movs	r3, #1
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	47b0      	blx	r6
 8008fd4:	1c41      	adds	r1, r0, #1
 8008fd6:	d1c7      	bne.n	8008f68 <__sflush_r+0x34>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d0c4      	beq.n	8008f68 <__sflush_r+0x34>
 8008fde:	2b1d      	cmp	r3, #29
 8008fe0:	d001      	beq.n	8008fe6 <__sflush_r+0xb2>
 8008fe2:	2b16      	cmp	r3, #22
 8008fe4:	d101      	bne.n	8008fea <__sflush_r+0xb6>
 8008fe6:	602f      	str	r7, [r5, #0]
 8008fe8:	e7b1      	b.n	8008f4e <__sflush_r+0x1a>
 8008fea:	89a3      	ldrh	r3, [r4, #12]
 8008fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ff0:	81a3      	strh	r3, [r4, #12]
 8008ff2:	e7ad      	b.n	8008f50 <__sflush_r+0x1c>
 8008ff4:	690f      	ldr	r7, [r1, #16]
 8008ff6:	2f00      	cmp	r7, #0
 8008ff8:	d0a9      	beq.n	8008f4e <__sflush_r+0x1a>
 8008ffa:	0793      	lsls	r3, r2, #30
 8008ffc:	680e      	ldr	r6, [r1, #0]
 8008ffe:	bf08      	it	eq
 8009000:	694b      	ldreq	r3, [r1, #20]
 8009002:	600f      	str	r7, [r1, #0]
 8009004:	bf18      	it	ne
 8009006:	2300      	movne	r3, #0
 8009008:	eba6 0807 	sub.w	r8, r6, r7
 800900c:	608b      	str	r3, [r1, #8]
 800900e:	f1b8 0f00 	cmp.w	r8, #0
 8009012:	dd9c      	ble.n	8008f4e <__sflush_r+0x1a>
 8009014:	6a21      	ldr	r1, [r4, #32]
 8009016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009018:	4643      	mov	r3, r8
 800901a:	463a      	mov	r2, r7
 800901c:	4628      	mov	r0, r5
 800901e:	47b0      	blx	r6
 8009020:	2800      	cmp	r0, #0
 8009022:	dc06      	bgt.n	8009032 <__sflush_r+0xfe>
 8009024:	89a3      	ldrh	r3, [r4, #12]
 8009026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800902a:	81a3      	strh	r3, [r4, #12]
 800902c:	f04f 30ff 	mov.w	r0, #4294967295
 8009030:	e78e      	b.n	8008f50 <__sflush_r+0x1c>
 8009032:	4407      	add	r7, r0
 8009034:	eba8 0800 	sub.w	r8, r8, r0
 8009038:	e7e9      	b.n	800900e <__sflush_r+0xda>
 800903a:	bf00      	nop
 800903c:	20400001 	.word	0x20400001

08009040 <_fflush_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	690b      	ldr	r3, [r1, #16]
 8009044:	4605      	mov	r5, r0
 8009046:	460c      	mov	r4, r1
 8009048:	b913      	cbnz	r3, 8009050 <_fflush_r+0x10>
 800904a:	2500      	movs	r5, #0
 800904c:	4628      	mov	r0, r5
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	b118      	cbz	r0, 800905a <_fflush_r+0x1a>
 8009052:	6983      	ldr	r3, [r0, #24]
 8009054:	b90b      	cbnz	r3, 800905a <_fflush_r+0x1a>
 8009056:	f000 f887 	bl	8009168 <__sinit>
 800905a:	4b14      	ldr	r3, [pc, #80]	; (80090ac <_fflush_r+0x6c>)
 800905c:	429c      	cmp	r4, r3
 800905e:	d11b      	bne.n	8009098 <_fflush_r+0x58>
 8009060:	686c      	ldr	r4, [r5, #4]
 8009062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0ef      	beq.n	800904a <_fflush_r+0xa>
 800906a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800906c:	07d0      	lsls	r0, r2, #31
 800906e:	d404      	bmi.n	800907a <_fflush_r+0x3a>
 8009070:	0599      	lsls	r1, r3, #22
 8009072:	d402      	bmi.n	800907a <_fflush_r+0x3a>
 8009074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009076:	f000 f91a 	bl	80092ae <__retarget_lock_acquire_recursive>
 800907a:	4628      	mov	r0, r5
 800907c:	4621      	mov	r1, r4
 800907e:	f7ff ff59 	bl	8008f34 <__sflush_r>
 8009082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009084:	07da      	lsls	r2, r3, #31
 8009086:	4605      	mov	r5, r0
 8009088:	d4e0      	bmi.n	800904c <_fflush_r+0xc>
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	059b      	lsls	r3, r3, #22
 800908e:	d4dd      	bmi.n	800904c <_fflush_r+0xc>
 8009090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009092:	f000 f90d 	bl	80092b0 <__retarget_lock_release_recursive>
 8009096:	e7d9      	b.n	800904c <_fflush_r+0xc>
 8009098:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <_fflush_r+0x70>)
 800909a:	429c      	cmp	r4, r3
 800909c:	d101      	bne.n	80090a2 <_fflush_r+0x62>
 800909e:	68ac      	ldr	r4, [r5, #8]
 80090a0:	e7df      	b.n	8009062 <_fflush_r+0x22>
 80090a2:	4b04      	ldr	r3, [pc, #16]	; (80090b4 <_fflush_r+0x74>)
 80090a4:	429c      	cmp	r4, r3
 80090a6:	bf08      	it	eq
 80090a8:	68ec      	ldreq	r4, [r5, #12]
 80090aa:	e7da      	b.n	8009062 <_fflush_r+0x22>
 80090ac:	0800a3a0 	.word	0x0800a3a0
 80090b0:	0800a3c0 	.word	0x0800a3c0
 80090b4:	0800a380 	.word	0x0800a380

080090b8 <std>:
 80090b8:	2300      	movs	r3, #0
 80090ba:	b510      	push	{r4, lr}
 80090bc:	4604      	mov	r4, r0
 80090be:	e9c0 3300 	strd	r3, r3, [r0]
 80090c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090c6:	6083      	str	r3, [r0, #8]
 80090c8:	8181      	strh	r1, [r0, #12]
 80090ca:	6643      	str	r3, [r0, #100]	; 0x64
 80090cc:	81c2      	strh	r2, [r0, #14]
 80090ce:	6183      	str	r3, [r0, #24]
 80090d0:	4619      	mov	r1, r3
 80090d2:	2208      	movs	r2, #8
 80090d4:	305c      	adds	r0, #92	; 0x5c
 80090d6:	f7fe faf3 	bl	80076c0 <memset>
 80090da:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <std+0x38>)
 80090dc:	6263      	str	r3, [r4, #36]	; 0x24
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <std+0x3c>)
 80090e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80090e2:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <std+0x40>)
 80090e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090e6:	4b05      	ldr	r3, [pc, #20]	; (80090fc <std+0x44>)
 80090e8:	6224      	str	r4, [r4, #32]
 80090ea:	6323      	str	r3, [r4, #48]	; 0x30
 80090ec:	bd10      	pop	{r4, pc}
 80090ee:	bf00      	nop
 80090f0:	08009f71 	.word	0x08009f71
 80090f4:	08009f93 	.word	0x08009f93
 80090f8:	08009fcb 	.word	0x08009fcb
 80090fc:	08009fef 	.word	0x08009fef

08009100 <_cleanup_r>:
 8009100:	4901      	ldr	r1, [pc, #4]	; (8009108 <_cleanup_r+0x8>)
 8009102:	f000 b8af 	b.w	8009264 <_fwalk_reent>
 8009106:	bf00      	nop
 8009108:	08009041 	.word	0x08009041

0800910c <__sfmoreglue>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	2268      	movs	r2, #104	; 0x68
 8009110:	1e4d      	subs	r5, r1, #1
 8009112:	4355      	muls	r5, r2
 8009114:	460e      	mov	r6, r1
 8009116:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800911a:	f000 fd4b 	bl	8009bb4 <_malloc_r>
 800911e:	4604      	mov	r4, r0
 8009120:	b140      	cbz	r0, 8009134 <__sfmoreglue+0x28>
 8009122:	2100      	movs	r1, #0
 8009124:	e9c0 1600 	strd	r1, r6, [r0]
 8009128:	300c      	adds	r0, #12
 800912a:	60a0      	str	r0, [r4, #8]
 800912c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009130:	f7fe fac6 	bl	80076c0 <memset>
 8009134:	4620      	mov	r0, r4
 8009136:	bd70      	pop	{r4, r5, r6, pc}

08009138 <__sfp_lock_acquire>:
 8009138:	4801      	ldr	r0, [pc, #4]	; (8009140 <__sfp_lock_acquire+0x8>)
 800913a:	f000 b8b8 	b.w	80092ae <__retarget_lock_acquire_recursive>
 800913e:	bf00      	nop
 8009140:	200003a5 	.word	0x200003a5

08009144 <__sfp_lock_release>:
 8009144:	4801      	ldr	r0, [pc, #4]	; (800914c <__sfp_lock_release+0x8>)
 8009146:	f000 b8b3 	b.w	80092b0 <__retarget_lock_release_recursive>
 800914a:	bf00      	nop
 800914c:	200003a5 	.word	0x200003a5

08009150 <__sinit_lock_acquire>:
 8009150:	4801      	ldr	r0, [pc, #4]	; (8009158 <__sinit_lock_acquire+0x8>)
 8009152:	f000 b8ac 	b.w	80092ae <__retarget_lock_acquire_recursive>
 8009156:	bf00      	nop
 8009158:	200003a6 	.word	0x200003a6

0800915c <__sinit_lock_release>:
 800915c:	4801      	ldr	r0, [pc, #4]	; (8009164 <__sinit_lock_release+0x8>)
 800915e:	f000 b8a7 	b.w	80092b0 <__retarget_lock_release_recursive>
 8009162:	bf00      	nop
 8009164:	200003a6 	.word	0x200003a6

08009168 <__sinit>:
 8009168:	b510      	push	{r4, lr}
 800916a:	4604      	mov	r4, r0
 800916c:	f7ff fff0 	bl	8009150 <__sinit_lock_acquire>
 8009170:	69a3      	ldr	r3, [r4, #24]
 8009172:	b11b      	cbz	r3, 800917c <__sinit+0x14>
 8009174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009178:	f7ff bff0 	b.w	800915c <__sinit_lock_release>
 800917c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009180:	6523      	str	r3, [r4, #80]	; 0x50
 8009182:	4b13      	ldr	r3, [pc, #76]	; (80091d0 <__sinit+0x68>)
 8009184:	4a13      	ldr	r2, [pc, #76]	; (80091d4 <__sinit+0x6c>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	62a2      	str	r2, [r4, #40]	; 0x28
 800918a:	42a3      	cmp	r3, r4
 800918c:	bf04      	itt	eq
 800918e:	2301      	moveq	r3, #1
 8009190:	61a3      	streq	r3, [r4, #24]
 8009192:	4620      	mov	r0, r4
 8009194:	f000 f820 	bl	80091d8 <__sfp>
 8009198:	6060      	str	r0, [r4, #4]
 800919a:	4620      	mov	r0, r4
 800919c:	f000 f81c 	bl	80091d8 <__sfp>
 80091a0:	60a0      	str	r0, [r4, #8]
 80091a2:	4620      	mov	r0, r4
 80091a4:	f000 f818 	bl	80091d8 <__sfp>
 80091a8:	2200      	movs	r2, #0
 80091aa:	60e0      	str	r0, [r4, #12]
 80091ac:	2104      	movs	r1, #4
 80091ae:	6860      	ldr	r0, [r4, #4]
 80091b0:	f7ff ff82 	bl	80090b8 <std>
 80091b4:	68a0      	ldr	r0, [r4, #8]
 80091b6:	2201      	movs	r2, #1
 80091b8:	2109      	movs	r1, #9
 80091ba:	f7ff ff7d 	bl	80090b8 <std>
 80091be:	68e0      	ldr	r0, [r4, #12]
 80091c0:	2202      	movs	r2, #2
 80091c2:	2112      	movs	r1, #18
 80091c4:	f7ff ff78 	bl	80090b8 <std>
 80091c8:	2301      	movs	r3, #1
 80091ca:	61a3      	str	r3, [r4, #24]
 80091cc:	e7d2      	b.n	8009174 <__sinit+0xc>
 80091ce:	bf00      	nop
 80091d0:	0800a2b8 	.word	0x0800a2b8
 80091d4:	08009101 	.word	0x08009101

080091d8 <__sfp>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	4607      	mov	r7, r0
 80091dc:	f7ff ffac 	bl	8009138 <__sfp_lock_acquire>
 80091e0:	4b1e      	ldr	r3, [pc, #120]	; (800925c <__sfp+0x84>)
 80091e2:	681e      	ldr	r6, [r3, #0]
 80091e4:	69b3      	ldr	r3, [r6, #24]
 80091e6:	b913      	cbnz	r3, 80091ee <__sfp+0x16>
 80091e8:	4630      	mov	r0, r6
 80091ea:	f7ff ffbd 	bl	8009168 <__sinit>
 80091ee:	3648      	adds	r6, #72	; 0x48
 80091f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091f4:	3b01      	subs	r3, #1
 80091f6:	d503      	bpl.n	8009200 <__sfp+0x28>
 80091f8:	6833      	ldr	r3, [r6, #0]
 80091fa:	b30b      	cbz	r3, 8009240 <__sfp+0x68>
 80091fc:	6836      	ldr	r6, [r6, #0]
 80091fe:	e7f7      	b.n	80091f0 <__sfp+0x18>
 8009200:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009204:	b9d5      	cbnz	r5, 800923c <__sfp+0x64>
 8009206:	4b16      	ldr	r3, [pc, #88]	; (8009260 <__sfp+0x88>)
 8009208:	60e3      	str	r3, [r4, #12]
 800920a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800920e:	6665      	str	r5, [r4, #100]	; 0x64
 8009210:	f000 f84c 	bl	80092ac <__retarget_lock_init_recursive>
 8009214:	f7ff ff96 	bl	8009144 <__sfp_lock_release>
 8009218:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800921c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009220:	6025      	str	r5, [r4, #0]
 8009222:	61a5      	str	r5, [r4, #24]
 8009224:	2208      	movs	r2, #8
 8009226:	4629      	mov	r1, r5
 8009228:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800922c:	f7fe fa48 	bl	80076c0 <memset>
 8009230:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009234:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009238:	4620      	mov	r0, r4
 800923a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800923c:	3468      	adds	r4, #104	; 0x68
 800923e:	e7d9      	b.n	80091f4 <__sfp+0x1c>
 8009240:	2104      	movs	r1, #4
 8009242:	4638      	mov	r0, r7
 8009244:	f7ff ff62 	bl	800910c <__sfmoreglue>
 8009248:	4604      	mov	r4, r0
 800924a:	6030      	str	r0, [r6, #0]
 800924c:	2800      	cmp	r0, #0
 800924e:	d1d5      	bne.n	80091fc <__sfp+0x24>
 8009250:	f7ff ff78 	bl	8009144 <__sfp_lock_release>
 8009254:	230c      	movs	r3, #12
 8009256:	603b      	str	r3, [r7, #0]
 8009258:	e7ee      	b.n	8009238 <__sfp+0x60>
 800925a:	bf00      	nop
 800925c:	0800a2b8 	.word	0x0800a2b8
 8009260:	ffff0001 	.word	0xffff0001

08009264 <_fwalk_reent>:
 8009264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009268:	4606      	mov	r6, r0
 800926a:	4688      	mov	r8, r1
 800926c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009270:	2700      	movs	r7, #0
 8009272:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009276:	f1b9 0901 	subs.w	r9, r9, #1
 800927a:	d505      	bpl.n	8009288 <_fwalk_reent+0x24>
 800927c:	6824      	ldr	r4, [r4, #0]
 800927e:	2c00      	cmp	r4, #0
 8009280:	d1f7      	bne.n	8009272 <_fwalk_reent+0xe>
 8009282:	4638      	mov	r0, r7
 8009284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009288:	89ab      	ldrh	r3, [r5, #12]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d907      	bls.n	800929e <_fwalk_reent+0x3a>
 800928e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009292:	3301      	adds	r3, #1
 8009294:	d003      	beq.n	800929e <_fwalk_reent+0x3a>
 8009296:	4629      	mov	r1, r5
 8009298:	4630      	mov	r0, r6
 800929a:	47c0      	blx	r8
 800929c:	4307      	orrs	r7, r0
 800929e:	3568      	adds	r5, #104	; 0x68
 80092a0:	e7e9      	b.n	8009276 <_fwalk_reent+0x12>
	...

080092a4 <_localeconv_r>:
 80092a4:	4800      	ldr	r0, [pc, #0]	; (80092a8 <_localeconv_r+0x4>)
 80092a6:	4770      	bx	lr
 80092a8:	20000190 	.word	0x20000190

080092ac <__retarget_lock_init_recursive>:
 80092ac:	4770      	bx	lr

080092ae <__retarget_lock_acquire_recursive>:
 80092ae:	4770      	bx	lr

080092b0 <__retarget_lock_release_recursive>:
 80092b0:	4770      	bx	lr

080092b2 <__swhatbuf_r>:
 80092b2:	b570      	push	{r4, r5, r6, lr}
 80092b4:	460e      	mov	r6, r1
 80092b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ba:	2900      	cmp	r1, #0
 80092bc:	b096      	sub	sp, #88	; 0x58
 80092be:	4614      	mov	r4, r2
 80092c0:	461d      	mov	r5, r3
 80092c2:	da08      	bge.n	80092d6 <__swhatbuf_r+0x24>
 80092c4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	602a      	str	r2, [r5, #0]
 80092cc:	061a      	lsls	r2, r3, #24
 80092ce:	d410      	bmi.n	80092f2 <__swhatbuf_r+0x40>
 80092d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092d4:	e00e      	b.n	80092f4 <__swhatbuf_r+0x42>
 80092d6:	466a      	mov	r2, sp
 80092d8:	f000 fee0 	bl	800a09c <_fstat_r>
 80092dc:	2800      	cmp	r0, #0
 80092de:	dbf1      	blt.n	80092c4 <__swhatbuf_r+0x12>
 80092e0:	9a01      	ldr	r2, [sp, #4]
 80092e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092ea:	425a      	negs	r2, r3
 80092ec:	415a      	adcs	r2, r3
 80092ee:	602a      	str	r2, [r5, #0]
 80092f0:	e7ee      	b.n	80092d0 <__swhatbuf_r+0x1e>
 80092f2:	2340      	movs	r3, #64	; 0x40
 80092f4:	2000      	movs	r0, #0
 80092f6:	6023      	str	r3, [r4, #0]
 80092f8:	b016      	add	sp, #88	; 0x58
 80092fa:	bd70      	pop	{r4, r5, r6, pc}

080092fc <__smakebuf_r>:
 80092fc:	898b      	ldrh	r3, [r1, #12]
 80092fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009300:	079d      	lsls	r5, r3, #30
 8009302:	4606      	mov	r6, r0
 8009304:	460c      	mov	r4, r1
 8009306:	d507      	bpl.n	8009318 <__smakebuf_r+0x1c>
 8009308:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	6123      	str	r3, [r4, #16]
 8009310:	2301      	movs	r3, #1
 8009312:	6163      	str	r3, [r4, #20]
 8009314:	b002      	add	sp, #8
 8009316:	bd70      	pop	{r4, r5, r6, pc}
 8009318:	ab01      	add	r3, sp, #4
 800931a:	466a      	mov	r2, sp
 800931c:	f7ff ffc9 	bl	80092b2 <__swhatbuf_r>
 8009320:	9900      	ldr	r1, [sp, #0]
 8009322:	4605      	mov	r5, r0
 8009324:	4630      	mov	r0, r6
 8009326:	f000 fc45 	bl	8009bb4 <_malloc_r>
 800932a:	b948      	cbnz	r0, 8009340 <__smakebuf_r+0x44>
 800932c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009330:	059a      	lsls	r2, r3, #22
 8009332:	d4ef      	bmi.n	8009314 <__smakebuf_r+0x18>
 8009334:	f023 0303 	bic.w	r3, r3, #3
 8009338:	f043 0302 	orr.w	r3, r3, #2
 800933c:	81a3      	strh	r3, [r4, #12]
 800933e:	e7e3      	b.n	8009308 <__smakebuf_r+0xc>
 8009340:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <__smakebuf_r+0x7c>)
 8009342:	62b3      	str	r3, [r6, #40]	; 0x28
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	6020      	str	r0, [r4, #0]
 8009348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800934c:	81a3      	strh	r3, [r4, #12]
 800934e:	9b00      	ldr	r3, [sp, #0]
 8009350:	6163      	str	r3, [r4, #20]
 8009352:	9b01      	ldr	r3, [sp, #4]
 8009354:	6120      	str	r0, [r4, #16]
 8009356:	b15b      	cbz	r3, 8009370 <__smakebuf_r+0x74>
 8009358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800935c:	4630      	mov	r0, r6
 800935e:	f000 feaf 	bl	800a0c0 <_isatty_r>
 8009362:	b128      	cbz	r0, 8009370 <__smakebuf_r+0x74>
 8009364:	89a3      	ldrh	r3, [r4, #12]
 8009366:	f023 0303 	bic.w	r3, r3, #3
 800936a:	f043 0301 	orr.w	r3, r3, #1
 800936e:	81a3      	strh	r3, [r4, #12]
 8009370:	89a0      	ldrh	r0, [r4, #12]
 8009372:	4305      	orrs	r5, r0
 8009374:	81a5      	strh	r5, [r4, #12]
 8009376:	e7cd      	b.n	8009314 <__smakebuf_r+0x18>
 8009378:	08009101 	.word	0x08009101

0800937c <malloc>:
 800937c:	4b02      	ldr	r3, [pc, #8]	; (8009388 <malloc+0xc>)
 800937e:	4601      	mov	r1, r0
 8009380:	6818      	ldr	r0, [r3, #0]
 8009382:	f000 bc17 	b.w	8009bb4 <_malloc_r>
 8009386:	bf00      	nop
 8009388:	2000003c 	.word	0x2000003c

0800938c <memcpy>:
 800938c:	440a      	add	r2, r1
 800938e:	4291      	cmp	r1, r2
 8009390:	f100 33ff 	add.w	r3, r0, #4294967295
 8009394:	d100      	bne.n	8009398 <memcpy+0xc>
 8009396:	4770      	bx	lr
 8009398:	b510      	push	{r4, lr}
 800939a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800939e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093a2:	4291      	cmp	r1, r2
 80093a4:	d1f9      	bne.n	800939a <memcpy+0xe>
 80093a6:	bd10      	pop	{r4, pc}

080093a8 <_Balloc>:
 80093a8:	b570      	push	{r4, r5, r6, lr}
 80093aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093ac:	4604      	mov	r4, r0
 80093ae:	460d      	mov	r5, r1
 80093b0:	b976      	cbnz	r6, 80093d0 <_Balloc+0x28>
 80093b2:	2010      	movs	r0, #16
 80093b4:	f7ff ffe2 	bl	800937c <malloc>
 80093b8:	4602      	mov	r2, r0
 80093ba:	6260      	str	r0, [r4, #36]	; 0x24
 80093bc:	b920      	cbnz	r0, 80093c8 <_Balloc+0x20>
 80093be:	4b18      	ldr	r3, [pc, #96]	; (8009420 <_Balloc+0x78>)
 80093c0:	4818      	ldr	r0, [pc, #96]	; (8009424 <_Balloc+0x7c>)
 80093c2:	2166      	movs	r1, #102	; 0x66
 80093c4:	f000 fe2a 	bl	800a01c <__assert_func>
 80093c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093cc:	6006      	str	r6, [r0, #0]
 80093ce:	60c6      	str	r6, [r0, #12]
 80093d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80093d2:	68f3      	ldr	r3, [r6, #12]
 80093d4:	b183      	cbz	r3, 80093f8 <_Balloc+0x50>
 80093d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093de:	b9b8      	cbnz	r0, 8009410 <_Balloc+0x68>
 80093e0:	2101      	movs	r1, #1
 80093e2:	fa01 f605 	lsl.w	r6, r1, r5
 80093e6:	1d72      	adds	r2, r6, #5
 80093e8:	0092      	lsls	r2, r2, #2
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 fb60 	bl	8009ab0 <_calloc_r>
 80093f0:	b160      	cbz	r0, 800940c <_Balloc+0x64>
 80093f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093f6:	e00e      	b.n	8009416 <_Balloc+0x6e>
 80093f8:	2221      	movs	r2, #33	; 0x21
 80093fa:	2104      	movs	r1, #4
 80093fc:	4620      	mov	r0, r4
 80093fe:	f000 fb57 	bl	8009ab0 <_calloc_r>
 8009402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009404:	60f0      	str	r0, [r6, #12]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1e4      	bne.n	80093d6 <_Balloc+0x2e>
 800940c:	2000      	movs	r0, #0
 800940e:	bd70      	pop	{r4, r5, r6, pc}
 8009410:	6802      	ldr	r2, [r0, #0]
 8009412:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009416:	2300      	movs	r3, #0
 8009418:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800941c:	e7f7      	b.n	800940e <_Balloc+0x66>
 800941e:	bf00      	nop
 8009420:	0800a2fd 	.word	0x0800a2fd
 8009424:	0800a3e0 	.word	0x0800a3e0

08009428 <_Bfree>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800942c:	4605      	mov	r5, r0
 800942e:	460c      	mov	r4, r1
 8009430:	b976      	cbnz	r6, 8009450 <_Bfree+0x28>
 8009432:	2010      	movs	r0, #16
 8009434:	f7ff ffa2 	bl	800937c <malloc>
 8009438:	4602      	mov	r2, r0
 800943a:	6268      	str	r0, [r5, #36]	; 0x24
 800943c:	b920      	cbnz	r0, 8009448 <_Bfree+0x20>
 800943e:	4b09      	ldr	r3, [pc, #36]	; (8009464 <_Bfree+0x3c>)
 8009440:	4809      	ldr	r0, [pc, #36]	; (8009468 <_Bfree+0x40>)
 8009442:	218a      	movs	r1, #138	; 0x8a
 8009444:	f000 fdea 	bl	800a01c <__assert_func>
 8009448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800944c:	6006      	str	r6, [r0, #0]
 800944e:	60c6      	str	r6, [r0, #12]
 8009450:	b13c      	cbz	r4, 8009462 <_Bfree+0x3a>
 8009452:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009454:	6862      	ldr	r2, [r4, #4]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800945c:	6021      	str	r1, [r4, #0]
 800945e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009462:	bd70      	pop	{r4, r5, r6, pc}
 8009464:	0800a2fd 	.word	0x0800a2fd
 8009468:	0800a3e0 	.word	0x0800a3e0

0800946c <__multadd>:
 800946c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009470:	690d      	ldr	r5, [r1, #16]
 8009472:	4607      	mov	r7, r0
 8009474:	460c      	mov	r4, r1
 8009476:	461e      	mov	r6, r3
 8009478:	f101 0c14 	add.w	ip, r1, #20
 800947c:	2000      	movs	r0, #0
 800947e:	f8dc 3000 	ldr.w	r3, [ip]
 8009482:	b299      	uxth	r1, r3
 8009484:	fb02 6101 	mla	r1, r2, r1, r6
 8009488:	0c1e      	lsrs	r6, r3, #16
 800948a:	0c0b      	lsrs	r3, r1, #16
 800948c:	fb02 3306 	mla	r3, r2, r6, r3
 8009490:	b289      	uxth	r1, r1
 8009492:	3001      	adds	r0, #1
 8009494:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009498:	4285      	cmp	r5, r0
 800949a:	f84c 1b04 	str.w	r1, [ip], #4
 800949e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094a2:	dcec      	bgt.n	800947e <__multadd+0x12>
 80094a4:	b30e      	cbz	r6, 80094ea <__multadd+0x7e>
 80094a6:	68a3      	ldr	r3, [r4, #8]
 80094a8:	42ab      	cmp	r3, r5
 80094aa:	dc19      	bgt.n	80094e0 <__multadd+0x74>
 80094ac:	6861      	ldr	r1, [r4, #4]
 80094ae:	4638      	mov	r0, r7
 80094b0:	3101      	adds	r1, #1
 80094b2:	f7ff ff79 	bl	80093a8 <_Balloc>
 80094b6:	4680      	mov	r8, r0
 80094b8:	b928      	cbnz	r0, 80094c6 <__multadd+0x5a>
 80094ba:	4602      	mov	r2, r0
 80094bc:	4b0c      	ldr	r3, [pc, #48]	; (80094f0 <__multadd+0x84>)
 80094be:	480d      	ldr	r0, [pc, #52]	; (80094f4 <__multadd+0x88>)
 80094c0:	21b5      	movs	r1, #181	; 0xb5
 80094c2:	f000 fdab 	bl	800a01c <__assert_func>
 80094c6:	6922      	ldr	r2, [r4, #16]
 80094c8:	3202      	adds	r2, #2
 80094ca:	f104 010c 	add.w	r1, r4, #12
 80094ce:	0092      	lsls	r2, r2, #2
 80094d0:	300c      	adds	r0, #12
 80094d2:	f7ff ff5b 	bl	800938c <memcpy>
 80094d6:	4621      	mov	r1, r4
 80094d8:	4638      	mov	r0, r7
 80094da:	f7ff ffa5 	bl	8009428 <_Bfree>
 80094de:	4644      	mov	r4, r8
 80094e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094e4:	3501      	adds	r5, #1
 80094e6:	615e      	str	r6, [r3, #20]
 80094e8:	6125      	str	r5, [r4, #16]
 80094ea:	4620      	mov	r0, r4
 80094ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f0:	0800a36f 	.word	0x0800a36f
 80094f4:	0800a3e0 	.word	0x0800a3e0

080094f8 <__hi0bits>:
 80094f8:	0c03      	lsrs	r3, r0, #16
 80094fa:	041b      	lsls	r3, r3, #16
 80094fc:	b9d3      	cbnz	r3, 8009534 <__hi0bits+0x3c>
 80094fe:	0400      	lsls	r0, r0, #16
 8009500:	2310      	movs	r3, #16
 8009502:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009506:	bf04      	itt	eq
 8009508:	0200      	lsleq	r0, r0, #8
 800950a:	3308      	addeq	r3, #8
 800950c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009510:	bf04      	itt	eq
 8009512:	0100      	lsleq	r0, r0, #4
 8009514:	3304      	addeq	r3, #4
 8009516:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800951a:	bf04      	itt	eq
 800951c:	0080      	lsleq	r0, r0, #2
 800951e:	3302      	addeq	r3, #2
 8009520:	2800      	cmp	r0, #0
 8009522:	db05      	blt.n	8009530 <__hi0bits+0x38>
 8009524:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009528:	f103 0301 	add.w	r3, r3, #1
 800952c:	bf08      	it	eq
 800952e:	2320      	moveq	r3, #32
 8009530:	4618      	mov	r0, r3
 8009532:	4770      	bx	lr
 8009534:	2300      	movs	r3, #0
 8009536:	e7e4      	b.n	8009502 <__hi0bits+0xa>

08009538 <__lo0bits>:
 8009538:	6803      	ldr	r3, [r0, #0]
 800953a:	f013 0207 	ands.w	r2, r3, #7
 800953e:	4601      	mov	r1, r0
 8009540:	d00b      	beq.n	800955a <__lo0bits+0x22>
 8009542:	07da      	lsls	r2, r3, #31
 8009544:	d423      	bmi.n	800958e <__lo0bits+0x56>
 8009546:	0798      	lsls	r0, r3, #30
 8009548:	bf49      	itett	mi
 800954a:	085b      	lsrmi	r3, r3, #1
 800954c:	089b      	lsrpl	r3, r3, #2
 800954e:	2001      	movmi	r0, #1
 8009550:	600b      	strmi	r3, [r1, #0]
 8009552:	bf5c      	itt	pl
 8009554:	600b      	strpl	r3, [r1, #0]
 8009556:	2002      	movpl	r0, #2
 8009558:	4770      	bx	lr
 800955a:	b298      	uxth	r0, r3
 800955c:	b9a8      	cbnz	r0, 800958a <__lo0bits+0x52>
 800955e:	0c1b      	lsrs	r3, r3, #16
 8009560:	2010      	movs	r0, #16
 8009562:	b2da      	uxtb	r2, r3
 8009564:	b90a      	cbnz	r2, 800956a <__lo0bits+0x32>
 8009566:	3008      	adds	r0, #8
 8009568:	0a1b      	lsrs	r3, r3, #8
 800956a:	071a      	lsls	r2, r3, #28
 800956c:	bf04      	itt	eq
 800956e:	091b      	lsreq	r3, r3, #4
 8009570:	3004      	addeq	r0, #4
 8009572:	079a      	lsls	r2, r3, #30
 8009574:	bf04      	itt	eq
 8009576:	089b      	lsreq	r3, r3, #2
 8009578:	3002      	addeq	r0, #2
 800957a:	07da      	lsls	r2, r3, #31
 800957c:	d403      	bmi.n	8009586 <__lo0bits+0x4e>
 800957e:	085b      	lsrs	r3, r3, #1
 8009580:	f100 0001 	add.w	r0, r0, #1
 8009584:	d005      	beq.n	8009592 <__lo0bits+0x5a>
 8009586:	600b      	str	r3, [r1, #0]
 8009588:	4770      	bx	lr
 800958a:	4610      	mov	r0, r2
 800958c:	e7e9      	b.n	8009562 <__lo0bits+0x2a>
 800958e:	2000      	movs	r0, #0
 8009590:	4770      	bx	lr
 8009592:	2020      	movs	r0, #32
 8009594:	4770      	bx	lr
	...

08009598 <__i2b>:
 8009598:	b510      	push	{r4, lr}
 800959a:	460c      	mov	r4, r1
 800959c:	2101      	movs	r1, #1
 800959e:	f7ff ff03 	bl	80093a8 <_Balloc>
 80095a2:	4602      	mov	r2, r0
 80095a4:	b928      	cbnz	r0, 80095b2 <__i2b+0x1a>
 80095a6:	4b05      	ldr	r3, [pc, #20]	; (80095bc <__i2b+0x24>)
 80095a8:	4805      	ldr	r0, [pc, #20]	; (80095c0 <__i2b+0x28>)
 80095aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80095ae:	f000 fd35 	bl	800a01c <__assert_func>
 80095b2:	2301      	movs	r3, #1
 80095b4:	6144      	str	r4, [r0, #20]
 80095b6:	6103      	str	r3, [r0, #16]
 80095b8:	bd10      	pop	{r4, pc}
 80095ba:	bf00      	nop
 80095bc:	0800a36f 	.word	0x0800a36f
 80095c0:	0800a3e0 	.word	0x0800a3e0

080095c4 <__multiply>:
 80095c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c8:	4691      	mov	r9, r2
 80095ca:	690a      	ldr	r2, [r1, #16]
 80095cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	bfb8      	it	lt
 80095d4:	460b      	movlt	r3, r1
 80095d6:	460c      	mov	r4, r1
 80095d8:	bfbc      	itt	lt
 80095da:	464c      	movlt	r4, r9
 80095dc:	4699      	movlt	r9, r3
 80095de:	6927      	ldr	r7, [r4, #16]
 80095e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095e4:	68a3      	ldr	r3, [r4, #8]
 80095e6:	6861      	ldr	r1, [r4, #4]
 80095e8:	eb07 060a 	add.w	r6, r7, sl
 80095ec:	42b3      	cmp	r3, r6
 80095ee:	b085      	sub	sp, #20
 80095f0:	bfb8      	it	lt
 80095f2:	3101      	addlt	r1, #1
 80095f4:	f7ff fed8 	bl	80093a8 <_Balloc>
 80095f8:	b930      	cbnz	r0, 8009608 <__multiply+0x44>
 80095fa:	4602      	mov	r2, r0
 80095fc:	4b44      	ldr	r3, [pc, #272]	; (8009710 <__multiply+0x14c>)
 80095fe:	4845      	ldr	r0, [pc, #276]	; (8009714 <__multiply+0x150>)
 8009600:	f240 115d 	movw	r1, #349	; 0x15d
 8009604:	f000 fd0a 	bl	800a01c <__assert_func>
 8009608:	f100 0514 	add.w	r5, r0, #20
 800960c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009610:	462b      	mov	r3, r5
 8009612:	2200      	movs	r2, #0
 8009614:	4543      	cmp	r3, r8
 8009616:	d321      	bcc.n	800965c <__multiply+0x98>
 8009618:	f104 0314 	add.w	r3, r4, #20
 800961c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009620:	f109 0314 	add.w	r3, r9, #20
 8009624:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009628:	9202      	str	r2, [sp, #8]
 800962a:	1b3a      	subs	r2, r7, r4
 800962c:	3a15      	subs	r2, #21
 800962e:	f022 0203 	bic.w	r2, r2, #3
 8009632:	3204      	adds	r2, #4
 8009634:	f104 0115 	add.w	r1, r4, #21
 8009638:	428f      	cmp	r7, r1
 800963a:	bf38      	it	cc
 800963c:	2204      	movcc	r2, #4
 800963e:	9201      	str	r2, [sp, #4]
 8009640:	9a02      	ldr	r2, [sp, #8]
 8009642:	9303      	str	r3, [sp, #12]
 8009644:	429a      	cmp	r2, r3
 8009646:	d80c      	bhi.n	8009662 <__multiply+0x9e>
 8009648:	2e00      	cmp	r6, #0
 800964a:	dd03      	ble.n	8009654 <__multiply+0x90>
 800964c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009650:	2b00      	cmp	r3, #0
 8009652:	d05a      	beq.n	800970a <__multiply+0x146>
 8009654:	6106      	str	r6, [r0, #16]
 8009656:	b005      	add	sp, #20
 8009658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965c:	f843 2b04 	str.w	r2, [r3], #4
 8009660:	e7d8      	b.n	8009614 <__multiply+0x50>
 8009662:	f8b3 a000 	ldrh.w	sl, [r3]
 8009666:	f1ba 0f00 	cmp.w	sl, #0
 800966a:	d024      	beq.n	80096b6 <__multiply+0xf2>
 800966c:	f104 0e14 	add.w	lr, r4, #20
 8009670:	46a9      	mov	r9, r5
 8009672:	f04f 0c00 	mov.w	ip, #0
 8009676:	f85e 2b04 	ldr.w	r2, [lr], #4
 800967a:	f8d9 1000 	ldr.w	r1, [r9]
 800967e:	fa1f fb82 	uxth.w	fp, r2
 8009682:	b289      	uxth	r1, r1
 8009684:	fb0a 110b 	mla	r1, sl, fp, r1
 8009688:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800968c:	f8d9 2000 	ldr.w	r2, [r9]
 8009690:	4461      	add	r1, ip
 8009692:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009696:	fb0a c20b 	mla	r2, sl, fp, ip
 800969a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800969e:	b289      	uxth	r1, r1
 80096a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80096a4:	4577      	cmp	r7, lr
 80096a6:	f849 1b04 	str.w	r1, [r9], #4
 80096aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096ae:	d8e2      	bhi.n	8009676 <__multiply+0xb2>
 80096b0:	9a01      	ldr	r2, [sp, #4]
 80096b2:	f845 c002 	str.w	ip, [r5, r2]
 80096b6:	9a03      	ldr	r2, [sp, #12]
 80096b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80096bc:	3304      	adds	r3, #4
 80096be:	f1b9 0f00 	cmp.w	r9, #0
 80096c2:	d020      	beq.n	8009706 <__multiply+0x142>
 80096c4:	6829      	ldr	r1, [r5, #0]
 80096c6:	f104 0c14 	add.w	ip, r4, #20
 80096ca:	46ae      	mov	lr, r5
 80096cc:	f04f 0a00 	mov.w	sl, #0
 80096d0:	f8bc b000 	ldrh.w	fp, [ip]
 80096d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80096d8:	fb09 220b 	mla	r2, r9, fp, r2
 80096dc:	4492      	add	sl, r2
 80096de:	b289      	uxth	r1, r1
 80096e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80096e4:	f84e 1b04 	str.w	r1, [lr], #4
 80096e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80096ec:	f8be 1000 	ldrh.w	r1, [lr]
 80096f0:	0c12      	lsrs	r2, r2, #16
 80096f2:	fb09 1102 	mla	r1, r9, r2, r1
 80096f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80096fa:	4567      	cmp	r7, ip
 80096fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009700:	d8e6      	bhi.n	80096d0 <__multiply+0x10c>
 8009702:	9a01      	ldr	r2, [sp, #4]
 8009704:	50a9      	str	r1, [r5, r2]
 8009706:	3504      	adds	r5, #4
 8009708:	e79a      	b.n	8009640 <__multiply+0x7c>
 800970a:	3e01      	subs	r6, #1
 800970c:	e79c      	b.n	8009648 <__multiply+0x84>
 800970e:	bf00      	nop
 8009710:	0800a36f 	.word	0x0800a36f
 8009714:	0800a3e0 	.word	0x0800a3e0

08009718 <__pow5mult>:
 8009718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800971c:	4615      	mov	r5, r2
 800971e:	f012 0203 	ands.w	r2, r2, #3
 8009722:	4606      	mov	r6, r0
 8009724:	460f      	mov	r7, r1
 8009726:	d007      	beq.n	8009738 <__pow5mult+0x20>
 8009728:	4c25      	ldr	r4, [pc, #148]	; (80097c0 <__pow5mult+0xa8>)
 800972a:	3a01      	subs	r2, #1
 800972c:	2300      	movs	r3, #0
 800972e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009732:	f7ff fe9b 	bl	800946c <__multadd>
 8009736:	4607      	mov	r7, r0
 8009738:	10ad      	asrs	r5, r5, #2
 800973a:	d03d      	beq.n	80097b8 <__pow5mult+0xa0>
 800973c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800973e:	b97c      	cbnz	r4, 8009760 <__pow5mult+0x48>
 8009740:	2010      	movs	r0, #16
 8009742:	f7ff fe1b 	bl	800937c <malloc>
 8009746:	4602      	mov	r2, r0
 8009748:	6270      	str	r0, [r6, #36]	; 0x24
 800974a:	b928      	cbnz	r0, 8009758 <__pow5mult+0x40>
 800974c:	4b1d      	ldr	r3, [pc, #116]	; (80097c4 <__pow5mult+0xac>)
 800974e:	481e      	ldr	r0, [pc, #120]	; (80097c8 <__pow5mult+0xb0>)
 8009750:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009754:	f000 fc62 	bl	800a01c <__assert_func>
 8009758:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800975c:	6004      	str	r4, [r0, #0]
 800975e:	60c4      	str	r4, [r0, #12]
 8009760:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009764:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009768:	b94c      	cbnz	r4, 800977e <__pow5mult+0x66>
 800976a:	f240 2171 	movw	r1, #625	; 0x271
 800976e:	4630      	mov	r0, r6
 8009770:	f7ff ff12 	bl	8009598 <__i2b>
 8009774:	2300      	movs	r3, #0
 8009776:	f8c8 0008 	str.w	r0, [r8, #8]
 800977a:	4604      	mov	r4, r0
 800977c:	6003      	str	r3, [r0, #0]
 800977e:	f04f 0900 	mov.w	r9, #0
 8009782:	07eb      	lsls	r3, r5, #31
 8009784:	d50a      	bpl.n	800979c <__pow5mult+0x84>
 8009786:	4639      	mov	r1, r7
 8009788:	4622      	mov	r2, r4
 800978a:	4630      	mov	r0, r6
 800978c:	f7ff ff1a 	bl	80095c4 <__multiply>
 8009790:	4639      	mov	r1, r7
 8009792:	4680      	mov	r8, r0
 8009794:	4630      	mov	r0, r6
 8009796:	f7ff fe47 	bl	8009428 <_Bfree>
 800979a:	4647      	mov	r7, r8
 800979c:	106d      	asrs	r5, r5, #1
 800979e:	d00b      	beq.n	80097b8 <__pow5mult+0xa0>
 80097a0:	6820      	ldr	r0, [r4, #0]
 80097a2:	b938      	cbnz	r0, 80097b4 <__pow5mult+0x9c>
 80097a4:	4622      	mov	r2, r4
 80097a6:	4621      	mov	r1, r4
 80097a8:	4630      	mov	r0, r6
 80097aa:	f7ff ff0b 	bl	80095c4 <__multiply>
 80097ae:	6020      	str	r0, [r4, #0]
 80097b0:	f8c0 9000 	str.w	r9, [r0]
 80097b4:	4604      	mov	r4, r0
 80097b6:	e7e4      	b.n	8009782 <__pow5mult+0x6a>
 80097b8:	4638      	mov	r0, r7
 80097ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097be:	bf00      	nop
 80097c0:	0800a530 	.word	0x0800a530
 80097c4:	0800a2fd 	.word	0x0800a2fd
 80097c8:	0800a3e0 	.word	0x0800a3e0

080097cc <__lshift>:
 80097cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d0:	460c      	mov	r4, r1
 80097d2:	6849      	ldr	r1, [r1, #4]
 80097d4:	6923      	ldr	r3, [r4, #16]
 80097d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097da:	68a3      	ldr	r3, [r4, #8]
 80097dc:	4607      	mov	r7, r0
 80097de:	4691      	mov	r9, r2
 80097e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097e4:	f108 0601 	add.w	r6, r8, #1
 80097e8:	42b3      	cmp	r3, r6
 80097ea:	db0b      	blt.n	8009804 <__lshift+0x38>
 80097ec:	4638      	mov	r0, r7
 80097ee:	f7ff fddb 	bl	80093a8 <_Balloc>
 80097f2:	4605      	mov	r5, r0
 80097f4:	b948      	cbnz	r0, 800980a <__lshift+0x3e>
 80097f6:	4602      	mov	r2, r0
 80097f8:	4b2a      	ldr	r3, [pc, #168]	; (80098a4 <__lshift+0xd8>)
 80097fa:	482b      	ldr	r0, [pc, #172]	; (80098a8 <__lshift+0xdc>)
 80097fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009800:	f000 fc0c 	bl	800a01c <__assert_func>
 8009804:	3101      	adds	r1, #1
 8009806:	005b      	lsls	r3, r3, #1
 8009808:	e7ee      	b.n	80097e8 <__lshift+0x1c>
 800980a:	2300      	movs	r3, #0
 800980c:	f100 0114 	add.w	r1, r0, #20
 8009810:	f100 0210 	add.w	r2, r0, #16
 8009814:	4618      	mov	r0, r3
 8009816:	4553      	cmp	r3, sl
 8009818:	db37      	blt.n	800988a <__lshift+0xbe>
 800981a:	6920      	ldr	r0, [r4, #16]
 800981c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009820:	f104 0314 	add.w	r3, r4, #20
 8009824:	f019 091f 	ands.w	r9, r9, #31
 8009828:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800982c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009830:	d02f      	beq.n	8009892 <__lshift+0xc6>
 8009832:	f1c9 0e20 	rsb	lr, r9, #32
 8009836:	468a      	mov	sl, r1
 8009838:	f04f 0c00 	mov.w	ip, #0
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	fa02 f209 	lsl.w	r2, r2, r9
 8009842:	ea42 020c 	orr.w	r2, r2, ip
 8009846:	f84a 2b04 	str.w	r2, [sl], #4
 800984a:	f853 2b04 	ldr.w	r2, [r3], #4
 800984e:	4298      	cmp	r0, r3
 8009850:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009854:	d8f2      	bhi.n	800983c <__lshift+0x70>
 8009856:	1b03      	subs	r3, r0, r4
 8009858:	3b15      	subs	r3, #21
 800985a:	f023 0303 	bic.w	r3, r3, #3
 800985e:	3304      	adds	r3, #4
 8009860:	f104 0215 	add.w	r2, r4, #21
 8009864:	4290      	cmp	r0, r2
 8009866:	bf38      	it	cc
 8009868:	2304      	movcc	r3, #4
 800986a:	f841 c003 	str.w	ip, [r1, r3]
 800986e:	f1bc 0f00 	cmp.w	ip, #0
 8009872:	d001      	beq.n	8009878 <__lshift+0xac>
 8009874:	f108 0602 	add.w	r6, r8, #2
 8009878:	3e01      	subs	r6, #1
 800987a:	4638      	mov	r0, r7
 800987c:	612e      	str	r6, [r5, #16]
 800987e:	4621      	mov	r1, r4
 8009880:	f7ff fdd2 	bl	8009428 <_Bfree>
 8009884:	4628      	mov	r0, r5
 8009886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800988a:	f842 0f04 	str.w	r0, [r2, #4]!
 800988e:	3301      	adds	r3, #1
 8009890:	e7c1      	b.n	8009816 <__lshift+0x4a>
 8009892:	3904      	subs	r1, #4
 8009894:	f853 2b04 	ldr.w	r2, [r3], #4
 8009898:	f841 2f04 	str.w	r2, [r1, #4]!
 800989c:	4298      	cmp	r0, r3
 800989e:	d8f9      	bhi.n	8009894 <__lshift+0xc8>
 80098a0:	e7ea      	b.n	8009878 <__lshift+0xac>
 80098a2:	bf00      	nop
 80098a4:	0800a36f 	.word	0x0800a36f
 80098a8:	0800a3e0 	.word	0x0800a3e0

080098ac <__mcmp>:
 80098ac:	b530      	push	{r4, r5, lr}
 80098ae:	6902      	ldr	r2, [r0, #16]
 80098b0:	690c      	ldr	r4, [r1, #16]
 80098b2:	1b12      	subs	r2, r2, r4
 80098b4:	d10e      	bne.n	80098d4 <__mcmp+0x28>
 80098b6:	f100 0314 	add.w	r3, r0, #20
 80098ba:	3114      	adds	r1, #20
 80098bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80098c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80098c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80098c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80098cc:	42a5      	cmp	r5, r4
 80098ce:	d003      	beq.n	80098d8 <__mcmp+0x2c>
 80098d0:	d305      	bcc.n	80098de <__mcmp+0x32>
 80098d2:	2201      	movs	r2, #1
 80098d4:	4610      	mov	r0, r2
 80098d6:	bd30      	pop	{r4, r5, pc}
 80098d8:	4283      	cmp	r3, r0
 80098da:	d3f3      	bcc.n	80098c4 <__mcmp+0x18>
 80098dc:	e7fa      	b.n	80098d4 <__mcmp+0x28>
 80098de:	f04f 32ff 	mov.w	r2, #4294967295
 80098e2:	e7f7      	b.n	80098d4 <__mcmp+0x28>

080098e4 <__mdiff>:
 80098e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e8:	460c      	mov	r4, r1
 80098ea:	4606      	mov	r6, r0
 80098ec:	4611      	mov	r1, r2
 80098ee:	4620      	mov	r0, r4
 80098f0:	4690      	mov	r8, r2
 80098f2:	f7ff ffdb 	bl	80098ac <__mcmp>
 80098f6:	1e05      	subs	r5, r0, #0
 80098f8:	d110      	bne.n	800991c <__mdiff+0x38>
 80098fa:	4629      	mov	r1, r5
 80098fc:	4630      	mov	r0, r6
 80098fe:	f7ff fd53 	bl	80093a8 <_Balloc>
 8009902:	b930      	cbnz	r0, 8009912 <__mdiff+0x2e>
 8009904:	4b3a      	ldr	r3, [pc, #232]	; (80099f0 <__mdiff+0x10c>)
 8009906:	4602      	mov	r2, r0
 8009908:	f240 2132 	movw	r1, #562	; 0x232
 800990c:	4839      	ldr	r0, [pc, #228]	; (80099f4 <__mdiff+0x110>)
 800990e:	f000 fb85 	bl	800a01c <__assert_func>
 8009912:	2301      	movs	r3, #1
 8009914:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800991c:	bfa4      	itt	ge
 800991e:	4643      	movge	r3, r8
 8009920:	46a0      	movge	r8, r4
 8009922:	4630      	mov	r0, r6
 8009924:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009928:	bfa6      	itte	ge
 800992a:	461c      	movge	r4, r3
 800992c:	2500      	movge	r5, #0
 800992e:	2501      	movlt	r5, #1
 8009930:	f7ff fd3a 	bl	80093a8 <_Balloc>
 8009934:	b920      	cbnz	r0, 8009940 <__mdiff+0x5c>
 8009936:	4b2e      	ldr	r3, [pc, #184]	; (80099f0 <__mdiff+0x10c>)
 8009938:	4602      	mov	r2, r0
 800993a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800993e:	e7e5      	b.n	800990c <__mdiff+0x28>
 8009940:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009944:	6926      	ldr	r6, [r4, #16]
 8009946:	60c5      	str	r5, [r0, #12]
 8009948:	f104 0914 	add.w	r9, r4, #20
 800994c:	f108 0514 	add.w	r5, r8, #20
 8009950:	f100 0e14 	add.w	lr, r0, #20
 8009954:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009958:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800995c:	f108 0210 	add.w	r2, r8, #16
 8009960:	46f2      	mov	sl, lr
 8009962:	2100      	movs	r1, #0
 8009964:	f859 3b04 	ldr.w	r3, [r9], #4
 8009968:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800996c:	fa1f f883 	uxth.w	r8, r3
 8009970:	fa11 f18b 	uxtah	r1, r1, fp
 8009974:	0c1b      	lsrs	r3, r3, #16
 8009976:	eba1 0808 	sub.w	r8, r1, r8
 800997a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800997e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009982:	fa1f f888 	uxth.w	r8, r8
 8009986:	1419      	asrs	r1, r3, #16
 8009988:	454e      	cmp	r6, r9
 800998a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800998e:	f84a 3b04 	str.w	r3, [sl], #4
 8009992:	d8e7      	bhi.n	8009964 <__mdiff+0x80>
 8009994:	1b33      	subs	r3, r6, r4
 8009996:	3b15      	subs	r3, #21
 8009998:	f023 0303 	bic.w	r3, r3, #3
 800999c:	3304      	adds	r3, #4
 800999e:	3415      	adds	r4, #21
 80099a0:	42a6      	cmp	r6, r4
 80099a2:	bf38      	it	cc
 80099a4:	2304      	movcc	r3, #4
 80099a6:	441d      	add	r5, r3
 80099a8:	4473      	add	r3, lr
 80099aa:	469e      	mov	lr, r3
 80099ac:	462e      	mov	r6, r5
 80099ae:	4566      	cmp	r6, ip
 80099b0:	d30e      	bcc.n	80099d0 <__mdiff+0xec>
 80099b2:	f10c 0203 	add.w	r2, ip, #3
 80099b6:	1b52      	subs	r2, r2, r5
 80099b8:	f022 0203 	bic.w	r2, r2, #3
 80099bc:	3d03      	subs	r5, #3
 80099be:	45ac      	cmp	ip, r5
 80099c0:	bf38      	it	cc
 80099c2:	2200      	movcc	r2, #0
 80099c4:	441a      	add	r2, r3
 80099c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80099ca:	b17b      	cbz	r3, 80099ec <__mdiff+0x108>
 80099cc:	6107      	str	r7, [r0, #16]
 80099ce:	e7a3      	b.n	8009918 <__mdiff+0x34>
 80099d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80099d4:	fa11 f288 	uxtah	r2, r1, r8
 80099d8:	1414      	asrs	r4, r2, #16
 80099da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80099de:	b292      	uxth	r2, r2
 80099e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80099e4:	f84e 2b04 	str.w	r2, [lr], #4
 80099e8:	1421      	asrs	r1, r4, #16
 80099ea:	e7e0      	b.n	80099ae <__mdiff+0xca>
 80099ec:	3f01      	subs	r7, #1
 80099ee:	e7ea      	b.n	80099c6 <__mdiff+0xe2>
 80099f0:	0800a36f 	.word	0x0800a36f
 80099f4:	0800a3e0 	.word	0x0800a3e0

080099f8 <__d2b>:
 80099f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099fc:	4689      	mov	r9, r1
 80099fe:	2101      	movs	r1, #1
 8009a00:	ec57 6b10 	vmov	r6, r7, d0
 8009a04:	4690      	mov	r8, r2
 8009a06:	f7ff fccf 	bl	80093a8 <_Balloc>
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	b930      	cbnz	r0, 8009a1c <__d2b+0x24>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	4b25      	ldr	r3, [pc, #148]	; (8009aa8 <__d2b+0xb0>)
 8009a12:	4826      	ldr	r0, [pc, #152]	; (8009aac <__d2b+0xb4>)
 8009a14:	f240 310a 	movw	r1, #778	; 0x30a
 8009a18:	f000 fb00 	bl	800a01c <__assert_func>
 8009a1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a24:	bb35      	cbnz	r5, 8009a74 <__d2b+0x7c>
 8009a26:	2e00      	cmp	r6, #0
 8009a28:	9301      	str	r3, [sp, #4]
 8009a2a:	d028      	beq.n	8009a7e <__d2b+0x86>
 8009a2c:	4668      	mov	r0, sp
 8009a2e:	9600      	str	r6, [sp, #0]
 8009a30:	f7ff fd82 	bl	8009538 <__lo0bits>
 8009a34:	9900      	ldr	r1, [sp, #0]
 8009a36:	b300      	cbz	r0, 8009a7a <__d2b+0x82>
 8009a38:	9a01      	ldr	r2, [sp, #4]
 8009a3a:	f1c0 0320 	rsb	r3, r0, #32
 8009a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a42:	430b      	orrs	r3, r1
 8009a44:	40c2      	lsrs	r2, r0
 8009a46:	6163      	str	r3, [r4, #20]
 8009a48:	9201      	str	r2, [sp, #4]
 8009a4a:	9b01      	ldr	r3, [sp, #4]
 8009a4c:	61a3      	str	r3, [r4, #24]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	bf14      	ite	ne
 8009a52:	2202      	movne	r2, #2
 8009a54:	2201      	moveq	r2, #1
 8009a56:	6122      	str	r2, [r4, #16]
 8009a58:	b1d5      	cbz	r5, 8009a90 <__d2b+0x98>
 8009a5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a5e:	4405      	add	r5, r0
 8009a60:	f8c9 5000 	str.w	r5, [r9]
 8009a64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a68:	f8c8 0000 	str.w	r0, [r8]
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	b003      	add	sp, #12
 8009a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a78:	e7d5      	b.n	8009a26 <__d2b+0x2e>
 8009a7a:	6161      	str	r1, [r4, #20]
 8009a7c:	e7e5      	b.n	8009a4a <__d2b+0x52>
 8009a7e:	a801      	add	r0, sp, #4
 8009a80:	f7ff fd5a 	bl	8009538 <__lo0bits>
 8009a84:	9b01      	ldr	r3, [sp, #4]
 8009a86:	6163      	str	r3, [r4, #20]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	6122      	str	r2, [r4, #16]
 8009a8c:	3020      	adds	r0, #32
 8009a8e:	e7e3      	b.n	8009a58 <__d2b+0x60>
 8009a90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a98:	f8c9 0000 	str.w	r0, [r9]
 8009a9c:	6918      	ldr	r0, [r3, #16]
 8009a9e:	f7ff fd2b 	bl	80094f8 <__hi0bits>
 8009aa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009aa6:	e7df      	b.n	8009a68 <__d2b+0x70>
 8009aa8:	0800a36f 	.word	0x0800a36f
 8009aac:	0800a3e0 	.word	0x0800a3e0

08009ab0 <_calloc_r>:
 8009ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ab2:	fba1 2402 	umull	r2, r4, r1, r2
 8009ab6:	b94c      	cbnz	r4, 8009acc <_calloc_r+0x1c>
 8009ab8:	4611      	mov	r1, r2
 8009aba:	9201      	str	r2, [sp, #4]
 8009abc:	f000 f87a 	bl	8009bb4 <_malloc_r>
 8009ac0:	9a01      	ldr	r2, [sp, #4]
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	b930      	cbnz	r0, 8009ad4 <_calloc_r+0x24>
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	b003      	add	sp, #12
 8009aca:	bd30      	pop	{r4, r5, pc}
 8009acc:	220c      	movs	r2, #12
 8009ace:	6002      	str	r2, [r0, #0]
 8009ad0:	2500      	movs	r5, #0
 8009ad2:	e7f8      	b.n	8009ac6 <_calloc_r+0x16>
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	f7fd fdf3 	bl	80076c0 <memset>
 8009ada:	e7f4      	b.n	8009ac6 <_calloc_r+0x16>

08009adc <_free_r>:
 8009adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ade:	2900      	cmp	r1, #0
 8009ae0:	d044      	beq.n	8009b6c <_free_r+0x90>
 8009ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ae6:	9001      	str	r0, [sp, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f1a1 0404 	sub.w	r4, r1, #4
 8009aee:	bfb8      	it	lt
 8009af0:	18e4      	addlt	r4, r4, r3
 8009af2:	f000 fb19 	bl	800a128 <__malloc_lock>
 8009af6:	4a1e      	ldr	r2, [pc, #120]	; (8009b70 <_free_r+0x94>)
 8009af8:	9801      	ldr	r0, [sp, #4]
 8009afa:	6813      	ldr	r3, [r2, #0]
 8009afc:	b933      	cbnz	r3, 8009b0c <_free_r+0x30>
 8009afe:	6063      	str	r3, [r4, #4]
 8009b00:	6014      	str	r4, [r2, #0]
 8009b02:	b003      	add	sp, #12
 8009b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b08:	f000 bb14 	b.w	800a134 <__malloc_unlock>
 8009b0c:	42a3      	cmp	r3, r4
 8009b0e:	d908      	bls.n	8009b22 <_free_r+0x46>
 8009b10:	6825      	ldr	r5, [r4, #0]
 8009b12:	1961      	adds	r1, r4, r5
 8009b14:	428b      	cmp	r3, r1
 8009b16:	bf01      	itttt	eq
 8009b18:	6819      	ldreq	r1, [r3, #0]
 8009b1a:	685b      	ldreq	r3, [r3, #4]
 8009b1c:	1949      	addeq	r1, r1, r5
 8009b1e:	6021      	streq	r1, [r4, #0]
 8009b20:	e7ed      	b.n	8009afe <_free_r+0x22>
 8009b22:	461a      	mov	r2, r3
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	b10b      	cbz	r3, 8009b2c <_free_r+0x50>
 8009b28:	42a3      	cmp	r3, r4
 8009b2a:	d9fa      	bls.n	8009b22 <_free_r+0x46>
 8009b2c:	6811      	ldr	r1, [r2, #0]
 8009b2e:	1855      	adds	r5, r2, r1
 8009b30:	42a5      	cmp	r5, r4
 8009b32:	d10b      	bne.n	8009b4c <_free_r+0x70>
 8009b34:	6824      	ldr	r4, [r4, #0]
 8009b36:	4421      	add	r1, r4
 8009b38:	1854      	adds	r4, r2, r1
 8009b3a:	42a3      	cmp	r3, r4
 8009b3c:	6011      	str	r1, [r2, #0]
 8009b3e:	d1e0      	bne.n	8009b02 <_free_r+0x26>
 8009b40:	681c      	ldr	r4, [r3, #0]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	6053      	str	r3, [r2, #4]
 8009b46:	4421      	add	r1, r4
 8009b48:	6011      	str	r1, [r2, #0]
 8009b4a:	e7da      	b.n	8009b02 <_free_r+0x26>
 8009b4c:	d902      	bls.n	8009b54 <_free_r+0x78>
 8009b4e:	230c      	movs	r3, #12
 8009b50:	6003      	str	r3, [r0, #0]
 8009b52:	e7d6      	b.n	8009b02 <_free_r+0x26>
 8009b54:	6825      	ldr	r5, [r4, #0]
 8009b56:	1961      	adds	r1, r4, r5
 8009b58:	428b      	cmp	r3, r1
 8009b5a:	bf04      	itt	eq
 8009b5c:	6819      	ldreq	r1, [r3, #0]
 8009b5e:	685b      	ldreq	r3, [r3, #4]
 8009b60:	6063      	str	r3, [r4, #4]
 8009b62:	bf04      	itt	eq
 8009b64:	1949      	addeq	r1, r1, r5
 8009b66:	6021      	streq	r1, [r4, #0]
 8009b68:	6054      	str	r4, [r2, #4]
 8009b6a:	e7ca      	b.n	8009b02 <_free_r+0x26>
 8009b6c:	b003      	add	sp, #12
 8009b6e:	bd30      	pop	{r4, r5, pc}
 8009b70:	200003a8 	.word	0x200003a8

08009b74 <sbrk_aligned>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	4e0e      	ldr	r6, [pc, #56]	; (8009bb0 <sbrk_aligned+0x3c>)
 8009b78:	460c      	mov	r4, r1
 8009b7a:	6831      	ldr	r1, [r6, #0]
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	b911      	cbnz	r1, 8009b86 <sbrk_aligned+0x12>
 8009b80:	f000 f9e6 	bl	8009f50 <_sbrk_r>
 8009b84:	6030      	str	r0, [r6, #0]
 8009b86:	4621      	mov	r1, r4
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f000 f9e1 	bl	8009f50 <_sbrk_r>
 8009b8e:	1c43      	adds	r3, r0, #1
 8009b90:	d00a      	beq.n	8009ba8 <sbrk_aligned+0x34>
 8009b92:	1cc4      	adds	r4, r0, #3
 8009b94:	f024 0403 	bic.w	r4, r4, #3
 8009b98:	42a0      	cmp	r0, r4
 8009b9a:	d007      	beq.n	8009bac <sbrk_aligned+0x38>
 8009b9c:	1a21      	subs	r1, r4, r0
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f000 f9d6 	bl	8009f50 <_sbrk_r>
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	d101      	bne.n	8009bac <sbrk_aligned+0x38>
 8009ba8:	f04f 34ff 	mov.w	r4, #4294967295
 8009bac:	4620      	mov	r0, r4
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	200003ac 	.word	0x200003ac

08009bb4 <_malloc_r>:
 8009bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb8:	1ccd      	adds	r5, r1, #3
 8009bba:	f025 0503 	bic.w	r5, r5, #3
 8009bbe:	3508      	adds	r5, #8
 8009bc0:	2d0c      	cmp	r5, #12
 8009bc2:	bf38      	it	cc
 8009bc4:	250c      	movcc	r5, #12
 8009bc6:	2d00      	cmp	r5, #0
 8009bc8:	4607      	mov	r7, r0
 8009bca:	db01      	blt.n	8009bd0 <_malloc_r+0x1c>
 8009bcc:	42a9      	cmp	r1, r5
 8009bce:	d905      	bls.n	8009bdc <_malloc_r+0x28>
 8009bd0:	230c      	movs	r3, #12
 8009bd2:	603b      	str	r3, [r7, #0]
 8009bd4:	2600      	movs	r6, #0
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bdc:	4e2e      	ldr	r6, [pc, #184]	; (8009c98 <_malloc_r+0xe4>)
 8009bde:	f000 faa3 	bl	800a128 <__malloc_lock>
 8009be2:	6833      	ldr	r3, [r6, #0]
 8009be4:	461c      	mov	r4, r3
 8009be6:	bb34      	cbnz	r4, 8009c36 <_malloc_r+0x82>
 8009be8:	4629      	mov	r1, r5
 8009bea:	4638      	mov	r0, r7
 8009bec:	f7ff ffc2 	bl	8009b74 <sbrk_aligned>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	d14d      	bne.n	8009c92 <_malloc_r+0xde>
 8009bf6:	6834      	ldr	r4, [r6, #0]
 8009bf8:	4626      	mov	r6, r4
 8009bfa:	2e00      	cmp	r6, #0
 8009bfc:	d140      	bne.n	8009c80 <_malloc_r+0xcc>
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	4631      	mov	r1, r6
 8009c02:	4638      	mov	r0, r7
 8009c04:	eb04 0803 	add.w	r8, r4, r3
 8009c08:	f000 f9a2 	bl	8009f50 <_sbrk_r>
 8009c0c:	4580      	cmp	r8, r0
 8009c0e:	d13a      	bne.n	8009c86 <_malloc_r+0xd2>
 8009c10:	6821      	ldr	r1, [r4, #0]
 8009c12:	3503      	adds	r5, #3
 8009c14:	1a6d      	subs	r5, r5, r1
 8009c16:	f025 0503 	bic.w	r5, r5, #3
 8009c1a:	3508      	adds	r5, #8
 8009c1c:	2d0c      	cmp	r5, #12
 8009c1e:	bf38      	it	cc
 8009c20:	250c      	movcc	r5, #12
 8009c22:	4629      	mov	r1, r5
 8009c24:	4638      	mov	r0, r7
 8009c26:	f7ff ffa5 	bl	8009b74 <sbrk_aligned>
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	d02b      	beq.n	8009c86 <_malloc_r+0xd2>
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	442b      	add	r3, r5
 8009c32:	6023      	str	r3, [r4, #0]
 8009c34:	e00e      	b.n	8009c54 <_malloc_r+0xa0>
 8009c36:	6822      	ldr	r2, [r4, #0]
 8009c38:	1b52      	subs	r2, r2, r5
 8009c3a:	d41e      	bmi.n	8009c7a <_malloc_r+0xc6>
 8009c3c:	2a0b      	cmp	r2, #11
 8009c3e:	d916      	bls.n	8009c6e <_malloc_r+0xba>
 8009c40:	1961      	adds	r1, r4, r5
 8009c42:	42a3      	cmp	r3, r4
 8009c44:	6025      	str	r5, [r4, #0]
 8009c46:	bf18      	it	ne
 8009c48:	6059      	strne	r1, [r3, #4]
 8009c4a:	6863      	ldr	r3, [r4, #4]
 8009c4c:	bf08      	it	eq
 8009c4e:	6031      	streq	r1, [r6, #0]
 8009c50:	5162      	str	r2, [r4, r5]
 8009c52:	604b      	str	r3, [r1, #4]
 8009c54:	4638      	mov	r0, r7
 8009c56:	f104 060b 	add.w	r6, r4, #11
 8009c5a:	f000 fa6b 	bl	800a134 <__malloc_unlock>
 8009c5e:	f026 0607 	bic.w	r6, r6, #7
 8009c62:	1d23      	adds	r3, r4, #4
 8009c64:	1af2      	subs	r2, r6, r3
 8009c66:	d0b6      	beq.n	8009bd6 <_malloc_r+0x22>
 8009c68:	1b9b      	subs	r3, r3, r6
 8009c6a:	50a3      	str	r3, [r4, r2]
 8009c6c:	e7b3      	b.n	8009bd6 <_malloc_r+0x22>
 8009c6e:	6862      	ldr	r2, [r4, #4]
 8009c70:	42a3      	cmp	r3, r4
 8009c72:	bf0c      	ite	eq
 8009c74:	6032      	streq	r2, [r6, #0]
 8009c76:	605a      	strne	r2, [r3, #4]
 8009c78:	e7ec      	b.n	8009c54 <_malloc_r+0xa0>
 8009c7a:	4623      	mov	r3, r4
 8009c7c:	6864      	ldr	r4, [r4, #4]
 8009c7e:	e7b2      	b.n	8009be6 <_malloc_r+0x32>
 8009c80:	4634      	mov	r4, r6
 8009c82:	6876      	ldr	r6, [r6, #4]
 8009c84:	e7b9      	b.n	8009bfa <_malloc_r+0x46>
 8009c86:	230c      	movs	r3, #12
 8009c88:	603b      	str	r3, [r7, #0]
 8009c8a:	4638      	mov	r0, r7
 8009c8c:	f000 fa52 	bl	800a134 <__malloc_unlock>
 8009c90:	e7a1      	b.n	8009bd6 <_malloc_r+0x22>
 8009c92:	6025      	str	r5, [r4, #0]
 8009c94:	e7de      	b.n	8009c54 <_malloc_r+0xa0>
 8009c96:	bf00      	nop
 8009c98:	200003a8 	.word	0x200003a8

08009c9c <__sfputc_r>:
 8009c9c:	6893      	ldr	r3, [r2, #8]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	b410      	push	{r4}
 8009ca4:	6093      	str	r3, [r2, #8]
 8009ca6:	da08      	bge.n	8009cba <__sfputc_r+0x1e>
 8009ca8:	6994      	ldr	r4, [r2, #24]
 8009caa:	42a3      	cmp	r3, r4
 8009cac:	db01      	blt.n	8009cb2 <__sfputc_r+0x16>
 8009cae:	290a      	cmp	r1, #10
 8009cb0:	d103      	bne.n	8009cba <__sfputc_r+0x1e>
 8009cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cb6:	f7fe ba03 	b.w	80080c0 <__swbuf_r>
 8009cba:	6813      	ldr	r3, [r2, #0]
 8009cbc:	1c58      	adds	r0, r3, #1
 8009cbe:	6010      	str	r0, [r2, #0]
 8009cc0:	7019      	strb	r1, [r3, #0]
 8009cc2:	4608      	mov	r0, r1
 8009cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <__sfputs_r>:
 8009cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ccc:	4606      	mov	r6, r0
 8009cce:	460f      	mov	r7, r1
 8009cd0:	4614      	mov	r4, r2
 8009cd2:	18d5      	adds	r5, r2, r3
 8009cd4:	42ac      	cmp	r4, r5
 8009cd6:	d101      	bne.n	8009cdc <__sfputs_r+0x12>
 8009cd8:	2000      	movs	r0, #0
 8009cda:	e007      	b.n	8009cec <__sfputs_r+0x22>
 8009cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ce0:	463a      	mov	r2, r7
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7ff ffda 	bl	8009c9c <__sfputc_r>
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	d1f3      	bne.n	8009cd4 <__sfputs_r+0xa>
 8009cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cf0 <_vfiprintf_r>:
 8009cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	460d      	mov	r5, r1
 8009cf6:	b09d      	sub	sp, #116	; 0x74
 8009cf8:	4614      	mov	r4, r2
 8009cfa:	4698      	mov	r8, r3
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	b118      	cbz	r0, 8009d08 <_vfiprintf_r+0x18>
 8009d00:	6983      	ldr	r3, [r0, #24]
 8009d02:	b90b      	cbnz	r3, 8009d08 <_vfiprintf_r+0x18>
 8009d04:	f7ff fa30 	bl	8009168 <__sinit>
 8009d08:	4b89      	ldr	r3, [pc, #548]	; (8009f30 <_vfiprintf_r+0x240>)
 8009d0a:	429d      	cmp	r5, r3
 8009d0c:	d11b      	bne.n	8009d46 <_vfiprintf_r+0x56>
 8009d0e:	6875      	ldr	r5, [r6, #4]
 8009d10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d12:	07d9      	lsls	r1, r3, #31
 8009d14:	d405      	bmi.n	8009d22 <_vfiprintf_r+0x32>
 8009d16:	89ab      	ldrh	r3, [r5, #12]
 8009d18:	059a      	lsls	r2, r3, #22
 8009d1a:	d402      	bmi.n	8009d22 <_vfiprintf_r+0x32>
 8009d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d1e:	f7ff fac6 	bl	80092ae <__retarget_lock_acquire_recursive>
 8009d22:	89ab      	ldrh	r3, [r5, #12]
 8009d24:	071b      	lsls	r3, r3, #28
 8009d26:	d501      	bpl.n	8009d2c <_vfiprintf_r+0x3c>
 8009d28:	692b      	ldr	r3, [r5, #16]
 8009d2a:	b9eb      	cbnz	r3, 8009d68 <_vfiprintf_r+0x78>
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	4630      	mov	r0, r6
 8009d30:	f7fe fa18 	bl	8008164 <__swsetup_r>
 8009d34:	b1c0      	cbz	r0, 8009d68 <_vfiprintf_r+0x78>
 8009d36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d38:	07dc      	lsls	r4, r3, #31
 8009d3a:	d50e      	bpl.n	8009d5a <_vfiprintf_r+0x6a>
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d40:	b01d      	add	sp, #116	; 0x74
 8009d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d46:	4b7b      	ldr	r3, [pc, #492]	; (8009f34 <_vfiprintf_r+0x244>)
 8009d48:	429d      	cmp	r5, r3
 8009d4a:	d101      	bne.n	8009d50 <_vfiprintf_r+0x60>
 8009d4c:	68b5      	ldr	r5, [r6, #8]
 8009d4e:	e7df      	b.n	8009d10 <_vfiprintf_r+0x20>
 8009d50:	4b79      	ldr	r3, [pc, #484]	; (8009f38 <_vfiprintf_r+0x248>)
 8009d52:	429d      	cmp	r5, r3
 8009d54:	bf08      	it	eq
 8009d56:	68f5      	ldreq	r5, [r6, #12]
 8009d58:	e7da      	b.n	8009d10 <_vfiprintf_r+0x20>
 8009d5a:	89ab      	ldrh	r3, [r5, #12]
 8009d5c:	0598      	lsls	r0, r3, #22
 8009d5e:	d4ed      	bmi.n	8009d3c <_vfiprintf_r+0x4c>
 8009d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d62:	f7ff faa5 	bl	80092b0 <__retarget_lock_release_recursive>
 8009d66:	e7e9      	b.n	8009d3c <_vfiprintf_r+0x4c>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d6c:	2320      	movs	r3, #32
 8009d6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d76:	2330      	movs	r3, #48	; 0x30
 8009d78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f3c <_vfiprintf_r+0x24c>
 8009d7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d80:	f04f 0901 	mov.w	r9, #1
 8009d84:	4623      	mov	r3, r4
 8009d86:	469a      	mov	sl, r3
 8009d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d8c:	b10a      	cbz	r2, 8009d92 <_vfiprintf_r+0xa2>
 8009d8e:	2a25      	cmp	r2, #37	; 0x25
 8009d90:	d1f9      	bne.n	8009d86 <_vfiprintf_r+0x96>
 8009d92:	ebba 0b04 	subs.w	fp, sl, r4
 8009d96:	d00b      	beq.n	8009db0 <_vfiprintf_r+0xc0>
 8009d98:	465b      	mov	r3, fp
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	4629      	mov	r1, r5
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f7ff ff93 	bl	8009cca <__sfputs_r>
 8009da4:	3001      	adds	r0, #1
 8009da6:	f000 80aa 	beq.w	8009efe <_vfiprintf_r+0x20e>
 8009daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dac:	445a      	add	r2, fp
 8009dae:	9209      	str	r2, [sp, #36]	; 0x24
 8009db0:	f89a 3000 	ldrb.w	r3, [sl]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 80a2 	beq.w	8009efe <_vfiprintf_r+0x20e>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dc4:	f10a 0a01 	add.w	sl, sl, #1
 8009dc8:	9304      	str	r3, [sp, #16]
 8009dca:	9307      	str	r3, [sp, #28]
 8009dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8009dd2:	4654      	mov	r4, sl
 8009dd4:	2205      	movs	r2, #5
 8009dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dda:	4858      	ldr	r0, [pc, #352]	; (8009f3c <_vfiprintf_r+0x24c>)
 8009ddc:	f7f6 fa08 	bl	80001f0 <memchr>
 8009de0:	9a04      	ldr	r2, [sp, #16]
 8009de2:	b9d8      	cbnz	r0, 8009e1c <_vfiprintf_r+0x12c>
 8009de4:	06d1      	lsls	r1, r2, #27
 8009de6:	bf44      	itt	mi
 8009de8:	2320      	movmi	r3, #32
 8009dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dee:	0713      	lsls	r3, r2, #28
 8009df0:	bf44      	itt	mi
 8009df2:	232b      	movmi	r3, #43	; 0x2b
 8009df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009df8:	f89a 3000 	ldrb.w	r3, [sl]
 8009dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8009dfe:	d015      	beq.n	8009e2c <_vfiprintf_r+0x13c>
 8009e00:	9a07      	ldr	r2, [sp, #28]
 8009e02:	4654      	mov	r4, sl
 8009e04:	2000      	movs	r0, #0
 8009e06:	f04f 0c0a 	mov.w	ip, #10
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e10:	3b30      	subs	r3, #48	; 0x30
 8009e12:	2b09      	cmp	r3, #9
 8009e14:	d94e      	bls.n	8009eb4 <_vfiprintf_r+0x1c4>
 8009e16:	b1b0      	cbz	r0, 8009e46 <_vfiprintf_r+0x156>
 8009e18:	9207      	str	r2, [sp, #28]
 8009e1a:	e014      	b.n	8009e46 <_vfiprintf_r+0x156>
 8009e1c:	eba0 0308 	sub.w	r3, r0, r8
 8009e20:	fa09 f303 	lsl.w	r3, r9, r3
 8009e24:	4313      	orrs	r3, r2
 8009e26:	9304      	str	r3, [sp, #16]
 8009e28:	46a2      	mov	sl, r4
 8009e2a:	e7d2      	b.n	8009dd2 <_vfiprintf_r+0xe2>
 8009e2c:	9b03      	ldr	r3, [sp, #12]
 8009e2e:	1d19      	adds	r1, r3, #4
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	9103      	str	r1, [sp, #12]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	bfbb      	ittet	lt
 8009e38:	425b      	neglt	r3, r3
 8009e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8009e3e:	9307      	strge	r3, [sp, #28]
 8009e40:	9307      	strlt	r3, [sp, #28]
 8009e42:	bfb8      	it	lt
 8009e44:	9204      	strlt	r2, [sp, #16]
 8009e46:	7823      	ldrb	r3, [r4, #0]
 8009e48:	2b2e      	cmp	r3, #46	; 0x2e
 8009e4a:	d10c      	bne.n	8009e66 <_vfiprintf_r+0x176>
 8009e4c:	7863      	ldrb	r3, [r4, #1]
 8009e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e50:	d135      	bne.n	8009ebe <_vfiprintf_r+0x1ce>
 8009e52:	9b03      	ldr	r3, [sp, #12]
 8009e54:	1d1a      	adds	r2, r3, #4
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	9203      	str	r2, [sp, #12]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	bfb8      	it	lt
 8009e5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e62:	3402      	adds	r4, #2
 8009e64:	9305      	str	r3, [sp, #20]
 8009e66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f4c <_vfiprintf_r+0x25c>
 8009e6a:	7821      	ldrb	r1, [r4, #0]
 8009e6c:	2203      	movs	r2, #3
 8009e6e:	4650      	mov	r0, sl
 8009e70:	f7f6 f9be 	bl	80001f0 <memchr>
 8009e74:	b140      	cbz	r0, 8009e88 <_vfiprintf_r+0x198>
 8009e76:	2340      	movs	r3, #64	; 0x40
 8009e78:	eba0 000a 	sub.w	r0, r0, sl
 8009e7c:	fa03 f000 	lsl.w	r0, r3, r0
 8009e80:	9b04      	ldr	r3, [sp, #16]
 8009e82:	4303      	orrs	r3, r0
 8009e84:	3401      	adds	r4, #1
 8009e86:	9304      	str	r3, [sp, #16]
 8009e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e8c:	482c      	ldr	r0, [pc, #176]	; (8009f40 <_vfiprintf_r+0x250>)
 8009e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e92:	2206      	movs	r2, #6
 8009e94:	f7f6 f9ac 	bl	80001f0 <memchr>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d03f      	beq.n	8009f1c <_vfiprintf_r+0x22c>
 8009e9c:	4b29      	ldr	r3, [pc, #164]	; (8009f44 <_vfiprintf_r+0x254>)
 8009e9e:	bb1b      	cbnz	r3, 8009ee8 <_vfiprintf_r+0x1f8>
 8009ea0:	9b03      	ldr	r3, [sp, #12]
 8009ea2:	3307      	adds	r3, #7
 8009ea4:	f023 0307 	bic.w	r3, r3, #7
 8009ea8:	3308      	adds	r3, #8
 8009eaa:	9303      	str	r3, [sp, #12]
 8009eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eae:	443b      	add	r3, r7
 8009eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb2:	e767      	b.n	8009d84 <_vfiprintf_r+0x94>
 8009eb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eb8:	460c      	mov	r4, r1
 8009eba:	2001      	movs	r0, #1
 8009ebc:	e7a5      	b.n	8009e0a <_vfiprintf_r+0x11a>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	3401      	adds	r4, #1
 8009ec2:	9305      	str	r3, [sp, #20]
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	f04f 0c0a 	mov.w	ip, #10
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ed0:	3a30      	subs	r2, #48	; 0x30
 8009ed2:	2a09      	cmp	r2, #9
 8009ed4:	d903      	bls.n	8009ede <_vfiprintf_r+0x1ee>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d0c5      	beq.n	8009e66 <_vfiprintf_r+0x176>
 8009eda:	9105      	str	r1, [sp, #20]
 8009edc:	e7c3      	b.n	8009e66 <_vfiprintf_r+0x176>
 8009ede:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e7f0      	b.n	8009eca <_vfiprintf_r+0x1da>
 8009ee8:	ab03      	add	r3, sp, #12
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	462a      	mov	r2, r5
 8009eee:	4b16      	ldr	r3, [pc, #88]	; (8009f48 <_vfiprintf_r+0x258>)
 8009ef0:	a904      	add	r1, sp, #16
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f7fd fc8c 	bl	8007810 <_printf_float>
 8009ef8:	4607      	mov	r7, r0
 8009efa:	1c78      	adds	r0, r7, #1
 8009efc:	d1d6      	bne.n	8009eac <_vfiprintf_r+0x1bc>
 8009efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f00:	07d9      	lsls	r1, r3, #31
 8009f02:	d405      	bmi.n	8009f10 <_vfiprintf_r+0x220>
 8009f04:	89ab      	ldrh	r3, [r5, #12]
 8009f06:	059a      	lsls	r2, r3, #22
 8009f08:	d402      	bmi.n	8009f10 <_vfiprintf_r+0x220>
 8009f0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f0c:	f7ff f9d0 	bl	80092b0 <__retarget_lock_release_recursive>
 8009f10:	89ab      	ldrh	r3, [r5, #12]
 8009f12:	065b      	lsls	r3, r3, #25
 8009f14:	f53f af12 	bmi.w	8009d3c <_vfiprintf_r+0x4c>
 8009f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f1a:	e711      	b.n	8009d40 <_vfiprintf_r+0x50>
 8009f1c:	ab03      	add	r3, sp, #12
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	462a      	mov	r2, r5
 8009f22:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <_vfiprintf_r+0x258>)
 8009f24:	a904      	add	r1, sp, #16
 8009f26:	4630      	mov	r0, r6
 8009f28:	f7fd ff16 	bl	8007d58 <_printf_i>
 8009f2c:	e7e4      	b.n	8009ef8 <_vfiprintf_r+0x208>
 8009f2e:	bf00      	nop
 8009f30:	0800a3a0 	.word	0x0800a3a0
 8009f34:	0800a3c0 	.word	0x0800a3c0
 8009f38:	0800a380 	.word	0x0800a380
 8009f3c:	0800a53c 	.word	0x0800a53c
 8009f40:	0800a546 	.word	0x0800a546
 8009f44:	08007811 	.word	0x08007811
 8009f48:	08009ccb 	.word	0x08009ccb
 8009f4c:	0800a542 	.word	0x0800a542

08009f50 <_sbrk_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	4d06      	ldr	r5, [pc, #24]	; (8009f6c <_sbrk_r+0x1c>)
 8009f54:	2300      	movs	r3, #0
 8009f56:	4604      	mov	r4, r0
 8009f58:	4608      	mov	r0, r1
 8009f5a:	602b      	str	r3, [r5, #0]
 8009f5c:	f7f8 fa8e 	bl	800247c <_sbrk>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d102      	bne.n	8009f6a <_sbrk_r+0x1a>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	b103      	cbz	r3, 8009f6a <_sbrk_r+0x1a>
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	200003b0 	.word	0x200003b0

08009f70 <__sread>:
 8009f70:	b510      	push	{r4, lr}
 8009f72:	460c      	mov	r4, r1
 8009f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f78:	f000 f8e2 	bl	800a140 <_read_r>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	bfab      	itete	ge
 8009f80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f82:	89a3      	ldrhlt	r3, [r4, #12]
 8009f84:	181b      	addge	r3, r3, r0
 8009f86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f8a:	bfac      	ite	ge
 8009f8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f8e:	81a3      	strhlt	r3, [r4, #12]
 8009f90:	bd10      	pop	{r4, pc}

08009f92 <__swrite>:
 8009f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f96:	461f      	mov	r7, r3
 8009f98:	898b      	ldrh	r3, [r1, #12]
 8009f9a:	05db      	lsls	r3, r3, #23
 8009f9c:	4605      	mov	r5, r0
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	4616      	mov	r6, r2
 8009fa2:	d505      	bpl.n	8009fb0 <__swrite+0x1e>
 8009fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa8:	2302      	movs	r3, #2
 8009faa:	2200      	movs	r2, #0
 8009fac:	f000 f898 	bl	800a0e0 <_lseek_r>
 8009fb0:	89a3      	ldrh	r3, [r4, #12]
 8009fb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fba:	81a3      	strh	r3, [r4, #12]
 8009fbc:	4632      	mov	r2, r6
 8009fbe:	463b      	mov	r3, r7
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc6:	f000 b817 	b.w	8009ff8 <_write_r>

08009fca <__sseek>:
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	460c      	mov	r4, r1
 8009fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd2:	f000 f885 	bl	800a0e0 <_lseek_r>
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	bf15      	itete	ne
 8009fdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009fde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009fe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009fe6:	81a3      	strheq	r3, [r4, #12]
 8009fe8:	bf18      	it	ne
 8009fea:	81a3      	strhne	r3, [r4, #12]
 8009fec:	bd10      	pop	{r4, pc}

08009fee <__sclose>:
 8009fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff2:	f000 b831 	b.w	800a058 <_close_r>
	...

08009ff8 <_write_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4d07      	ldr	r5, [pc, #28]	; (800a018 <_write_r+0x20>)
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	4608      	mov	r0, r1
 800a000:	4611      	mov	r1, r2
 800a002:	2200      	movs	r2, #0
 800a004:	602a      	str	r2, [r5, #0]
 800a006:	461a      	mov	r2, r3
 800a008:	f7f8 f9e7 	bl	80023da <_write>
 800a00c:	1c43      	adds	r3, r0, #1
 800a00e:	d102      	bne.n	800a016 <_write_r+0x1e>
 800a010:	682b      	ldr	r3, [r5, #0]
 800a012:	b103      	cbz	r3, 800a016 <_write_r+0x1e>
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	bd38      	pop	{r3, r4, r5, pc}
 800a018:	200003b0 	.word	0x200003b0

0800a01c <__assert_func>:
 800a01c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a01e:	4614      	mov	r4, r2
 800a020:	461a      	mov	r2, r3
 800a022:	4b09      	ldr	r3, [pc, #36]	; (800a048 <__assert_func+0x2c>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4605      	mov	r5, r0
 800a028:	68d8      	ldr	r0, [r3, #12]
 800a02a:	b14c      	cbz	r4, 800a040 <__assert_func+0x24>
 800a02c:	4b07      	ldr	r3, [pc, #28]	; (800a04c <__assert_func+0x30>)
 800a02e:	9100      	str	r1, [sp, #0]
 800a030:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a034:	4906      	ldr	r1, [pc, #24]	; (800a050 <__assert_func+0x34>)
 800a036:	462b      	mov	r3, r5
 800a038:	f000 f81e 	bl	800a078 <fiprintf>
 800a03c:	f000 f89f 	bl	800a17e <abort>
 800a040:	4b04      	ldr	r3, [pc, #16]	; (800a054 <__assert_func+0x38>)
 800a042:	461c      	mov	r4, r3
 800a044:	e7f3      	b.n	800a02e <__assert_func+0x12>
 800a046:	bf00      	nop
 800a048:	2000003c 	.word	0x2000003c
 800a04c:	0800a54d 	.word	0x0800a54d
 800a050:	0800a55a 	.word	0x0800a55a
 800a054:	0800a588 	.word	0x0800a588

0800a058 <_close_r>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	4d06      	ldr	r5, [pc, #24]	; (800a074 <_close_r+0x1c>)
 800a05c:	2300      	movs	r3, #0
 800a05e:	4604      	mov	r4, r0
 800a060:	4608      	mov	r0, r1
 800a062:	602b      	str	r3, [r5, #0]
 800a064:	f7f8 f9d5 	bl	8002412 <_close>
 800a068:	1c43      	adds	r3, r0, #1
 800a06a:	d102      	bne.n	800a072 <_close_r+0x1a>
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	b103      	cbz	r3, 800a072 <_close_r+0x1a>
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	bd38      	pop	{r3, r4, r5, pc}
 800a074:	200003b0 	.word	0x200003b0

0800a078 <fiprintf>:
 800a078:	b40e      	push	{r1, r2, r3}
 800a07a:	b503      	push	{r0, r1, lr}
 800a07c:	4601      	mov	r1, r0
 800a07e:	ab03      	add	r3, sp, #12
 800a080:	4805      	ldr	r0, [pc, #20]	; (800a098 <fiprintf+0x20>)
 800a082:	f853 2b04 	ldr.w	r2, [r3], #4
 800a086:	6800      	ldr	r0, [r0, #0]
 800a088:	9301      	str	r3, [sp, #4]
 800a08a:	f7ff fe31 	bl	8009cf0 <_vfiprintf_r>
 800a08e:	b002      	add	sp, #8
 800a090:	f85d eb04 	ldr.w	lr, [sp], #4
 800a094:	b003      	add	sp, #12
 800a096:	4770      	bx	lr
 800a098:	2000003c 	.word	0x2000003c

0800a09c <_fstat_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4d07      	ldr	r5, [pc, #28]	; (800a0bc <_fstat_r+0x20>)
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	4608      	mov	r0, r1
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	602b      	str	r3, [r5, #0]
 800a0aa:	f7f8 f9be 	bl	800242a <_fstat>
 800a0ae:	1c43      	adds	r3, r0, #1
 800a0b0:	d102      	bne.n	800a0b8 <_fstat_r+0x1c>
 800a0b2:	682b      	ldr	r3, [r5, #0]
 800a0b4:	b103      	cbz	r3, 800a0b8 <_fstat_r+0x1c>
 800a0b6:	6023      	str	r3, [r4, #0]
 800a0b8:	bd38      	pop	{r3, r4, r5, pc}
 800a0ba:	bf00      	nop
 800a0bc:	200003b0 	.word	0x200003b0

0800a0c0 <_isatty_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4d06      	ldr	r5, [pc, #24]	; (800a0dc <_isatty_r+0x1c>)
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	4608      	mov	r0, r1
 800a0ca:	602b      	str	r3, [r5, #0]
 800a0cc:	f7f8 f9bd 	bl	800244a <_isatty>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d102      	bne.n	800a0da <_isatty_r+0x1a>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	b103      	cbz	r3, 800a0da <_isatty_r+0x1a>
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
 800a0dc:	200003b0 	.word	0x200003b0

0800a0e0 <_lseek_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d07      	ldr	r5, [pc, #28]	; (800a100 <_lseek_r+0x20>)
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	4608      	mov	r0, r1
 800a0e8:	4611      	mov	r1, r2
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	602a      	str	r2, [r5, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	f7f8 f9b6 	bl	8002460 <_lseek>
 800a0f4:	1c43      	adds	r3, r0, #1
 800a0f6:	d102      	bne.n	800a0fe <_lseek_r+0x1e>
 800a0f8:	682b      	ldr	r3, [r5, #0]
 800a0fa:	b103      	cbz	r3, 800a0fe <_lseek_r+0x1e>
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	bd38      	pop	{r3, r4, r5, pc}
 800a100:	200003b0 	.word	0x200003b0

0800a104 <__ascii_mbtowc>:
 800a104:	b082      	sub	sp, #8
 800a106:	b901      	cbnz	r1, 800a10a <__ascii_mbtowc+0x6>
 800a108:	a901      	add	r1, sp, #4
 800a10a:	b142      	cbz	r2, 800a11e <__ascii_mbtowc+0x1a>
 800a10c:	b14b      	cbz	r3, 800a122 <__ascii_mbtowc+0x1e>
 800a10e:	7813      	ldrb	r3, [r2, #0]
 800a110:	600b      	str	r3, [r1, #0]
 800a112:	7812      	ldrb	r2, [r2, #0]
 800a114:	1e10      	subs	r0, r2, #0
 800a116:	bf18      	it	ne
 800a118:	2001      	movne	r0, #1
 800a11a:	b002      	add	sp, #8
 800a11c:	4770      	bx	lr
 800a11e:	4610      	mov	r0, r2
 800a120:	e7fb      	b.n	800a11a <__ascii_mbtowc+0x16>
 800a122:	f06f 0001 	mvn.w	r0, #1
 800a126:	e7f8      	b.n	800a11a <__ascii_mbtowc+0x16>

0800a128 <__malloc_lock>:
 800a128:	4801      	ldr	r0, [pc, #4]	; (800a130 <__malloc_lock+0x8>)
 800a12a:	f7ff b8c0 	b.w	80092ae <__retarget_lock_acquire_recursive>
 800a12e:	bf00      	nop
 800a130:	200003a4 	.word	0x200003a4

0800a134 <__malloc_unlock>:
 800a134:	4801      	ldr	r0, [pc, #4]	; (800a13c <__malloc_unlock+0x8>)
 800a136:	f7ff b8bb 	b.w	80092b0 <__retarget_lock_release_recursive>
 800a13a:	bf00      	nop
 800a13c:	200003a4 	.word	0x200003a4

0800a140 <_read_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	4d07      	ldr	r5, [pc, #28]	; (800a160 <_read_r+0x20>)
 800a144:	4604      	mov	r4, r0
 800a146:	4608      	mov	r0, r1
 800a148:	4611      	mov	r1, r2
 800a14a:	2200      	movs	r2, #0
 800a14c:	602a      	str	r2, [r5, #0]
 800a14e:	461a      	mov	r2, r3
 800a150:	f7f8 f926 	bl	80023a0 <_read>
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	d102      	bne.n	800a15e <_read_r+0x1e>
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	b103      	cbz	r3, 800a15e <_read_r+0x1e>
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
 800a160:	200003b0 	.word	0x200003b0

0800a164 <__ascii_wctomb>:
 800a164:	b149      	cbz	r1, 800a17a <__ascii_wctomb+0x16>
 800a166:	2aff      	cmp	r2, #255	; 0xff
 800a168:	bf85      	ittet	hi
 800a16a:	238a      	movhi	r3, #138	; 0x8a
 800a16c:	6003      	strhi	r3, [r0, #0]
 800a16e:	700a      	strbls	r2, [r1, #0]
 800a170:	f04f 30ff 	movhi.w	r0, #4294967295
 800a174:	bf98      	it	ls
 800a176:	2001      	movls	r0, #1
 800a178:	4770      	bx	lr
 800a17a:	4608      	mov	r0, r1
 800a17c:	4770      	bx	lr

0800a17e <abort>:
 800a17e:	b508      	push	{r3, lr}
 800a180:	2006      	movs	r0, #6
 800a182:	f000 f82b 	bl	800a1dc <raise>
 800a186:	2001      	movs	r0, #1
 800a188:	f7f8 f900 	bl	800238c <_exit>

0800a18c <_raise_r>:
 800a18c:	291f      	cmp	r1, #31
 800a18e:	b538      	push	{r3, r4, r5, lr}
 800a190:	4604      	mov	r4, r0
 800a192:	460d      	mov	r5, r1
 800a194:	d904      	bls.n	800a1a0 <_raise_r+0x14>
 800a196:	2316      	movs	r3, #22
 800a198:	6003      	str	r3, [r0, #0]
 800a19a:	f04f 30ff 	mov.w	r0, #4294967295
 800a19e:	bd38      	pop	{r3, r4, r5, pc}
 800a1a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1a2:	b112      	cbz	r2, 800a1aa <_raise_r+0x1e>
 800a1a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1a8:	b94b      	cbnz	r3, 800a1be <_raise_r+0x32>
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f000 f830 	bl	800a210 <_getpid_r>
 800a1b0:	462a      	mov	r2, r5
 800a1b2:	4601      	mov	r1, r0
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1ba:	f000 b817 	b.w	800a1ec <_kill_r>
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d00a      	beq.n	800a1d8 <_raise_r+0x4c>
 800a1c2:	1c59      	adds	r1, r3, #1
 800a1c4:	d103      	bne.n	800a1ce <_raise_r+0x42>
 800a1c6:	2316      	movs	r3, #22
 800a1c8:	6003      	str	r3, [r0, #0]
 800a1ca:	2001      	movs	r0, #1
 800a1cc:	e7e7      	b.n	800a19e <_raise_r+0x12>
 800a1ce:	2400      	movs	r4, #0
 800a1d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	4798      	blx	r3
 800a1d8:	2000      	movs	r0, #0
 800a1da:	e7e0      	b.n	800a19e <_raise_r+0x12>

0800a1dc <raise>:
 800a1dc:	4b02      	ldr	r3, [pc, #8]	; (800a1e8 <raise+0xc>)
 800a1de:	4601      	mov	r1, r0
 800a1e0:	6818      	ldr	r0, [r3, #0]
 800a1e2:	f7ff bfd3 	b.w	800a18c <_raise_r>
 800a1e6:	bf00      	nop
 800a1e8:	2000003c 	.word	0x2000003c

0800a1ec <_kill_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4d07      	ldr	r5, [pc, #28]	; (800a20c <_kill_r+0x20>)
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	602b      	str	r3, [r5, #0]
 800a1fa:	f7f8 f8b7 	bl	800236c <_kill>
 800a1fe:	1c43      	adds	r3, r0, #1
 800a200:	d102      	bne.n	800a208 <_kill_r+0x1c>
 800a202:	682b      	ldr	r3, [r5, #0]
 800a204:	b103      	cbz	r3, 800a208 <_kill_r+0x1c>
 800a206:	6023      	str	r3, [r4, #0]
 800a208:	bd38      	pop	{r3, r4, r5, pc}
 800a20a:	bf00      	nop
 800a20c:	200003b0 	.word	0x200003b0

0800a210 <_getpid_r>:
 800a210:	f7f8 b8a4 	b.w	800235c <_getpid>

0800a214 <_init>:
 800a214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a216:	bf00      	nop
 800a218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a21a:	bc08      	pop	{r3}
 800a21c:	469e      	mov	lr, r3
 800a21e:	4770      	bx	lr

0800a220 <_fini>:
 800a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a222:	bf00      	nop
 800a224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a226:	bc08      	pop	{r3}
 800a228:	469e      	mov	lr, r3
 800a22a:	4770      	bx	lr
